{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to PYBOSSA\ns documentation\n\n\nPYBOSSA is a technology developed by \nScifabric\n.\nIt is used for the development of platforms and data collection within\ncollaborative environments, analysis and data enrichment.\n\n\nPYBOSSA is an extremely flexible and versatile technology with a\nmultitude of applications that adapt to each specific case facilitating\nmany of the daily tasks that take place in research environments such as\nmuseums, art galleries, heritage institutions, libraries of any kind,\nmarket research companies, hospitals, universities and all those\norganisations that manage data or require information from their\ncustomers/users -such as airports, shopping malls, banks, hotel chains,\netc.\n\n\nPYBOSSA\u2019s simplicity consists in its easy adjustment to any areas using\nany of the available templates, this way every customer can then adapt\nit to their own needs.\n\n\nPYBOSSA can import data directly from other products such as Amazon\nS3, Youtube, Google Spreadsheets, Raspberry Pi, etc.\nThrough all these integrations PYBOSSA allows data capture for further\nanalysis made by users in a transparent and easy way.\n\n\nPYBOSSA for python 3\n\n\nWe\nve finally migrated PYBOSSA to python 3. We\nre not going to merge into master until we test it in production a bit\nmore, so please, help us by testing it. All you have to do is basically, check out the python3 branch (migrate-python3) and run\nit. Then, any bug, issue you find, you just report it and we will be happy to help you.\n\n\nGoogle, Twitter and Facebook accounts\n\n\nWe\nve officially dropped support for login using social networks. We will only support local based accounts, and you can still use the external_user ID for\nmanaging those accounts if you want. There\ns script in the cli.py file that allows you to migrate your social media accounts into local ones.\n\n\nGet professional support\n\n\nYou can hire us to help you with your PYBOSSA project. Go to our website, and \ncontact us\n.\n\n\nSupporting PYBOSSA\n\n\nPYBOSSA is an open source project. Its ongoing development is made\npossible thanks to the support by these awesome \nbackers\n and\nScifabric\ns clients.\n\n\nIf you\nd like to join the backers, check out \nScifabric\ns Patreon campaign\n or\ncontact \nScifabric\n if you want to become a client.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-pybossas-documentation", 
            "text": "PYBOSSA is a technology developed by  Scifabric .\nIt is used for the development of platforms and data collection within\ncollaborative environments, analysis and data enrichment.  PYBOSSA is an extremely flexible and versatile technology with a\nmultitude of applications that adapt to each specific case facilitating\nmany of the daily tasks that take place in research environments such as\nmuseums, art galleries, heritage institutions, libraries of any kind,\nmarket research companies, hospitals, universities and all those\norganisations that manage data or require information from their\ncustomers/users -such as airports, shopping malls, banks, hotel chains,\netc.  PYBOSSA\u2019s simplicity consists in its easy adjustment to any areas using\nany of the available templates, this way every customer can then adapt\nit to their own needs.  PYBOSSA can import data directly from other products such as Amazon\nS3, Youtube, Google Spreadsheets, Raspberry Pi, etc.\nThrough all these integrations PYBOSSA allows data capture for further\nanalysis made by users in a transparent and easy way.", 
            "title": "Welcome to PYBOSSA's documentation"
        }, 
        {
            "location": "/#pybossa-for-python-3", 
            "text": "We ve finally migrated PYBOSSA to python 3. We re not going to merge into master until we test it in production a bit\nmore, so please, help us by testing it. All you have to do is basically, check out the python3 branch (migrate-python3) and run\nit. Then, any bug, issue you find, you just report it and we will be happy to help you.", 
            "title": "PYBOSSA for python 3"
        }, 
        {
            "location": "/#google-twitter-and-facebook-accounts", 
            "text": "We ve officially dropped support for login using social networks. We will only support local based accounts, and you can still use the external_user ID for\nmanaging those accounts if you want. There s script in the cli.py file that allows you to migrate your social media accounts into local ones.", 
            "title": "Google, Twitter and Facebook accounts"
        }, 
        {
            "location": "/#get-professional-support", 
            "text": "You can hire us to help you with your PYBOSSA project. Go to our website, and  contact us .", 
            "title": "Get professional support"
        }, 
        {
            "location": "/#supporting-pybossa", 
            "text": "PYBOSSA is an open source project. Its ongoing development is made\npossible thanks to the support by these awesome  backers  and\nScifabric s clients.  If you d like to join the backers, check out  Scifabric s Patreon campaign  or\ncontact  Scifabric  if you want to become a client.", 
            "title": "Supporting PYBOSSA"
        }, 
        {
            "location": "/installation/gettingstarted/", 
            "text": "Getting started\n\n\nPYBOSSA is a python web server built using the Flask\nmicro-framework. You will need the following \nofficially supported requirements\n:\n\n\n\n\nUbuntu 20.04 LTS\n\n\nPython \n= 3.6\n\n\nPostgreSQL \n= 9.5\n\n\nRedis \n= 2.6\n\n\npip \n= 6.1\n\n\n\n\nIn general, all those dependencies are available within the Ubuntu distribution,\nso you should be able to install all of them without problems.\n\n\n\n\nPYBOSSA hosted servers\n\n\nIf you want to have a hosting solution for your PYBOSSA servers,\ncheckout Scifabric \nsolutions\n.\n\n\n\n\nDependencies not officially supported\nIt may also run with older software but we do not officially support it:\nPython \n 3.6\nPostgreSQL \n= 9.3", 
            "title": "Getting started"
        }, 
        {
            "location": "/installation/gettingstarted/#getting-started", 
            "text": "PYBOSSA is a python web server built using the Flask\nmicro-framework. You will need the following  officially supported requirements :   Ubuntu 20.04 LTS  Python  = 3.6  PostgreSQL  = 9.5  Redis  = 2.6  pip  = 6.1   In general, all those dependencies are available within the Ubuntu distribution,\nso you should be able to install all of them without problems.   PYBOSSA hosted servers  If you want to have a hosting solution for your PYBOSSA servers,\ncheckout Scifabric  solutions .   Dependencies not officially supported It may also run with older software but we do not officially support it: Python   3.6 PostgreSQL  = 9.3", 
            "title": "Getting started"
        }, 
        {
            "location": "/installation/guide/", 
            "text": "Setting things up\n\n\nBefore proceeding to install PYBOSSA, you will need to configure some other applications and libraries in your system. In this page, you will get a step by step guide on how to install all the required packages and libraries for PYBOSSA using the latest \nUbuntu Server Long Term Support\n version available at the moment:\n\n\n\n\nUbuntu 18.04 LTS\n\n\n\n\nPYBOSSA hosted servers\nCheckout Scifabric\ns \nhosted PYBOSSA servers\n.\nInstalling git - a distributed version control system\n\n\nPYBOSSA uses the \ngit\n distributed version control\nsystem for handling the PYBOSSA server source code as well as the\ntemplate projects.\n\n\nGit\n is a free and open source distributed version control system designed to handle everything from small to extensive projects with speed and efficiency.\n\n\nTo install the software, all you have to do is:\n\n\n1\nsudo apt-get install git\n\n\n\n\n\n\nInstalling the PostgreSQL database\n\n\nPostgreSQL\n is a powerful, open source\nobject-relational database system. It has more than 15 years of active\ndevelopment and a proven architecture that has earned it a strong\nreputation for reliability, data integrity, and correctness.\n\n\nPYBOSSA uses \nPostgreSQL\n as the main\ndatabase for storing all the data. To install it follow the next steps:\n\n\n1\nsudo apt-get install postgresql postgresql-server-dev-all libpq-dev python3-psycopg2 libsasl2-dev libldap2-dev libssl-dev\n\n\n\n\n\n\nInstalling virtualenv (optional, but recommended)\n\n\nWe recommend installing PYBOSSA using a\n\nvirtualenv\n as it will create a\nan isolated Python environment, helping you to manage different\ndependencies and versions without having to deal with root permissions\nin your server machine.\n\n\nvirtualenv\n creates an\nenvironment that has its installation directories that doesn\nt\nshare libraries with other virtualenv environments (and optionally\ndoesn\nt access the globally installed libraries either).\n\n\nYou can install the software if you want at the system level if you have root privileges; however, this may lead to broken dependencies in the OS for all your Python packages, so if possible, avoid this solution and use the [virtualenv]\nhttp://pypi.python.org/pypi/virtualenv\n) solution.\n\n\nInstalling \nvirtualenv\n in the\nUbuntu server:\n\n\n1\nsudo apt-get install python3-venv\n\n\n\n\n\n\nAfter installing the software you will be able to create independent virtual environments for the PYBOSSA installation as well as for the template projects.\n\n\nInstalling the PYBOSSA Python requirements\n\n\nInstalling the required libraries for PYBOSSA is a step that will need to use some compilers and dev libraries to work. Thus, you will need to install the following packages:\n\n\n1\n2\nsudo apt-get install python-dev build-essential libjpeg-dev libssl-dev libffi-dev\nsudo apt-get install dbus libdbus-1-dev libdbus-glib-1-dev libldap2-dev libsasl2-dev\n\n\n\n\n\n\nThen, you are ready to download the code and install the required\nlibraries for running PYBOSSA.\n\n\n\n\nNote\n\n\nWe recommend you to install the required libraries using a \nvirtual environment\n with the command virtualenv (you can install the package python-virtualenv). This will allow having all the libraries for PYBOSSA in one folder of your choice, so cleaning the installation would be as simple as deleting that folder without affecting your system.\n\n\n\n\n\n\nNote\n\n\nYou might need to use pyenv to install a python 3.6 version in order to run the right version. Please check the official documentation of pyenv.\n\n\n\n\nIf you decide to use a \nvirtualenv\n then, follow these steps (lines\nstarting with \n#\n are comments):\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n# get the source code\n\ngit clone --recursive https://github.com/Scifabric/pybossa\n\n# Access the source code folder\n\n\ncd\n pybossa\npython3 -mvenv env\n\n# Activate the virtual environment\n\n\nsource\n env/bin/activate\n\n# Upgrade pip to latest version\n\npip install -U pip\n\n# Install the required libraries\n\npip install -r requirements.txt\n\n\n\n\n\n\nOtherwise, you should be able to install the libraries in your system\nlike this:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n# get the source\n\ngit clone --recursive https://github.com/Scifabric/pybossa\n\n# Access the source code folder\n\n\ncd\n pybossa\n\n# Upgrade pip to latest version\n\npip install -U pip\n\n# Install the required libraries\n\npip install -r requirements.txt\n\n\n\n\n\n\n\n\nNote\n\n\nVim\n editor is a very popular text editor for GNU/Linux systems, however, it\nmay be difficult for some people if you have never used it before.\nThus, if you want to try another and much simpler editor for editing\nthe configuration files you can use the \nGNU\nNano\n editor.\n\n\n\n\nCreate a settings file and enter your SQLAlchemy DB URI (you can also\noverride default settings as needed):\n\n\n1\n2\n3\ncp settings_local.py.tmpl settings_local.py\n\n# now edit ...\n\nvim settings_local.py\n\n\n\n\n\n\n\n\nNote\n\n\nAlternatively, if you want your config elsewhere or with different name:\ncp settings_local.py.tmpl \n/my/config/file/somewhere\n\nexport PYBOSSA_SETTINGS=/my/config/file/somewhere.\n\n\n\n\nCreate the alembic config file and set the sqlalchemy url to point to\nyour database:\n\n\n1\n2\n    cp alembic.ini.template alembic.ini\n    \n# now set the sqlalchemy.url ...\n\n\n\n\n\n\n\nInstalling Redis\n\n\nPYBOSSA uses Redis not only for caching objects\nand speed up the site, but also for limiting the usage of the API\nrequests.\n\n\nYou can install the latest Redis version downloading the package directly from its official \nsite\n site. Since Ubuntu 14.04 you can also, use the internal package:\n\n\n1\nsudo apt-get install redis-server\n\n\n\n\n\n\nOnce you have downloaded it and installed it, you will need to run two\ninstances:\n\n\n\n\nRedis-server\n: as a master node, accepting read and write\n  operations.\n\n\nRedis-sentinel\n: as a sentinel node, to configure the master and\n  slave Redis nodes.\n\n\n\n\nServer\n\n\nIf you have installed the server via your distribution package system,\nthen, the server will be running already. If this is not the case, check\nthe official documentation of \nRedis\n to configure it\nand run it. The default values should be OK.\n\n\n\n\nWarning\n\n\nPlease, make sure that you are running version \n= 2.6\n\n\n\n\n\n\nTip\n\n\nIf you have installed the software using the source code, then, check the contrib folder, as there is a specific folder for Redis with init.d  start scripts. You only have to copy that file to /etc/init.d/ and adapt it to your needs.\n\n\n\n\nSentinel\n\n\nYou can run Redis in sentinel mode with the \nsentinel\n arg, or by its command named: redis-sentinel. This will vary from your distribution and version of Redis, so check its help page to know how you can run it.\n\n\nIn any case, you will need to run a sentinel node, as PYBOSSA uses it to load-balance the queries, and also to autoconfigure the master and\nslaves automagically.\n\n\nTo run PYBOSSA, you will need first to configure a Sentinel node. Create a config file named \nsentinel.conf\n with something like\nthis:\n\n\n1\n2\n3\n4\nsentinel monitor mymaster 127.0.0.1 6379 2\nsentinel down-after-milliseconds mymaster 60000\nsentinel failover-timeout mymaster 180000\nsentinel parallel-syncs mymaster 1\n\n\n\n\n\n\nIn the contrib folder, you will find a file named \nsentinel.conf\n that\nshould be enough to run the sentinel node. Thus, for running it:\n\n\n1\nredis-server contrib/sentinel.conf --sentinel\n\n\n\n\n\n\n\n\nWarning\n\n\nPlease, make sure that you are running version \n= 2.6\n\n\n\n\n\n\nTip\n\n\nIf you have installed the software using the source code, then, check the contrib folder, as there is a specific folder for Redis with init.d   start scripts. You only have to copy that file to /etc/init.d/ and adapt it to your needs.\n\n\n\n\nSpeeding up the site\n\n\nPYBOSSA comes with a cache system that \nis disabled by default\n. PYBOSSA uses the \nRedis\n server to cache some objects like projects, statistics, etc. The system uses the \nSentinel\n feature of \nRedis\n, so you can have several master/slave nodes configured with \nSentinel\n, and your PYBOSSA server will use them \nautomagically.\n\n\nEnabling the cache\n\n\nOnce you have started your master Redis-server to accept connections, Sentinel will manage it and its slaves. If you add a slave, Sentinel will find it and start using it for load-balancing queries in PYBOSSA Cache system.\n\n\nFor more details about \nRedis\n and\n\nSentinel\n, please, read the official\n\ndocumentation\n.\n\n\nIf you want to disable it, you can do it with an environment variable:\n\n\n1\nexport\n \nPYBOSSA_REDIS_CACHE_DISABLED\n=\n1\n\n\n\n\n\n\n\nThen start the server, and nothing will be cached.\n\n\n\n\nWarning\n\n\nWe highly recommend you not to disable the cache, as it will boost the performance of the server caching SQL queries as well as page views. If you have lots of projects with hundreds of tasks, you should enable it.\n\n\n\n\nRunning asynchronous tasks in the background\n\n\nPYBOSSA uses the Python libraries \nRQ\n and\n\nRQScheduler\n to allow slow or\ncomputationally-heavy tasks to be run in the background in an\nasynchronous way.\n\n\nSome of the tasks are run on a periodic, scheduled, basis, like the\nrefreshment of the cache and notifications sent to users, while others, like the sending of emails, are created in real time, responding to events that may happen inside the PYBOSSA server (i.e. sending an email with a recovery password).\n\n\nTo allow all this, you will need two additional Python processes to run in the background: the \nworker\n and the \nscheduler\n. The scheduler will create the periodic tasks while other tasks will be generated dynamically. The worker will process each of them.\n\n\nTo run the scheduler, just run the following command in a terminal:\n\n\n1\nrqscheduler --host IP-of-your-redis-master-node\n\n\n\n\n\n\nSimilarly, to get the tasks done by the worker, run:\n\n\n1\npython app_context_rqworker.py scheduled_jobs super high medium low email maintenance\n\n\n\n\n\n\nWe also recommend using \nsupervisor\n\nfor simply running these processes with a single command.\n\n\n\n\nNote\n\n\nPYBOSSA relies on the scheduler and the worker for the normal functioning of the server, so make sure you run both services.\n\n\n\n\nConfiguring the DataBase\n\n\nYou need first to add a user to your \nPostgreSQL\n database:\n\n\n1\n2\nsudo su postgres\ncreateuser -d -P pybossa\n\n\n\n\n\n\nUse password \ntester\n when prompted.\n\n\n\n\nNote\n\n\nYou should use the same username that you have used in the\nsettings_local.py and alembic.ini files.\n\n\n\n\nAfter running the last command, you may also have to answer to these questions:\n\n\n\n\nShall the new role be a super user? Answer \nn\n (press the \nn\n\n  key).\n\n\nShall the new role be allowed to create databases? Answer \ny\n\n  (press the \ny\n key).\n\n\nShall the new role be allowed to create more new roles? Answer \nn\n\n  (press the \nn\n key).\n\n\n\n\nAnd now, you can create the database:\n\n\n1\ncreatedb pybossa -O pybossa\n\n\n\n\n\n\nFinally, exit the postgresql user:\n\n\n1\nexit\n\n\n\n\n\n\n\nThen, populate the database with its tables:\n\n\n1\npython cli.py db_create\n\n\n\n\n\n\nRun the web server:\n\n1\npython run.py\n\n\n\n\n\nOpen in your web browser the following URL: \nhttp://localhost:5000\n\n\nAnd if you see the following home page, then, your installation has been\ncompleted:\n\n\n\n\nUpdating PYBOSSA\n\n\nPYBOSSA v2.9.0 starts using JSONB data type format within the PostgreSQL database. The upgrade should not break anything,\nbut be aware that all the materalized views will need to be dropped. This is required because some of these views use\nthe info field and we cannot migrate to JSONB without recreating them.\n\n\nThus, be sure to take a full backup before upgrading of your database. Then, delete all your materialized views that create a conflict (by default\nPYBOSSA handles the basic ones, but if you have created your own leaderboards, this will not be handled by the script).\n\n\nRun the migration (see next section) and re-create your materialized views. Most of these views are automatically handled by the background\njobs, so all of them should be recreated by the system without your intervention.\n\n\nUpdating PYBOSSA core and migrating the database table structure\n\n\nSometimes, the PYBOSSA developers add a new column or table to the PYBOSSA server, forcing you to carry out a \nmigration\n of the\ndatabase. PYBOSSA uses \nAlembic\n for performing the migrations, so in case that your production server needs to upgrade the DB structure to a new version, all you have to do is to:\n\n1\n2\n3\n4\ngit pull origin master\npip install -U pip\npip install -U -r requirements.txt\nalembic upgrade head\n\n\n\n\n\nThe first command will get you the latest source code. The second command updates the libraries. Finally, Alembic upgrades the database structure.\n\n\nVery occasionally, updates to the core system will also be required. For example, updating \npybossa.js\n in your PYBOSSA theme. To update the default theme, you can do this:\n\n\n1\n2\ncd\n home/pybossa/pybossa/themes/default\ngit pull origin master\n\n\n\n\n\n\n\n\nNote\n\n\nIf you are using the \nvirtualenv\n be sure to activate it before running the \nAlembic\n upgrade command.\n\n\n\n\nMigrating Your Old DB Records\n\n\nIn versions before v0.2.3, the default supported option for the \nlong_description\n field in projects was HTML. In new versions of PYBOSSA, the default option is Markdown. However, you can use HTML instead of Markdown by modifying the default PYBOSSA theme or using your own forked from the default one.\n\n\nIf you were have been using PYBOSSA for a while you might have projects in your database whose \nlong_description\n is in HTML format. Hence, if you are using the default theme for PYBOSSA, you will no longer see them rendered as HTML and may have some issues.\n\n\nTo avoid this, you can run a simple script to convert all the\nDB project\ns \nlong_description\n field from HTML to Markdown, just by\nrunning the following commands:\n\n\n1\n2\n3\npip install -U pip\npip install -U -r requirements.txt\npython cli.py markdown_db_migrate\n\n\n\n\n\n\nThe first command will install a Python package that will handle the\nHTML to Markdown conversion, while the second one will convert your DB\nentries.\n\n\n\n\nNote\n\n\nAs always, if you are using the \nvirtualenv\n be sure to activate it before running the pip install command.\n\n\n\n\n\n\nNote\n\n\nThe latest version of PYBOSSA requires PostgreSQL \n= 9.3 as it is using materialized views for the dashboard. This feature is only available from PostgreSQL 9.3, so please upgrade the DB as soon as possible. For more information about upgrading the PostgreSQL database check this \npage\n.", 
            "title": "Installing the server"
        }, 
        {
            "location": "/installation/guide/#setting-things-up", 
            "text": "Before proceeding to install PYBOSSA, you will need to configure some other applications and libraries in your system. In this page, you will get a step by step guide on how to install all the required packages and libraries for PYBOSSA using the latest  Ubuntu Server Long Term Support  version available at the moment:   Ubuntu 18.04 LTS   PYBOSSA hosted servers Checkout Scifabric s  hosted PYBOSSA servers .", 
            "title": "Setting things up"
        }, 
        {
            "location": "/installation/guide/#installing-git-a-distributed-version-control-system", 
            "text": "PYBOSSA uses the  git  distributed version control\nsystem for handling the PYBOSSA server source code as well as the\ntemplate projects.  Git  is a free and open source distributed version control system designed to handle everything from small to extensive projects with speed and efficiency.  To install the software, all you have to do is:  1 sudo apt-get install git", 
            "title": "Installing git - a distributed version control system"
        }, 
        {
            "location": "/installation/guide/#installing-the-postgresql-database", 
            "text": "PostgreSQL  is a powerful, open source\nobject-relational database system. It has more than 15 years of active\ndevelopment and a proven architecture that has earned it a strong\nreputation for reliability, data integrity, and correctness.  PYBOSSA uses  PostgreSQL  as the main\ndatabase for storing all the data. To install it follow the next steps:  1 sudo apt-get install postgresql postgresql-server-dev-all libpq-dev python3-psycopg2 libsasl2-dev libldap2-dev libssl-dev", 
            "title": "Installing the PostgreSQL database"
        }, 
        {
            "location": "/installation/guide/#installing-virtualenv-optional-but-recommended", 
            "text": "We recommend installing PYBOSSA using a virtualenv  as it will create a\nan isolated Python environment, helping you to manage different\ndependencies and versions without having to deal with root permissions\nin your server machine.  virtualenv  creates an\nenvironment that has its installation directories that doesn t\nshare libraries with other virtualenv environments (and optionally\ndoesn t access the globally installed libraries either).  You can install the software if you want at the system level if you have root privileges; however, this may lead to broken dependencies in the OS for all your Python packages, so if possible, avoid this solution and use the [virtualenv] http://pypi.python.org/pypi/virtualenv ) solution.  Installing  virtualenv  in the\nUbuntu server:  1 sudo apt-get install python3-venv   After installing the software you will be able to create independent virtual environments for the PYBOSSA installation as well as for the template projects.", 
            "title": "Installing virtualenv (optional, but recommended)"
        }, 
        {
            "location": "/installation/guide/#installing-the-pybossa-python-requirements", 
            "text": "Installing the required libraries for PYBOSSA is a step that will need to use some compilers and dev libraries to work. Thus, you will need to install the following packages:  1\n2 sudo apt-get install python-dev build-essential libjpeg-dev libssl-dev libffi-dev\nsudo apt-get install dbus libdbus-1-dev libdbus-glib-1-dev libldap2-dev libsasl2-dev   Then, you are ready to download the code and install the required\nlibraries for running PYBOSSA.   Note  We recommend you to install the required libraries using a  virtual environment  with the command virtualenv (you can install the package python-virtualenv). This will allow having all the libraries for PYBOSSA in one folder of your choice, so cleaning the installation would be as simple as deleting that folder without affecting your system.    Note  You might need to use pyenv to install a python 3.6 version in order to run the right version. Please check the official documentation of pyenv.   If you decide to use a  virtualenv  then, follow these steps (lines\nstarting with  #  are comments):   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 # get the source code \ngit clone --recursive https://github.com/Scifabric/pybossa # Access the source code folder  cd  pybossa\npython3 -mvenv env # Activate the virtual environment  source  env/bin/activate # Upgrade pip to latest version \npip install -U pip # Install the required libraries \npip install -r requirements.txt   Otherwise, you should be able to install the libraries in your system\nlike this:  1\n2\n3\n4\n5\n6\n7\n8 # get the source \ngit clone --recursive https://github.com/Scifabric/pybossa # Access the source code folder  cd  pybossa # Upgrade pip to latest version \npip install -U pip # Install the required libraries \npip install -r requirements.txt    Note  Vim  editor is a very popular text editor for GNU/Linux systems, however, it\nmay be difficult for some people if you have never used it before.\nThus, if you want to try another and much simpler editor for editing\nthe configuration files you can use the  GNU\nNano  editor.   Create a settings file and enter your SQLAlchemy DB URI (you can also\noverride default settings as needed):  1\n2\n3 cp settings_local.py.tmpl settings_local.py # now edit ... \nvim settings_local.py    Note  Alternatively, if you want your config elsewhere or with different name:\ncp settings_local.py.tmpl  /my/config/file/somewhere \nexport PYBOSSA_SETTINGS=/my/config/file/somewhere.   Create the alembic config file and set the sqlalchemy url to point to\nyour database:  1\n2     cp alembic.ini.template alembic.ini\n     # now set the sqlalchemy.url ...", 
            "title": "Installing the PYBOSSA Python requirements"
        }, 
        {
            "location": "/installation/guide/#installing-redis", 
            "text": "PYBOSSA uses Redis not only for caching objects\nand speed up the site, but also for limiting the usage of the API\nrequests.  You can install the latest Redis version downloading the package directly from its official  site  site. Since Ubuntu 14.04 you can also, use the internal package:  1 sudo apt-get install redis-server   Once you have downloaded it and installed it, you will need to run two\ninstances:   Redis-server : as a master node, accepting read and write\n  operations.  Redis-sentinel : as a sentinel node, to configure the master and\n  slave Redis nodes.", 
            "title": "Installing Redis"
        }, 
        {
            "location": "/installation/guide/#server", 
            "text": "If you have installed the server via your distribution package system,\nthen, the server will be running already. If this is not the case, check\nthe official documentation of  Redis  to configure it\nand run it. The default values should be OK.   Warning  Please, make sure that you are running version  = 2.6    Tip  If you have installed the software using the source code, then, check the contrib folder, as there is a specific folder for Redis with init.d  start scripts. You only have to copy that file to /etc/init.d/ and adapt it to your needs.", 
            "title": "Server"
        }, 
        {
            "location": "/installation/guide/#sentinel", 
            "text": "You can run Redis in sentinel mode with the  sentinel  arg, or by its command named: redis-sentinel. This will vary from your distribution and version of Redis, so check its help page to know how you can run it.  In any case, you will need to run a sentinel node, as PYBOSSA uses it to load-balance the queries, and also to autoconfigure the master and\nslaves automagically.  To run PYBOSSA, you will need first to configure a Sentinel node. Create a config file named  sentinel.conf  with something like\nthis:  1\n2\n3\n4 sentinel monitor mymaster 127.0.0.1 6379 2\nsentinel down-after-milliseconds mymaster 60000\nsentinel failover-timeout mymaster 180000\nsentinel parallel-syncs mymaster 1   In the contrib folder, you will find a file named  sentinel.conf  that\nshould be enough to run the sentinel node. Thus, for running it:  1 redis-server contrib/sentinel.conf --sentinel    Warning  Please, make sure that you are running version  = 2.6    Tip  If you have installed the software using the source code, then, check the contrib folder, as there is a specific folder for Redis with init.d   start scripts. You only have to copy that file to /etc/init.d/ and adapt it to your needs.", 
            "title": "Sentinel"
        }, 
        {
            "location": "/installation/guide/#speeding-up-the-site", 
            "text": "PYBOSSA comes with a cache system that  is disabled by default . PYBOSSA uses the  Redis  server to cache some objects like projects, statistics, etc. The system uses the  Sentinel  feature of  Redis , so you can have several master/slave nodes configured with  Sentinel , and your PYBOSSA server will use them  automagically.", 
            "title": "Speeding up the site"
        }, 
        {
            "location": "/installation/guide/#enabling-the-cache", 
            "text": "Once you have started your master Redis-server to accept connections, Sentinel will manage it and its slaves. If you add a slave, Sentinel will find it and start using it for load-balancing queries in PYBOSSA Cache system.  For more details about  Redis  and Sentinel , please, read the official documentation .  If you want to disable it, you can do it with an environment variable:  1 export   PYBOSSA_REDIS_CACHE_DISABLED = 1    Then start the server, and nothing will be cached.   Warning  We highly recommend you not to disable the cache, as it will boost the performance of the server caching SQL queries as well as page views. If you have lots of projects with hundreds of tasks, you should enable it.", 
            "title": "Enabling the cache"
        }, 
        {
            "location": "/installation/guide/#running-asynchronous-tasks-in-the-background", 
            "text": "PYBOSSA uses the Python libraries  RQ  and RQScheduler  to allow slow or\ncomputationally-heavy tasks to be run in the background in an\nasynchronous way.  Some of the tasks are run on a periodic, scheduled, basis, like the\nrefreshment of the cache and notifications sent to users, while others, like the sending of emails, are created in real time, responding to events that may happen inside the PYBOSSA server (i.e. sending an email with a recovery password).  To allow all this, you will need two additional Python processes to run in the background: the  worker  and the  scheduler . The scheduler will create the periodic tasks while other tasks will be generated dynamically. The worker will process each of them.  To run the scheduler, just run the following command in a terminal:  1 rqscheduler --host IP-of-your-redis-master-node   Similarly, to get the tasks done by the worker, run:  1 python app_context_rqworker.py scheduled_jobs super high medium low email maintenance   We also recommend using  supervisor \nfor simply running these processes with a single command.   Note  PYBOSSA relies on the scheduler and the worker for the normal functioning of the server, so make sure you run both services.", 
            "title": "Running asynchronous tasks in the background"
        }, 
        {
            "location": "/installation/guide/#configuring-the-database", 
            "text": "You need first to add a user to your  PostgreSQL  database:  1\n2 sudo su postgres\ncreateuser -d -P pybossa   Use password  tester  when prompted.   Note  You should use the same username that you have used in the\nsettings_local.py and alembic.ini files.   After running the last command, you may also have to answer to these questions:   Shall the new role be a super user? Answer  n  (press the  n \n  key).  Shall the new role be allowed to create databases? Answer  y \n  (press the  y  key).  Shall the new role be allowed to create more new roles? Answer  n \n  (press the  n  key).   And now, you can create the database:  1 createdb pybossa -O pybossa   Finally, exit the postgresql user:  1 exit    Then, populate the database with its tables:  1 python cli.py db_create   Run the web server: 1 python run.py   Open in your web browser the following URL:  http://localhost:5000  And if you see the following home page, then, your installation has been\ncompleted:", 
            "title": "Configuring the DataBase"
        }, 
        {
            "location": "/installation/guide/#updating-pybossa", 
            "text": "PYBOSSA v2.9.0 starts using JSONB data type format within the PostgreSQL database. The upgrade should not break anything,\nbut be aware that all the materalized views will need to be dropped. This is required because some of these views use\nthe info field and we cannot migrate to JSONB without recreating them.  Thus, be sure to take a full backup before upgrading of your database. Then, delete all your materialized views that create a conflict (by default\nPYBOSSA handles the basic ones, but if you have created your own leaderboards, this will not be handled by the script).  Run the migration (see next section) and re-create your materialized views. Most of these views are automatically handled by the background\njobs, so all of them should be recreated by the system without your intervention.", 
            "title": "Updating PYBOSSA"
        }, 
        {
            "location": "/installation/guide/#updating-pybossa-core-and-migrating-the-database-table-structure", 
            "text": "Sometimes, the PYBOSSA developers add a new column or table to the PYBOSSA server, forcing you to carry out a  migration  of the\ndatabase. PYBOSSA uses  Alembic  for performing the migrations, so in case that your production server needs to upgrade the DB structure to a new version, all you have to do is to: 1\n2\n3\n4 git pull origin master\npip install -U pip\npip install -U -r requirements.txt\nalembic upgrade head   The first command will get you the latest source code. The second command updates the libraries. Finally, Alembic upgrades the database structure.  Very occasionally, updates to the core system will also be required. For example, updating  pybossa.js  in your PYBOSSA theme. To update the default theme, you can do this:  1\n2 cd  home/pybossa/pybossa/themes/default\ngit pull origin master    Note  If you are using the  virtualenv  be sure to activate it before running the  Alembic  upgrade command.", 
            "title": "Updating PYBOSSA core and migrating the database table structure"
        }, 
        {
            "location": "/installation/guide/#migrating-your-old-db-records", 
            "text": "In versions before v0.2.3, the default supported option for the  long_description  field in projects was HTML. In new versions of PYBOSSA, the default option is Markdown. However, you can use HTML instead of Markdown by modifying the default PYBOSSA theme or using your own forked from the default one.  If you were have been using PYBOSSA for a while you might have projects in your database whose  long_description  is in HTML format. Hence, if you are using the default theme for PYBOSSA, you will no longer see them rendered as HTML and may have some issues.  To avoid this, you can run a simple script to convert all the\nDB project s  long_description  field from HTML to Markdown, just by\nrunning the following commands:  1\n2\n3 pip install -U pip\npip install -U -r requirements.txt\npython cli.py markdown_db_migrate   The first command will install a Python package that will handle the\nHTML to Markdown conversion, while the second one will convert your DB\nentries.   Note  As always, if you are using the  virtualenv  be sure to activate it before running the pip install command.    Note  The latest version of PYBOSSA requires PostgreSQL  = 9.3 as it is using materialized views for the dashboard. This feature is only available from PostgreSQL 9.3, so please upgrade the DB as soon as possible. For more information about upgrading the PostgreSQL database check this  page .", 
            "title": "Migrating Your Old DB Records"
        }, 
        {
            "location": "/installation/configuration/", 
            "text": "Configuring PYBOSSA\n\n\nThe PYBOSSA \nsettings_local.py.tmpl\n file has all the available configuration options for your server. This section, explains each of them and how you should/could use them on your server.\n\n\nOfficial support\n\n\nIf you need help configuring your PYBOSSA server, \ncontact us\n.\nWe offer official support and we would love to work with your PYBOSSA server.\n\n\nDebug mode\n\n\nThe \nDEBUG\n mode is disabled by default in the configuration file, as this should be only used when you are running the server for development purposes. You should not enable this option unless you need to do some debugging in the PYBOSSA server.\n\n\nDebug Toolbar\n\n\nPYBOSSA includes a flag to enable a debug toolbar that can give you more insights about the performance of PYBOSSA. We strongly recommend keeping the toolbar disabled in production environments, as it will slow down considerably all the execution of the code. However, if you are testing the server, feel free to enable it adding the following variable to the settings file:\n\n\n1\nENABLE_DEBUG_TOOLBAR\n \n=\n \nTrue\n\n\n\n\n\n\n\nProfiling\n\n\nPYBOSSA installs \nFlask-Profiler\n, an extension that allows you to know which endpoints are being called, and how much time it\ntakes for them to process each request. You can enable it by setting this config variable in the settings_local.py file:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nFLASK_PROFILER\n \n=\n \n{\n\n    \nenabled\n:\n \nTrue\n,\n\n    \nstorage\n:\n \n{\n\n        \nengine\n:\n \nsqlite\n\n    \n},\n\n    \nbasicAuth\n:{\n\n        \nenabled\n:\n \nTrue\n,\n\n        \nusername\n:\n \nadmin\n,\n\n        \npassword\n:\n \nadmin\n\n    \n},\n\n    \nignore\n:\n \n[\n\n        \n^/static/.*\n\n    \n]\n\n\n}\n\n\n\n\n\n\n\nNow you can access the profiling page: http://server/flask-profiler/.\n\n\n\n\nWarning\n\n\nBe sure to use a strong password to protect this view as well as HTTPS.\n\n\n\n\nHost and Port\n\n\nThe \nHOST\n and \nPORT\n config variables can be used to force the server to listen on specific addresses of your server, as well as at a given port. Usually, you will only need to uncomment the \nHOST\n variable to listen on all the network interfaces.\n\n\nSecuring the server\n\n\nPYBOSSA uses the \nFlask Sessions\n feature that signs the cookies cryptographically for storing information. This improves the security of the server, as the user could look at the contents of the cookie but not modify it, unless they know the \nSECRET\n and \nSECRET_KEY\n.\n\n\nTherefore, \nit is essential that you create a new SECRET and\nSECRET_KEY keys for your server and keep them private\n. Please, check the \nFlask Sessions\n documentation for instructions on how to create proper secret keys.\n\n\nEnsuring Anonymous IPs\n\n\nPYBOSSA uses CryptoPAn to anoymize the user\ns IPs when they participate as anonymous users. This is a feature that\ns mandatory, and you will have to create\na KEY for it, specially this one:\n\n\n1\nCRYPTOPAN_KEY\n \n=\n \n32-char-str-for-AES-key-and-pad.\n\n\n\n\n\n\n\n\n\nWarning\n\n\nBe sure to use a strong key to protect your user IPs.\n\n\n\n\nDatabase username and password\n\n\nPYBOSSA uses the \nSQLAlchemy\n SQL toolkit to access the DB. In the settings file, you only need to modify the name of the user, password and database name, so it fits your needs in the field SQLALCHEMY_DATABASE_URI:\n\n\n1\nSQLALCHEMY_DATABASE_URI\n \n=\n \npostgresql://username:userpassword@localhost/databasename\n\n\n\n\n\n\n\nLoad balancing SQL Queries\n\n\nIf you have a master/slave PostgreSQL setup, you can instruct PYBOSSA to use the slave node for load balancing queries between the master and slave node.\n\n\nFor enabling this mode, all you have to do is adding to the\nsettings_local.py config file the following:\n\n\n1\n2\n3\nSQLALCHEMY_BINDS\n \n=\n \n{\n\n    \nslave\n:\n \npostgresql://user:password@server/pybossadb\n\n\n}\n\n\n\n\n\n\n\nIt\ns dangerous, so better sign this\n\n\nPYBOSSA uses the \nIt\ns dangerous Python library\n that allows you to send some data to untrusted environments but signing it. It uses a key that the server only knows and uses it for signing the data.\n\n\nThis library is used to send the recovery password e-mails to your\nPYBOSSA users, posting a link with a signed key that will be verified by the server. Thus, \nit is vital that you create a secure and private key for it in your configuration file\n. To do it, just modify the \nITSDANGEROUSKEY\n variable.\n\n\nCORS configuration\n\n\nBy default, PYBOSSA has the API endpoints configured with \nAccess-Control-Allow-Origin:\n*. However, you can change it to whatever you want via the config file. Take a look at the official documentation for \nFlask-CORS\n for all the available options.\n\n\nFine tuning CORS\n\n\nYou can fine tune the CORS of PYBOSSA:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nCORS_RESOURCES\n \n=\n \n{\n\n    \nr\n/api/*\n:\n\n        \n{\n\n            \norigins\n:\n \n*\n,\n\n            \nallow_headers\n:\n\n                \n[\n\n                \nContent-Type\n,\n\n                \nAuthorization\n\n                \n],\n\n            \nmax_age\n:\n \n21600\n\n        \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nNote\n\n\nYou can customize as much as you want CORS. Check the \nofficial documentation\n.\n\n\n\n\nModifying the Brand name\n\n\nYou can configure your project with a different name, instead of the\ndefault one: PYBOSSA. You only need to change the string \nBRAND\n to the name of your organization or project.\n\n\nAdding a Logo\n\n\nBy default, PYBOSSA does not provide a logo for the server side, so you will have to copy your logo into the folder: \npybossa/pybossa/static/img\n. If the logo name is, \nmy_brand.png\n, the \nLOGO\n variable should be updated with the name of the file.\n\n\nMultiple languages\n\n\nBy default PYBOSSA only speaks English. However, the default theme comes with a few translations (Spanish, French, Italian, Japanese, Greek and German).\n\n\nYou can enable those translations (mostly user interface strings and\nactions) by doing the following: creating a symlink to the translations folders:\n\n\n1\n$ \ncd\n pybossa \n ln -s themes/default/translations\n\n\n\n\n\n\nThis step will enable the default translations of PYBOSSA for your server. We recommend using these translations with the default theme. If you use your theme, the best thing is to do your translation, (see \ntranslating\n), as you might want to name things differently on the templates.\n\n\nYou can disable/enable different languages in your config file\n\nsettings_local.py\n. For example, to remove French you can add this configuration to the settings file:\n\n\n1\n2\nLOCALES\n \n=\n \n[(\nen\n,\n \nEnglish\n),\n \n(\nes\n,\n \nu\nEspa\u00f1ol\n),\n\n           \n(\nit\n,\n \nItaliano\n),\n \n(\nja\n,\n \nu\n\u65e5\u672c\u8a9e\n)]\n\n\n\n\n\n\n\nAlso, you can always specify a different default locale using the\nfollowing snippet in the same settings file:\n\n\n1\nDEFAULT_LOCALE\n \n=\n \nes\n\n\n\n\n\n\n\n\n\nNote\n\n\nPYBOSSA tries first to match the user preferred language from their browser. This will work for anonymous users, while registered ones can specify the language they want using their user preferences.\n\n\n\n\n\n\nNote\n\n\nAs an alternative way to allow anonymous users to \nforce\n a different language, PYBOSSA looks for a cookie named \nlanguage\n where it expects the key of any of the supported languages in the LOCALES list. You can use JavaScript to set it up.\n\n\n\n\nCreating a theme\n\n\nPYBOSSA supports themes. By default, it provides its theme that you can use, or if you prefer, you can adapt it to create yours. The default theme for PYBOSSA is available in the \npybossa-default-theme repository\n.\n\n\nTo create your theme, all you have to do is to fork the default\ntheme to your account, and then start modifying it. A theme has a simple structure:\n\n\n\n\ninfo.json: this file includes some information about the author,\n    license, and name.\n\n\nstatic: this folder has all the CSS, JavaScript, images, etc. In\n    other words, the static content.\n\n\ntemplates: this folder has the templates for PYBOSSA.\n\n\n\n\nTherefore, if you want to change the look and feel (i.e., colors of the\ntop bar) all you have to do is to modify the styles.css file of the\nstatic folder. Or if you prefer, create your own.\n\n\nHowever, if you want to modify the structure, let\ns say you want to\nchange the order of the elements of the navigation bar: the first item should be the about link, then you will have to modify the files included in the templates folder.\n\n\nAs you can see, you will be able to give a full personality to your own PYBOSSA server without problems.\n\n\nUsing SASS and minifying JavaScript\n\n\nPYBOSSA supports SASS thanks to Flask-Assets. If you want to compile SASS or SCSS, just add to your theme static folder a new one named: sass. Then, you can request the compiled version from the templates like this:\n\n\n1\n2\n3\n4\n{% assets filters=\nlibsass\n, output=\ncss/gen/yourcss.min.css\n,\n          \nsass/yourcss.scss\n%}\n    \nlink\n \nrel\n=\nstylesheet\n \ntype\n=\ntext/css\n \nhref\n=\n{{ ASSET_URL }}\n\n{% endassets %}\n\n\n\n\n\n\nThe same can be done for Javascript using the filter minjs:\n\n\n1\n2\n3\n4\n{% assets filters=\njsmin\n, output=\ngen/packed.js\n,\n          \ncommon/jquery.js\n, \nsite/base.js\n, \nsite/widgets.js\n %}\n    \nscript\n \ntype\n=\ntext/javascript\n \nsrc\n=\n{{ ASSET_URL }}\n/\nscript\n\n{% endassets %}\n\n\n\n\n\n\nResults page\n\n\nPYBOSSA allows you to present a results page for your server. Add a file named results.html to the home directory in the templates folder, and you\nll be able to show results about your project from one place:\n\n\n1\n \nhttp://server/results\n\n\n\n\n\n\n\nAdding your Contact Information\n\n\nBy default, PYBOSSA provides e-mail, and a Twitter handle to show some contact information. If you want, you can change it to your e-mail and Twitter account. You can do it, modifying the following variables in the \nsettings_local.py\n file:\n\n\n1\n2\nCONTACT_EMAIL\n \n=\n \nyour@email.com\n\n\nCONTACT_TWITTER\n \n=\n \nyourtwitterhandle\n\n\n\n\n\n\n\nTerms of Use\n\n\nYou can change and modify the \nTERMSOFUSE\n for your server, by overriding the provided URL that we use by default.\nYou can also modify the license used for the data, just change the\nDATAUSE link to the open license that you want to use.\n\n\nAdding Help page\n\n\nBy default, PYBOSSA provides a help endpoint where you can have your FAQ or similar information for your users. However, it\ns empty, as each project is unique. For adding that information, create in the theme folder: templates/help/ a file named \nindex.html\n and write your information in there. This will render the information under \nhttp://youserver.com/help/\n\n\n\n\nNote\n\n\nPYBOSSA has dropped support for Social Network logins. If you were using social logins in your project, please, before upgrading double-check that your social login users have added their emails. With their emails you can run the cli.py script to migrate the accounts to local ones. This will delete all their info regarding their social login IDs and make them local accounts. Then the users will be able to request a reset password and log in.\n\n\n\n\nReceiving e-mails with errors\n\n\nIf you want to receive an e-mail when an error occurs in the PYBOSSA server (webhooks, background jobs, etc.), uncomment the\n\nADMINS\n config variable and add a list of e-mails.\n\n\nBackground jobs error notifications\n\n\nYou can change the default behavior for receiving emails regarding failed background jobs. The two config variables are the following:\n\n\n1\n2\nFAILED_JOBS_MAILS\n \n=\n \n7\n\n\nFAILED_JOBS_RETRIES\n \n=\n \n3\n\n\n\n\n\n\n\nFAILED_JOBS_MAILS instructs the system to send you a reminder after seven days if you have not solved the issue with the background job.\n\n\nFAILED_JOBS_RETRIES instructs the system to retry the job N times. By default is 3.\n\n\nEnabling Logging\n\n\nPYBOSSA can log errors to a \nfile\n or to a \nSentry\n server. If none of the above configurations are used, you will get the errors in the log file of the web server that you are using (i.e., in nginx the errors will be in /var/log/nginx/error.log).\n\n\nMail Setup\n\n\nPYBOSSA needs a mail server to validate new accounts, send\ne-mails for recovering passwords, etc. , so it is critical that you\nconfigure a server. Please, check the section \nMail setup\n in the config file for setting it.\n\n\nGlobal Announcements for the users\n\n\nSometimes you will need to send a message to all your users while they are browsing the server. For example, a scheduled shutdown for installing new hardware or a database migration.\n\n\nPYBOSSA provides a general solution for these announcements via the \nsettings_local.py.tmpl\n configuration file. The announcement feature allows you to send messages to the following type of users:\n\n\n\n\nAuthenticated users\n, basically all the registered users in the\n    server.\n\n\nAdmin users\n, all the users that are admins/root on the server.\n\n\nProject owners\n, all the users that have created one or more projects on the server.\n\n\n\n\nTherefore, let\ns say that you want to warn all your admins that a new configuration will be deployed in your system. In this case, all you have to do is to modify the \nANNOUNCEMENT\n variable to display the message for the given type of users:\n\n\n1\nANNOUNCEMENT\n \n=\n \n{\nroot\n:\n \nYour secret message\n}\n\n\n\n\n\n\n\nThere is an example of the \nANNOUNCEMENT\n variable in the\n\nsettings_local.py.tmpl\n file, so you can quickly adapt it for your server. The announcement variable has a \nkey\n and an associated \nmessage*\n. The supported keys are:\n\n\n\n\nadmin\n: for admin users.\n\n\nuser\n: for all the registered users (even admins).\n\n\nowner\n: for all registered users that have one or more projects.\n\n\n\n\n\n\nNote\n\n\nYou can use a mix of messages at the same time without problems, so, for example, you can display a message for Admins and Owners at the same time.\n\n\n\n\nDisable email notifications\n\n\nWhen a PYBOSSA project publishes a blog post, users will get an email (and webpush notification if it is enabled) with the update.\n\n\nYou can disable this behavior with the following flag:\n\n\n1\nDISABLE_EMAIL_NOTIFICATIONS\n \n=\n \nTrue\n\n\n\n\n\n\n\nCache\n\n\nBy default PYBOSSA uses Redis to cache a lot of data in order to serve it as fast as possible. PYBOSSA comes with a default set of timeouts for different views that you can change or modify to your own taste. All you have to do is modify the following variables in your settings file:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n# Project cache\n\n\nAPP_TIMEOUT\n \n=\n \n15\n \n*\n \n60\n\n\nREGISTERED_USERS_TIMEOUT\n \n=\n \n15\n \n*\n \n60\n\n\nANON_USERS_TIMEOUT\n \n=\n \n5\n \n*\n \n60\n \n*\n \n60\n\n\nSTATS_FRONTPAGE_TIMEOUT\n \n=\n \n12\n \n*\n \n60\n \n*\n \n60\n\n\nSTATS_APP_TIMEOUT\n \n=\n \n12\n \n*\n \n60\n \n*\n \n60\n\n\nSTATS_DRAFT_TIMEOUT\n \n=\n \n24\n \n*\n \n60\n \n*\n \n60\n\n\nN_APPS_PER_CATEGORY_TIMEOUT\n \n=\n \n60\n \n*\n \n60\n\n\nBROWSE_TASKS_TIMEOUT\n \n=\n \n3\n \n*\n \n60\n \n*\n \n60\n\n\n# Category cache\n\n\nCATEGORY_TIMEOUT\n \n=\n \n24\n \n*\n \n60\n \n*\n \n60\n\n\n# User cache\n\n\nUSER_TIMEOUT\n \n=\n \n15\n \n*\n \n60\n\n\nUSER_TOP_TIMEOUT\n \n=\n \n24\n \n*\n \n60\n \n*\n \n60\n\n\nUSER_TOTAL_TIMEOUT\n \n=\n \n24\n \n*\n \n60\n \n*\n \n60\n\n\n\n\n\n\n\n\n\nNote\n\n\nEvery value is in seconds, so bear in mind to multiply it by 60 to have minutes in the configuration values.\n\n\n\n\nDisabling the Cache\n\n\nIf you want to disable the cache, you only have to export the following env variable:\n\n\n1\nPYBOSSA_REDIS_CACHE_DISABLED\n=\n1\n\n\n\n\n\n\n\nRedis configuration\n\n\nYou can configure how you connect to Redis via the following config variables.\nIf you can\nt use Redis Sentinel, just set \nREDIS_SENTINEL\n to \n[]\n and use\n\nREDIS_HOST\n, \nREDIS_PORT\n and \nREDIS_PASSWORD\n instead to specify the\nconnection details for a vanilla Redis server.\n\n\nRedis python prefix\n\n\n1\nREDIS_KEYPREFIX\n \n=\n \npybossa_cache\n\n\n\n\n\n\n\nRedis Sentinel\n\n\nSpecify where the Redis sentinel is listening.\n\n\n1\nREDIS_SENTINEL\n \n=\n \n[(\nlocalhost\n,\n \n26379\n)]\n\n\n\n\n\n\n\nRedis host\n\n\nSpecify the host where the non-Sentinel Redis server is listening.\nThis option, along with \nREDIS_PORT\n and \nREDIS_PASSWORD\n, will be ignored if\n\nREDIS_SENTINEL\n is set.\n\n\n1\nREDIS_HOST\n \n=\n \nlocalhost\n\n\n\n\n\n\n\nRedis port\n\n\nSpecify the port where the non-Sentinel Redis server is listening.\nThis option, along with \nREDIS_HOST\n and \nREDIS_PASSWORD\n, will be ignored if\n\nREDIS_SENTINEL\n is set.\n\n\n1\nREDIS_PORT\n \n=\n \n6379\n\n\n\n\n\n\n\nRedis password\n\n\nSpecify the password of the non-Sentinel Redis server.\nThis option, along with \nREDIS_HOST\n and \nREDIS_PORT\n, will be ignored if\n\nREDIS_SENTINEL\n is set.\n\n\n1\nREDIS_PASSWORD\n \n=\n \n53cr37\n\n\n\n\n\n\n\nRedis master\n\n\nSpecify the name of the master node.\n\n\n1\nREDIS_MASTER\n \n=\n \nmymaster\n\n\n\n\n\n\n\nRedis DB\n\n\nSpecify the DB.\n\n\n1\nREDIS_DB\n \n=\n \n0\n\n\n\n\n\n\n\nRedis Socket timeout\n\n\n1\nREDIS_SOCKET_TIMEOUT\n \n=\n \n0.1\n\n\n\n\n\n\n\nRedis retry on timeout\n\n\n1\nREDIS_RETRY_ON_TIMEOUT\n \n=\n \nTrue\n\n\n\n\n\n\n\nRate limit for the API\n\n\nBy default, PYBOSSA limits the usage of the API with the following\nvalues:\n\n\n1\n2\nLIMIT\n \n=\n \n300\n\n\nPER\n \n=\n \n15\n \n*\n \n60\n\n\n\n\n\n\n\nThose values mean that when a user sends a request to an API endpoint, a window of 15 minutes is open, and during those 15 minutes the number of allowed requests to the same endpoint is 300. By adding these values to your settings_local.py file, you can adapt it to your own needs.\n\n\n\n\nNote\n\n\nPlease, be sure about what you are doing by modifying these values. This is the recommended configuration, so do not change it unless you are sure.\n\n\n\n\nConfiguring upload method\n\n\nPYBOSSA by default allows you to upload avatars for users, icons for\nprojects, etc. using the local file system of your server. While this is\nnice for small setups, when you need to add more nodes to serve the same content, this feature could become a problem. For this reason, PYBOSSA also supports cloud solutions to save the files and serve them from there correctly.\n\n\nLocal Uploader\n\n\nThe local uploader is configured by default. We recommend having a separate folder for the assets, outside the pybossa folder. In any case, for enabling this method use the following the config settings:\n\n\n1\n2\nUPLOAD_METHOD\n \n=\n \nlocal\n\n\nUPLOAD_FOLDER\n \n=\n \n/absolute/path/to/your/folder/to/store/assets/\n\n\n\n\n\n\n\nRackspace Cloud Files\n\n\nPYBOSSA comes with support for Rackspace CloudFiles service, allowing you to grow the services horizontally. Supporting cloud-based system is as simple as having an account in Rackspace, and setting up the following config variables:\n\n\n1\n2\n3\n4\nUPLOAD_METHOD\n \n=\n \nrackspace\n\n\nRACKSPACE_USERNAME\n \n=\n \nusername\n\n\nRACKSPACE_API_KEY\n \n=\n \napi_key\n\n\nRACKSPACE_REGION\n \n=\n \nregion\n\n\n\n\n\n\n\nOnce the server is started, it will authenticate against Rackspace and\nsince that moment, your PYBOSSA server will save files in the cloud.\n\n\nCustomizing the Layout and FrontPage text\n\n\nPYBOSSA allows you to override two items:\n- \nFront Page Text\n\n- \nFooter\n\n\nIf you want to override those items, you have to create a folder named \ncustom\n and place it in the \ntemplate\n dir. Then for replacing:\n\n\n\n\nThe Front Page Text\n: create a file named.\n  \nfront_page_text.html\n and write there some HTML.\n\n\nThe Footer\n: create a file named \n_footer.html\n, and write\n  some HTML.\n\n\n\n\nTracking the server with Google Analytics\n\n\nPYBOSSA provides an easy way to integrate Google Analytics with your PYBOSSA server. To enable it you only have to create a file with the name: \n_ga.html\n in the \npybossa/template\n folder with the Google Tracking code. PYBOSSA will be including your Google Analytics tracking code on every page since that moment.\n\n\nThe file \n_ga.html\n should contain something like this:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nscript\n \ntype\n=\ntext/javascript\n\n  \nvar\n \n_gaq\n \n=\n \n_gaq\n \n||\n \n[];\n\n  \n_gaq\n.\npush\n([\n_setAccount\n,\n \nUA-XXXXXXXX-X\n]);\n\n  \n_gaq\n.\npush\n([\n_trackPageview\n]);\n\n\n  \n(\nfunction\n()\n \n{\n\n    \nvar\n \nga\n \n=\n \ndocument\n.\ncreateElement\n(\nscript\n);\n \nga\n.\ntype\n \n=\n \ntext/javascript\n;\n \nga\n.\nasync\n \n=\n \ntrue\n;\n\n    \nga\n.\nsrc\n \n=\n \n(\nhttps:\n \n==\n \ndocument\n.\nlocation\n.\nprotocol\n \n?\n \nhttps://ssl\n \n:\n \nhttp://www\n)\n \n+\n \n.google-analytics.com/ga.js\n;\n\n    \nvar\n \ns\n \n=\n \ndocument\n.\ngetElementsByTagName\n(\nscript\n)[\n0\n];\n \ns\n.\nparentNode\n.\ninsertBefore\n(\nga\n,\n \ns\n);\n\n  \n})();\n\n\n/script\n\n\n\n\n\n\n\nAdding a Search box: Google Custom Search\n\n\nPYBOSSA provides a simple way to search within the server pages: Google Custom Search. To enable it you will have to apply for a Google Custom Search API key and then follow the next steps:\n\n\n\n\nCopy the Google Custom Search \nscript\n code\n\n\nCreate a new file called \n_gcs.html\n in the templates folder\n\n\nPaste the previous snippet of code (be sure to delete the\n  \n; line from it.\n\n\nCopy the \n_gcs_form.html.template\n as \n_gcs_form.html\n and\n  add your key in the input field \ncx\n (you will find a text like\n  XXXXX:YYYY where you should paste your key).\n\n\n\n\nThe \n_gcs.html\n file will have something like this:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nscript\n\n  \n(\nfunction\n()\n \n{\n\n    \nvar\n \ncx\n \n=\n \nXXXXX:YYYY\n;\n\n    \nvar\n \ngcse\n \n=\n \ndocument\n.\ncreateElement\n(\nscript\n);\n \ngcse\n.\ntype\n \n=\n \ntext/javascript\n;\n \ngcse\n.\nasync\n \n=\n \ntrue\n;\n\n    \ngcse\n.\nsrc\n \n=\n \n(\ndocument\n.\nlocation\n.\nprotocol\n \n==\n \nhttps:\n \n?\n \nhttps:\n \n:\n \nhttp:\n)\n \n+\n\n        \n//www.google.com/cse/cse.js?cx=\n \n+\n \ncx\n;\n\n    \nvar\n \ns\n \n=\n \ndocument\n.\ngetElementsByTagName\n(\nscript\n)[\n0\n];\n \ns\n.\nparentNode\n.\ninsertBefore\n(\ngcse\n,\n \ns\n);\n\n  \n})();\n\n\n/\nscript\n\n\n\n\n\n\n\nAnd the \n_gcs_form.html\n will be like this:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n    \nform\n \nclass\n=\nnavbar-form\n \nstyle\n=\npadding-top:20px;\n \naction\n=\n/search\n\n          \ninput\n \ntype\n=\nhidden\n \nname\n=\ncx\n \nvalue\n=\npartner-pub-XXXXX:YYYYY\n/\n\n          \ninput\n \ntype\n=\nhidden\n \nname\n=\ncof\n \nvalue\n=\nFORID:10\n \n/\n\n          \ninput\n \ntype\n=\nhidden\n \nname\n=\nie\n \nvalue\n=\nISO-8859-1\n \n/\n\n          \ndiv\n \nclass\n=\ninput-append\n\n          \ninput\n \ntype\n=\ntext\n \nname\n=\nq\n \nsize\n=\n21\n \nclass\n=\ninput-small\n \nplaceholder\n=\nSearch\n  \n/\n\n          \nspan\n \nclass\n=\nadd-on\ni\n \nclass\n=\nicon-search\n \nstyle\n=\ncolor:black\n/\ni\n/\nspan\n\n          \n/\ndiv\n\n    \n/\nform\n\n\n\n\n\n\n\nAfter these steps, your site will be indexed by Google, and Google Custom Search will be working, providing for your users a search tool.\n\n\nAdding web maps for project statistics (deprecated since v2.9.5)\n\n\n\n\nNote\n\n\nPYBOSSA does not support this feature anymore since version v2.9.5 as now\nit anonymizes the IPs (following GDPR EU law), so these maps don\nt make sense anymore.\nFor more info, check the \nGDPR\n section.\n\n\n\n\nPYBOSSA creates for each project a statistics page, where the creators of the project and the volunteers can check the top 5 anonymous and authenticated users, an estimation of time about when all the tasks will be completed, etc.\n\n\nOne exciting feature of the statistics page is that it can generate a\nweb map showing the location of the anonymous volunteers that have been participating in the project. By default, the maps are disabled, because you will need to download the GeoLiteCity DAT file database that will be used for generating the maps.\n\n\nGeoLite\n is a free geolocalisation database from MaxMind that they release under a\n\nCreative Commons Attribution-ShareAlike 3.0 Uported\nLicense\n. You can\ndownload the required file: GeoLite City from this \npage\n.\nOnce you have downloaded the file, all you have to do is to uncompress it and place it in the folder \ndat\n of the pybossa root folder.\n\n\nAfter copying the file, all you have to do to start creating the maps is\nto restart the server.\n\n\nUsing your Terms of Use\n\n\nPYBOSSA has a default Terms of Service page that you can customize it to fit your institutional needs. In the case that you do not want to use the default one, please, create a \n_tos.html\n file in the \ncustom\n folder. You can re-use the template  \nhelp/_tos.html\n and adapt it (it is located in the \ntemplate/help\n folder.\n\n\nUsing your Cookies Policy\n\n\nPYBOSSA has a default cookies policy page, but you can customize it to fit your institutional needs. In the case that you do not want to use the default one, please, create a \n_cookies_policy.html\n file in the \ncustom\n folder. You can re-use the template \nhelp/_cookies_policy.html\n and adapt it (it is located in the\n\ntemplate/help\n folder.\n\n\nUsing your Privacy Policy\n\n\nPYBOSSA has a blank privacy policy page. We recommend you to add one, so your users know how you are using their data. To add it, just create a file named \n_privacy_policy.html\n file in the \ncustom\n folder.\n\n\nExporting data to a CKAN server\n\n\nCKAN\n is a powerful data management system that makes data accessible \u2013 by providing tools to streamline publishing, sharing, finding and using data. \nCKAN\n is aimed at data publishers (national and regional governments, companies and\norganizations) wanting to make their data open and available.\n\n\nPYBOSSA can export project\ns data to a \nCKAN\n server. To use this feature, you will need to add the following config variables to the settings_local.py file:\n\n\n1\n2\n3\n# CKAN URL for API calls\n\n\nCKAN_NAME\n \n=\n \nDemo CKAN server\n\n\nCKAN_URL\n \n=\n \nhttp://demo.ckan.org\n}\n\n\n\n\n\n\n\nAs \nCKAN\n is open source, you can install your own\n\nCKAN\n server and configure it to host the data generated by your PYBOSSA projects quite quickly, making it the data repository for your projects. Another alternative is to use the \nthe\nData hub\n service that it is a free CKAN service for hosting your data.\n\n\nEnforce Privacy mode\n\n\nSome projects sometimes need a way to protect their contributors due to their nature. In these cases, where privacy is critical, PYBOSSA allows you to \nlock\n all the public pages related to the users and statistics about the site and projects. Specifically,\nby enabling this mode, only administrators will be able to see the\nfollowing pages:\n\n\n\n\nhttp://server/stats\n\n\nhttp://server/account/\n\n\nhttp://server/account/user/\n\n\nhttp://server/project/stats\n\n\n\n\nAnonymous and authenticated will see a warning message like this:\n\n\n\n\nAdditionally, the footer and front page top users will be removed with links to all these pages. If your project needs this type of protection you can enable it by changing the following config variable in your \nsettings_local.py\n file from:\n\n\n1\nENFORCE_PRIVACY\n \n=\n \nFalse\n\n\n\n\n\n\n\nTo:\n\n\n1\nENFORCE_PRIVACY\n \n=\n \nTrue\n\n\n\n\n\n\n\n\n\nNote\n\n\nThis feature is disabled by default.\n\n\n\n\nMaking extra key/value pairs in info field public\n\n\nBy default, PYBOSSA protects all the information the info field except for those values that are public like the URL of the image of the project, the container where that picture is stored and a few extra. While this will be more than enough for most projects, sometimes, a server will need to expose more information publicly via the info field for the User and Project Domain Objects.\n\n\nImagine that you want to give badges to users. You can store that\ninformation in the User domain object, within the info field in a field\nnamed \nbadges\n. While this will work, the API will hide all that\ninformation except for the owner. Thus, it will be impossible to show\nuser\ns badges to anonymous people.\n\n\nWith projects, it could be the same. You want to highlight some info to anyone, but hide everything else.\n\n\nAs PYBOSSA hides everything by default, you can always turn on which other fields from the info field can be shown to anonymous users, making them public.\n\n\n\n\nWarning\n\n\nBe very careful. If you expose your private data via this field, it\ns your responsibility as this is disabled by default in PYBOSSA.\n\n\n\n\nIf you want to make some key/values public, all you have to do is add them to the settings_local.py file the following config variables:\n\n\n1\n2\n3\nPROJECT_INFO_PUBLIC_FIELDS\n \n=\n \n[\nkey1\n,\n \nkey2\n]\n\n\nUSER_INFO_PUBLIC_FIELDS\n \n=\n \n[\nbadges\n,\n \nkey2\n,\n \n...\n]\n\n\nCATEGORY_INFO_PUBLIC_FIELDS\n \n=\n \n[\nkey1\n,\n \nkey2\n]\n\n\n\n\n\n\n\nAdd as many as you want/need. But please, be careful about which information you disclose.\n\n\nAdding custom project templates\n\n\nPYBOSSA supports different types of templates that you can offer for\nevery project. By default, PYBOSSA comes with the following templates:\n\n\n\n\nBasic\n: the most basic template. It only has the necessary structure to develop your project.\n\n\nImage\n: this template is for image pattern recognition.\n\n\nSound\n: similar to the image template, but for sound clips\n  hosted on SoundCloud.\n\n\nVideo\n: similar to the image template, but for video clips\n  hosted on Vimeo or Youtube.\n\n\nMap\n: this template is for geocoding projects.\n\n\nPDF\n: this template is for transcribing documents.\n\n\n\n\nIf you want to add your templates or remove one, just create in the\nsettings_local.py file a variable named \nPRESENTERS\n and add remove the ones you want:\n\n\n1\nPRESENTERS\n \n=\n \n[\nbasic\n,\n \nimage\n,\n \nsound\n,\n \nvideo\n,\n \nmap\n,\n \npdf\n,\n \nyourtemplate\n]\n\n\n\n\n\n\n\nyourtemplate\n should be a template that you have to save in the theme folder: \n/templates/projects/snippets/\n with the same name. Check the other templates to use them as a base layer for your template.\n\n\nAfter adding the template, the server will start offering this new template to your users.\n\n\nIn addition to the project templates themselves, you can add some test tasks for those projects so that the users can import them into their projects and start \nplaying\n with them or taking their format as a starting point to create their own. These tasks can be imported from Google Docs spreadsheets, and you can add them, remove them, or modify the URLs of the spreadsheets changing the value of the variable \nTEMPLATE_TASKS\n in settings_local.py:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nTEMPLATE_TASKS\n \n=\n \n{\n\n    \nimage\n:\n\n    \nhttps://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdHFEN29mZUF0czJWMUhIejF6dWZXdkE\nusp=sharing\n,\n\n    \nsound\n:\n\n    \nhttps://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdEczcWduOXRUb1JUc1VGMmJtc2xXaXc\nusp=sharing\n,\n\n    \nvideo\n:\n\n    \nhttps://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdGZ2UGhxSTJjQl9YNVhfUVhGRUdoRWc\nusp=sharing\n,\n\n    \nmap\n:\n\n    \nhttps://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdGZnbjdwcnhKRVNlN1dGXy0tTnNWWXc\nusp=sharing\n,\n\n    \npdf\n:\n\n    \nhttps://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdEVVamc0R0hrcjlGdXRaUXlqRXlJMEE\nusp=sharing\n}\n\n\n\n\n\n\n\nSetting an expiration time for project passwords\n\n\nPYBOSSA allows the owner of a project to set a password so that only people (both anonymous or authenticated) that know it can contribute. By entering this password, the user will have access to the project for a time specified by:\n\n\n1\nPASSWD_COOKIE_TIMEOUT\n \n=\n \n60\n \n*\n \n30\n\n\n\n\n\nThis variable is configured by default to 30 minutes.\n\n\nValidation of new user accounts\n\n\nWhenever a new user wants to sign up, PYBOSSA allows you to add some extra security steps to the process by asking the users to validate a real email account.\n\n\nHowever, if you don\nt need this feature, it can be disabled (as it is enabled by default) with this configuration parameter:\n\n\n1\nACCOUNT_CONFIRMATION_DISABLED\n \n=\n \nTrue\n\n\n\n\n\n\n\nTwo-factor authentication on login\n\n\nIf you need an extra layer of security for user authentication, PYBOSSA allows you to enable two-factor authentication by setting this configuration value:\n\n\n1\nENABLE_TWO_FACTOR_AUTH\n \n=\n \nTrue\n\n\n\n\n\n\n\nWith this parameter set, after password verification users will receive a one-time code in their email, and will be redirected to a page where they can insert the code to complete the login process.\n\n\nSending weekly email stats to project owners\n\n\nProject owners that have the pro-flag set to True can receive every week an update with the latest statistics about their projects in their email box.\n\n\nBy default, this email is sent every Sunday. You can modify it in the\nsettings file by changing it to another day:\n\n\n1\nWEEKLY_UPDATE_STATS\n \n=\n \nTuesday\n\n\n\n\n\n\n\n\n\nNote\n\n\nFor the moment the only way to toggle the pro-flag is via the database. It will be fixed in the future.\n\n\n\n\nNewsletters with Mailchimp\n\n\nPYBOSSA can show a subscription page to users when they create an\naccount. By default is disabled.  You can enable it, revealing a page to recently registered users, to check if they want to subscribe or not.\n\n\nTo support newsletters, you\nll have to create an account in Mailchimp and get an API_KEY as well as a LIST_ID to add the users.\n\n\nOnce you have those two items you can enable the newsletter subscription adding them to your settings_local.py file:\n\n\n1\n2\nMAILCHIMP_API_KEY\n \n=\n \nyour-key\n\n\nMAILCHIMP_LIST_ID\n \n=\n \nyour-list-id\n\n\n\n\n\n\n\nRestart the server, and you will be done. Now in your MailChimp account, you will be able to create campaigns and communicate with your registered and interested users.\n\n\nEnabling the Dropbox Task importer\n\n\nPYBOSSA also offers the Dropbox importer, which allows importing all kind of files from a Dropbox account directly. To use it,\nyou\nll need to register your PYBOSSA server as a Dropbox app, as\nexplained \nhere\n.\n\n\nDon\nt worry about the Javascript snippet part; we\nve already handled that for you. Instead, get the App key you will be given and add it to\nyour settings_local.py:\n\n\n1\nDROPBOX_APP_KEY\n \n=\n \nyour-key\n\n\n\n\n\n\n\nEnabling the Youtube\ns Task importer\n\n\nThe Youtube\ns task importer needs a Youtube server key which you need to create in the \nGoogle API Console\n in YouTube Data API.\n\n\nOnce you have an API key, you\nll have to add it to your\nsettings_local.py file:\n\n\n1\nYOUTUBE_API_SERVER_KEY\n \n=\n \nyour-key\n\n\n\n\n\n\n\nFor more information on how to get a Youtube server key, please refer to \nthe official documentation\n.\n\n\nEnabling Server-Sent Events\n\n\nSince PYBOSSA v1.1.0, PYBOSSA supports Server-Sent Events (SSE) in some views. This feature is powerful. However, it brings some issues with it: it needs to run PYBOSSA in asynchronous mode.\n\n\nAs this is not a necessity, by default PYBOSSA has this feature\ndisabled. PYBOSSA uses SSE to notify users about specific actions (i.e., the result of a webhook in real time).\n\n\nIf you want to enable it, you will have to add to your settings_local.py:\n\n\n1\nSSE\n \n=\n \nTrue\n\n\n\n\n\n\n\nAlso, you will need to configure uwsgi and nginx to support SSE events. This is not trivial, as there are several different scenarios, libraries, and options, so instead of recommending one solution, we invite you to read the \nuwsgi documentation about it\n, so you can take a decision based on your infrastructure and preferences.\n\n\nLatest news from PYBOSSA\n\n\nSince v1.2.1 PYBOSSA gets the latest news of its new releases, as well as anything related to what Scifabric blogs about regarding the crowdsourcing world. You can add more items if you want, by just adding to your settings_local.py file new ATOM URLs:\n\n\n1\nNEWS_URL\n \n=\n \n[\nhttp:/http:///atomurl1\n,\n \nhttp://atomurl2\n,\n \n...\n]\n\n\n\n\n\n\n\nEnabling pro user features\n\n\nSince version v1.2.2 PYBOSSA, you can specify which features can be only available to pro users or everyone. To modify them, just locate them in the settings_local.py file. By default, they look\nlike:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nPRO_FEATURES\n \n=\n \n{\n\n    \nauditlog\n:\n              \nTrue\n,\n\n    \nwebhooks\n:\n              \nTrue\n,\n\n    \nupdated_exports\n:\n       \nTrue\n,\n\n    \nnotify_blog_updates\n:\n   \nTrue\n,\n\n    \nproject_weekly_report\n:\n \nTrue\n,\n\n    \nautoimporter\n:\n          \nTrue\n,\n\n    \nbetter_stats\n:\n          \nTrue\n\n\n}\n\n\n\n\n\n\n\nBy choosing \nTrue\n on each of them, you are making that specific feature available only to pro users. On the other hand, selecting \nFalse\n makes them available to regular users as well.\n\n\nStrict Slashes\n\n\nBy default, PYBOSSA distinguishes between two types of URLs for its\nendpoints: with and without a trailing slash. In other words, if an endpoint is not declared within the code as accepting both options,\naccessing the same endpoint with a trailing slash will return a 404.\n\n\nFor example, the about endpoint:\n\n\n1\nGET /about\n\n\n\n\n\n\n\nWill return the page, but with the default configuration it will return\na 404 if you add a trailing slash to it:\n\n\n1\nGET /about/\n\n\n\n\n\n\n\nTo disable this behavior, enable the STRICT_SLASHES option and set it to False. That option will ensure that both endpoints work with and without the trailing slash.\n\n\nForums\n\n\nPYBOSSA does not provide its own forum. However, you can use Disqus and integrate it in your PYBOSSA server.\n\n\nDisqus Single Sign-On (SSO)\n\n\nPYBOSSA supports Disqus SSO. However, it is disabled by default. You need to register a Disqus application (see their \ndocumentation\n) and then update your settings_local.py file with the following two keys:\n\n\n1\n2\nDISQUS_SECRET_KEY\n \n=\n \nsecret\n\n\nDISQUS_PUBLIC_KEY\n \n=\n \npublickey\n\n\n\n\n\n\n\nThen, this will enable you to use a new Jinja2 filter for  authenticating PYBOSSA users directly in their Disqus server. The filter is \ndisqus_sso\n. You can use it like this:\n\n\n1\n2\n3\n4\n5\n{%\n \nif\n \ncurrent_user.is_authenticated\n()\n \n%}\n\n\n{{\n \ncurrent_user\n \n|\n \ndisqus_sso\n \n|\n \nsafe\n \n}}\n\n\n{%\n \nelse\n \n%}\n\n\n{{\n \nNone\n \n|\n \ndisqus_sso\n \n|\n \nsafe\n \n}}\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\n\nAlso, if you are building a Single Page Application, you can use our API endpoint: \napi/disqus/sso\n to get the credentials and authenticate the users within your javascript. Check the \nendpoint information Disqus-API\n.\n\n\nBackground jobs timeout\n\n\nBy default PYBOSSA timeout for every job is 10 minutes. In principle, it should be fine, but each project and server is unique, so if you start\nseeing too many jobs failing because the job timed out, then, increase the value using these config variables:\n\n\n1\n2\nMINUTE\n \n=\n \n60\n\n\nTIMEOUT\n \n=\n \n20\n \n*\n \n60\n\n\n\n\n\n\n\nWeb Push notifications\n\n\n\n\nNote\n\n\nYou need to have HTTPS enabled for your site. Otherwise, you will need to use a subdomain from onesignal.com to support this feature. If you cannot use HTTPS, we recommend to disable it.\n\n\n\n\nPYBOSSA can send web push notifications to Google Chrome, Mozilla\nFirefox and Safari browsers.\n\n\nFor supporting this feature, PYBOSSA uses the Onesignal.com service. You will need an account and create an app for your PYBOSSA server. Then follow their documentation to download the WebPush SDK and configure your PYBOSSA theme.\n\n\nFor more info regarding Onesignal, check their \ndocumentation.\n\n\n\n\nNote\n\n\nYou can host the SDK files in the static folder of your theme. However, you will need to modify your web server (Apache or Nginx) to serve those files as from the root of your server. If this is not done correctly, it will not work.\n\n\n\n\nOnce you have created the app in Onesignal, get the API KEY and APP ID. Then copy them and put it in your settings_local.py file:\n\n\n1\n2\nONESIGNAL_APP_ID\n \n=\n \napp-id\n\n\nONESIGNAL_API_KEY\n \n=\n \napp-key\n\n\n\n\n\n\n\nRestart the server, and add one background worker for the \nwebpush\n queue. This queue will handle the creation of the apps, as well as sending the push notifications.\n\n\nThen you will need to update your PYBOSSA theme to allow your\nusers to subscribe. As this could vary a lot from one project to\nanother, we do not provide a template but some guidelines:\n\n\n\n\nUse the JS SDK to subscribe a user to a given project using the\n  \ntags\n option of Onesignal.\n\n\nPYBOSSA sends notifications using those tags thanks to the   \nfilters\n option that allows us to segment traffic. PYBOSSA is\n  expecting the project.id as the tag key for segmenting.\n\n\nThe JS SDK allows you to subscribe/unsubscribe a user to a given project (not only the whole server) with unique methods for adding tags and deleting them. This works independently if the user is authenticated or not.\n\n\n\n\nFor more info regarding Onesignal JS SDK, check their \ndocumentation.\n\n\nIgnore specific keys when exporting data in CSV format\n\n\nSometimes your PYBOSSA project saves information like GeoJSON within the tasks or task_runs. This is a bad thing for the exporter, as it will try to flatten it. In such scenarios, you want to instruct PYBOSSA to ignore those keys, as they will be included in the JSON export files, and reduce all the overhead (as well as destroying the format due to the normalization).\n\n\nFor ignoring a key (or a list of keys), just add the following config\nvariable to your settings_local.py file:\n\n\n1\nIGNORE_FLAT_KEYS\n \n=\n \n[\n \ngeojson\n,\n \nkey1\n,\n \n...\n]\n\n\n\n\n\n\n\nSpecify a new root key instead of info for CSV exporter\n\n\nSometimes you need to change the root key for the CSV exporter. This usually happens, when you have to store one ore more answers within the same info object. For this reason, you can instruct PYBOSSA to use that key instead of \ninfo\n for flattening the data:\n\n\n1\n2\n3\nTASK_CSV_EXPORT_INFO_KEY\n \n=\n \nkey\n\n\nTASK_RUN_CSV_EXPORT_INFO_KEY\n \n=\n \nkey2\n\n\nRESULT_CSV_EXPORT_INFO_KEY\n \n=\n \nkey3\n\n\n\n\n\n\n\nIn this way, if key, key2 or key3 have an array or list of dictionaries, PYBOSSA will iterate over them, flat them, and then generate the CSV for you.\n\n\nDisable task presenter check for pure JavaScript apps\n\n\nWhen you are using PYBOSSA native JSON support, you will not be building your project presenter within the PYBOSSA structure, but within the JS framework of your choice.\n\n\nIn such a case, you would like to disable the check for the task_presenter when publishing a project. If you need this, just add\nthis flag to your settings_local.py file:\n\n\n1\nDISABLE_TASK_PRESENTER\n \n=\n \nTrue\n\n\n\n\n\n\n\nConsent field for users\n\n\nSometimes you will need the users to click on a checkbox before\ncreating an account to get the agreement for sending them email\nnotifications or of any other type. By default, PYBOSSA provides this\nflag, and it\ns set to False.\n\n\nChange in the theme (or your frontend) the label of the field to\nwhatever you prefer: Terms of Service, Communications, etc. so you will be able to keep track of who has accepted/declined to get notifications from you.\n\n\nCustom Leaderboards\n\n\nBy default, PYBOSSA provides a unique leaderboard. This leaderboard is based on the number of task runs that a user has submitted. However, you may want more flexibility. For this reason, you can use use the \nuser\n.info field to store any other \nbadges\n or values that you want to score your users.\n\n\nIf your users have identified very complicated stuff, and you want to\ngive points to them based on that, just use the info field and instruct\nPYBOSSA to create a leaderboard for you.\n\n\n\n\nNote\n\n\nIt is essential that this key, projectsvalue pair is computed by you. You can use the API to update these values, so this will not be handled by PYBOSSA but by yourself.\n\n\n\n\nImagine the score is named: foo, then, PYBOSSA will create for you a leaderboard using that key like this: edit the settings_local.py file\nand add the following config variable:\n\n\n1\nLEADERBOARDS\n \n=\n \n[\nfoo\n]\n\n\n\n\n\n\n\nThen, you can access the specific leaderboard using the endpoint:\n/leaderboard/?info=foo\n\n\nAs simple as that.\n\n\n\n\nNote\n\n\nThis feature relies on background jobs. Be sure that you are running them.\n\n\n\n\nDefault number of users for the leaderboard\n\n\nYou can specify the default number of users shown in the leaderboard. By default we show the top 20 users.\n\n\n1\nLEADERBOARD = 20\n\n\n\n\n\n\nUnpublish inactive projects\n\n\nPYBOSSA by default unpublishes projects that have not been active in the last three months. You can disable this feature by changing this config variable in your settings_local.py file:\n\n\n1\nUNPUBLISH_PROJECTS\n \n=\n \nFalse\n\n\n\n\n\n\n\nLDAP integration\n\n\nPYBOSSA can use LDAP for authenticating users. You will need to add a few config variables to the settings_local.py file to\nmake it work.\n\n\nPYBOSSA supports LDAP and OpenLDAP protocols, so you should be able to use any of them.\n\n\n\n\nNote\n\n\nBy enabling PYBOSSA LDAP integration, all other means for creating accounts and sign in will be disabled.\n\n\n\n\nLDAP_HOST\n\n\nThis variable should have the IP or domain name of your LDAP server.\n\n\nLDAP_BASE_DN\n\n\nThis is the LDAP Base DN for your organization.\n\n\nLDAP_USERNAME\n\n\nThis variable should have the admin account so that PYBOSSA can access the LDAP server and search for users.\n\n\nLDAP_PASSWORD\n\n\nThe admin account password.\n\n\nLDAP_OBJECTS_DN\n\n\nThe DN.\n\n\nLDAP_OPENLDAP\n\n\nSet it to True if you are using it.\n\n\nLDAP_USER_OBJECT_FILTER\n\n\nThis is important. The filter that you write in here needs to be\nadapted to your institution, otherwise, it will not work when\nauthenticating and validating your users.\n\n\nDon\nt use the default configuration in the settings template. You will\nneed to adapt it to your needs.\n\n\nLDAP_USER_FILTER_FIELD\n\n\nIf you use a different field in the previous configuration, update the\nLDAP_USER_FILTER_FIELD. It\ns important to reflect which key are you using within your LDAP server to identify your users uniquely.\n\n\nLDAP_PYBOSSA_FIELDS\n\n\nUse this configuration variable to match/link PYBOSSA fields to LDAP fields.\n\n\nUploading files to PYBOSSA\n\n\nPYBOSSA has a generic uploader that will check for valid extensions, avoiding for example that a user could upload a video, as only\nimages are allowed.\n\n\nALLOWED_EXTENSIONS\n\n\nUse this configuration variable, to specify which types of files will you allow in your server to be uploaded via the API. By default, the following extensions\nare enabled:\n\n\n1\nALLOWED_EXTENSIONS\n \n=\n \n[\njs\n,\n \ncss\n,\n \npng\n,\n \njpg\n,\n \njpeg\n,\n \ngif\n,\n \nzip\n]\n\n\n\n\n\n\n\nSPAM protection\n\n\nYou can blacklist disposable email accounts by listing them in the SPAM config. Just add them like this:\n\n\n1\nSPAM\n \n=\n \n[\nspam.com\n,\n \nfake.es\n]\n\n\n\n\n\n\n\nFailed Jobs\n\n\nSometimes background jobs fail. For example, an email is rejected. By default\nPYBOSSA retries 3 times, before marking them as failed. You can customize it.\n\n\n1\nFAILED_JOBS_RETRIES\n \n=\n \n3\n\n\n\n\n\n\n\nFulltext search language\n\n\nPYBOSSA uses PostgreSQL fulltex search support. Thus, you can instruct PYBOSSA\nto use only a given language to do it properly:\n\n\n1\nFULLTEXTSEARCH_LANGUAGE\n \n=\n \nenglish\n\n\n\n\n\n\n\nAbsolute links to Avatars\n\n\nIf you are building a Single Page Application or a Universal App, you will need to\nget absolute paths to the avatars. Use the following config:\n\n\n1\nAVATAR_ABSOLUTE\n \n=\n \nTrue\n\n\n\n\n\n\n\nDelete inactive accounts\n\n\nPYBOSSA will delete inactive accounts after a period of time. For this purpose,\nPYBOSSA uses two different background jobs, one for warning users about the\naction, and another one to delete them.\n\n\nThe warning job is run on a monthly basis, while the deletion is done on a\nbi-monthly basis.\n\n\nYou can customize the the time period that you consider to warn users as well as\nto delete them. For these purposes you can use the following two variables:\n\n\n1\n2\nUSER_INACTIVE_NOTIFICATION\n \n=\n \n5\n\n\nUSER_DELETE_AFTER_NOTIFICATION\n \n=\n \n1 month\n\n\n\n\n\n\n\nThus, after 5 months of not contributing a single task run, the user will get an\nemail warning her about the deletion. Then, the next month if the user has not\nsent a task run, the account will be deleted.\n\n\nFor deleting the accounts, PYBOSSA uses the the same method as if the user\nrequested it herself. The action anonymizes the user\ns contributions, and\ndeletes all her personal data.\n\n\n\n\nNote\n\n\nPYBOSSA will not delete users with the restrict flag set to true (to respect\nGDPR) as well as if they have projects.", 
            "title": "Configuring PYBOSSA"
        }, 
        {
            "location": "/installation/configuration/#configuring-pybossa", 
            "text": "The PYBOSSA  settings_local.py.tmpl  file has all the available configuration options for your server. This section, explains each of them and how you should/could use them on your server.", 
            "title": "Configuring PYBOSSA"
        }, 
        {
            "location": "/installation/configuration/#official-support", 
            "text": "If you need help configuring your PYBOSSA server,  contact us .\nWe offer official support and we would love to work with your PYBOSSA server.", 
            "title": "Official support"
        }, 
        {
            "location": "/installation/configuration/#debug-mode", 
            "text": "The  DEBUG  mode is disabled by default in the configuration file, as this should be only used when you are running the server for development purposes. You should not enable this option unless you need to do some debugging in the PYBOSSA server.", 
            "title": "Debug mode"
        }, 
        {
            "location": "/installation/configuration/#debug-toolbar", 
            "text": "PYBOSSA includes a flag to enable a debug toolbar that can give you more insights about the performance of PYBOSSA. We strongly recommend keeping the toolbar disabled in production environments, as it will slow down considerably all the execution of the code. However, if you are testing the server, feel free to enable it adding the following variable to the settings file:  1 ENABLE_DEBUG_TOOLBAR   =   True", 
            "title": "Debug Toolbar"
        }, 
        {
            "location": "/installation/configuration/#profiling", 
            "text": "PYBOSSA installs  Flask-Profiler , an extension that allows you to know which endpoints are being called, and how much time it\ntakes for them to process each request. You can enable it by setting this config variable in the settings_local.py file:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 FLASK_PROFILER   =   { \n     enabled :   True , \n     storage :   { \n         engine :   sqlite \n     }, \n     basicAuth :{ \n         enabled :   True , \n         username :   admin , \n         password :   admin \n     }, \n     ignore :   [ \n         ^/static/.* \n     ]  }    Now you can access the profiling page: http://server/flask-profiler/.   Warning  Be sure to use a strong password to protect this view as well as HTTPS.", 
            "title": "Profiling"
        }, 
        {
            "location": "/installation/configuration/#host-and-port", 
            "text": "The  HOST  and  PORT  config variables can be used to force the server to listen on specific addresses of your server, as well as at a given port. Usually, you will only need to uncomment the  HOST  variable to listen on all the network interfaces.", 
            "title": "Host and Port"
        }, 
        {
            "location": "/installation/configuration/#securing-the-server", 
            "text": "PYBOSSA uses the  Flask Sessions  feature that signs the cookies cryptographically for storing information. This improves the security of the server, as the user could look at the contents of the cookie but not modify it, unless they know the  SECRET  and  SECRET_KEY .  Therefore,  it is essential that you create a new SECRET and\nSECRET_KEY keys for your server and keep them private . Please, check the  Flask Sessions  documentation for instructions on how to create proper secret keys.", 
            "title": "Securing the server"
        }, 
        {
            "location": "/installation/configuration/#ensuring-anonymous-ips", 
            "text": "PYBOSSA uses CryptoPAn to anoymize the user s IPs when they participate as anonymous users. This is a feature that s mandatory, and you will have to create\na KEY for it, specially this one:  1 CRYPTOPAN_KEY   =   32-char-str-for-AES-key-and-pad.     Warning  Be sure to use a strong key to protect your user IPs.", 
            "title": "Ensuring Anonymous IPs"
        }, 
        {
            "location": "/installation/configuration/#database-username-and-password", 
            "text": "PYBOSSA uses the  SQLAlchemy  SQL toolkit to access the DB. In the settings file, you only need to modify the name of the user, password and database name, so it fits your needs in the field SQLALCHEMY_DATABASE_URI:  1 SQLALCHEMY_DATABASE_URI   =   postgresql://username:userpassword@localhost/databasename", 
            "title": "Database username and password"
        }, 
        {
            "location": "/installation/configuration/#load-balancing-sql-queries", 
            "text": "If you have a master/slave PostgreSQL setup, you can instruct PYBOSSA to use the slave node for load balancing queries between the master and slave node.  For enabling this mode, all you have to do is adding to the\nsettings_local.py config file the following:  1\n2\n3 SQLALCHEMY_BINDS   =   { \n     slave :   postgresql://user:password@server/pybossadb  }", 
            "title": "Load balancing SQL Queries"
        }, 
        {
            "location": "/installation/configuration/#its-dangerous-so-better-sign-this", 
            "text": "PYBOSSA uses the  It s dangerous Python library  that allows you to send some data to untrusted environments but signing it. It uses a key that the server only knows and uses it for signing the data.  This library is used to send the recovery password e-mails to your\nPYBOSSA users, posting a link with a signed key that will be verified by the server. Thus,  it is vital that you create a secure and private key for it in your configuration file . To do it, just modify the  ITSDANGEROUSKEY  variable.", 
            "title": "It's dangerous, so better sign this"
        }, 
        {
            "location": "/installation/configuration/#cors-configuration", 
            "text": "By default, PYBOSSA has the API endpoints configured with  Access-Control-Allow-Origin: *. However, you can change it to whatever you want via the config file. Take a look at the official documentation for  Flask-CORS  for all the available options.", 
            "title": "CORS configuration"
        }, 
        {
            "location": "/installation/configuration/#fine-tuning-cors", 
            "text": "You can fine tune the CORS of PYBOSSA:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 CORS_RESOURCES   =   { \n     r /api/* : \n         { \n             origins :   * , \n             allow_headers : \n                 [ \n                 Content-Type , \n                 Authorization \n                 ], \n             max_age :   21600 \n         }  }     Note  You can customize as much as you want CORS. Check the  official documentation .", 
            "title": "Fine tuning CORS"
        }, 
        {
            "location": "/installation/configuration/#modifying-the-brand-name", 
            "text": "You can configure your project with a different name, instead of the\ndefault one: PYBOSSA. You only need to change the string  BRAND  to the name of your organization or project.", 
            "title": "Modifying the Brand name"
        }, 
        {
            "location": "/installation/configuration/#adding-a-logo", 
            "text": "By default, PYBOSSA does not provide a logo for the server side, so you will have to copy your logo into the folder:  pybossa/pybossa/static/img . If the logo name is,  my_brand.png , the  LOGO  variable should be updated with the name of the file.", 
            "title": "Adding a Logo"
        }, 
        {
            "location": "/installation/configuration/#multiple-languages", 
            "text": "By default PYBOSSA only speaks English. However, the default theme comes with a few translations (Spanish, French, Italian, Japanese, Greek and German).  You can enable those translations (mostly user interface strings and\nactions) by doing the following: creating a symlink to the translations folders:  1 $  cd  pybossa   ln -s themes/default/translations   This step will enable the default translations of PYBOSSA for your server. We recommend using these translations with the default theme. If you use your theme, the best thing is to do your translation, (see  translating ), as you might want to name things differently on the templates.  You can disable/enable different languages in your config file settings_local.py . For example, to remove French you can add this configuration to the settings file:  1\n2 LOCALES   =   [( en ,   English ),   ( es ,   u Espa\u00f1ol ), \n            ( it ,   Italiano ),   ( ja ,   u \u65e5\u672c\u8a9e )]    Also, you can always specify a different default locale using the\nfollowing snippet in the same settings file:  1 DEFAULT_LOCALE   =   es     Note  PYBOSSA tries first to match the user preferred language from their browser. This will work for anonymous users, while registered ones can specify the language they want using their user preferences.    Note  As an alternative way to allow anonymous users to  force  a different language, PYBOSSA looks for a cookie named  language  where it expects the key of any of the supported languages in the LOCALES list. You can use JavaScript to set it up.", 
            "title": "Multiple languages"
        }, 
        {
            "location": "/installation/configuration/#creating-a-theme", 
            "text": "PYBOSSA supports themes. By default, it provides its theme that you can use, or if you prefer, you can adapt it to create yours. The default theme for PYBOSSA is available in the  pybossa-default-theme repository .  To create your theme, all you have to do is to fork the default\ntheme to your account, and then start modifying it. A theme has a simple structure:   info.json: this file includes some information about the author,\n    license, and name.  static: this folder has all the CSS, JavaScript, images, etc. In\n    other words, the static content.  templates: this folder has the templates for PYBOSSA.   Therefore, if you want to change the look and feel (i.e., colors of the\ntop bar) all you have to do is to modify the styles.css file of the\nstatic folder. Or if you prefer, create your own.  However, if you want to modify the structure, let s say you want to\nchange the order of the elements of the navigation bar: the first item should be the about link, then you will have to modify the files included in the templates folder.  As you can see, you will be able to give a full personality to your own PYBOSSA server without problems.", 
            "title": "Creating a theme"
        }, 
        {
            "location": "/installation/configuration/#using-sass-and-minifying-javascript", 
            "text": "PYBOSSA supports SASS thanks to Flask-Assets. If you want to compile SASS or SCSS, just add to your theme static folder a new one named: sass. Then, you can request the compiled version from the templates like this:  1\n2\n3\n4 {% assets filters= libsass , output= css/gen/yourcss.min.css ,\n           sass/yourcss.scss %}\n     link   rel = stylesheet   type = text/css   href = {{ ASSET_URL }} \n{% endassets %}   The same can be done for Javascript using the filter minjs:  1\n2\n3\n4 {% assets filters= jsmin , output= gen/packed.js ,\n           common/jquery.js ,  site/base.js ,  site/widgets.js  %}\n     script   type = text/javascript   src = {{ ASSET_URL }} / script \n{% endassets %}", 
            "title": "Using SASS and minifying JavaScript"
        }, 
        {
            "location": "/installation/configuration/#results-page", 
            "text": "PYBOSSA allows you to present a results page for your server. Add a file named results.html to the home directory in the templates folder, and you ll be able to show results about your project from one place:  1   http://server/results", 
            "title": "Results page"
        }, 
        {
            "location": "/installation/configuration/#adding-your-contact-information", 
            "text": "By default, PYBOSSA provides e-mail, and a Twitter handle to show some contact information. If you want, you can change it to your e-mail and Twitter account. You can do it, modifying the following variables in the  settings_local.py  file:  1\n2 CONTACT_EMAIL   =   your@email.com  CONTACT_TWITTER   =   yourtwitterhandle", 
            "title": "Adding your Contact Information"
        }, 
        {
            "location": "/installation/configuration/#terms-of-use", 
            "text": "You can change and modify the  TERMSOFUSE  for your server, by overriding the provided URL that we use by default.\nYou can also modify the license used for the data, just change the\nDATAUSE link to the open license that you want to use.", 
            "title": "Terms of Use"
        }, 
        {
            "location": "/installation/configuration/#adding-help-page", 
            "text": "By default, PYBOSSA provides a help endpoint where you can have your FAQ or similar information for your users. However, it s empty, as each project is unique. For adding that information, create in the theme folder: templates/help/ a file named  index.html  and write your information in there. This will render the information under  http://youserver.com/help/   Note  PYBOSSA has dropped support for Social Network logins. If you were using social logins in your project, please, before upgrading double-check that your social login users have added their emails. With their emails you can run the cli.py script to migrate the accounts to local ones. This will delete all their info regarding their social login IDs and make them local accounts. Then the users will be able to request a reset password and log in.", 
            "title": "Adding Help page"
        }, 
        {
            "location": "/installation/configuration/#receiving-e-mails-with-errors", 
            "text": "If you want to receive an e-mail when an error occurs in the PYBOSSA server (webhooks, background jobs, etc.), uncomment the ADMINS  config variable and add a list of e-mails.", 
            "title": "Receiving e-mails with errors"
        }, 
        {
            "location": "/installation/configuration/#background-jobs-error-notifications", 
            "text": "You can change the default behavior for receiving emails regarding failed background jobs. The two config variables are the following:  1\n2 FAILED_JOBS_MAILS   =   7  FAILED_JOBS_RETRIES   =   3    FAILED_JOBS_MAILS instructs the system to send you a reminder after seven days if you have not solved the issue with the background job.  FAILED_JOBS_RETRIES instructs the system to retry the job N times. By default is 3.", 
            "title": "Background jobs error notifications"
        }, 
        {
            "location": "/installation/configuration/#enabling-logging", 
            "text": "PYBOSSA can log errors to a  file  or to a  Sentry  server. If none of the above configurations are used, you will get the errors in the log file of the web server that you are using (i.e., in nginx the errors will be in /var/log/nginx/error.log).", 
            "title": "Enabling Logging"
        }, 
        {
            "location": "/installation/configuration/#mail-setup", 
            "text": "PYBOSSA needs a mail server to validate new accounts, send\ne-mails for recovering passwords, etc. , so it is critical that you\nconfigure a server. Please, check the section  Mail setup  in the config file for setting it.", 
            "title": "Mail Setup"
        }, 
        {
            "location": "/installation/configuration/#global-announcements-for-the-users", 
            "text": "Sometimes you will need to send a message to all your users while they are browsing the server. For example, a scheduled shutdown for installing new hardware or a database migration.  PYBOSSA provides a general solution for these announcements via the  settings_local.py.tmpl  configuration file. The announcement feature allows you to send messages to the following type of users:   Authenticated users , basically all the registered users in the\n    server.  Admin users , all the users that are admins/root on the server.  Project owners , all the users that have created one or more projects on the server.   Therefore, let s say that you want to warn all your admins that a new configuration will be deployed in your system. In this case, all you have to do is to modify the  ANNOUNCEMENT  variable to display the message for the given type of users:  1 ANNOUNCEMENT   =   { root :   Your secret message }    There is an example of the  ANNOUNCEMENT  variable in the settings_local.py.tmpl  file, so you can quickly adapt it for your server. The announcement variable has a  key  and an associated  message* . The supported keys are:   admin : for admin users.  user : for all the registered users (even admins).  owner : for all registered users that have one or more projects.    Note  You can use a mix of messages at the same time without problems, so, for example, you can display a message for Admins and Owners at the same time.", 
            "title": "Global Announcements for the users"
        }, 
        {
            "location": "/installation/configuration/#disable-email-notifications", 
            "text": "When a PYBOSSA project publishes a blog post, users will get an email (and webpush notification if it is enabled) with the update.  You can disable this behavior with the following flag:  1 DISABLE_EMAIL_NOTIFICATIONS   =   True", 
            "title": "Disable email notifications"
        }, 
        {
            "location": "/installation/configuration/#cache", 
            "text": "By default PYBOSSA uses Redis to cache a lot of data in order to serve it as fast as possible. PYBOSSA comes with a default set of timeouts for different views that you can change or modify to your own taste. All you have to do is modify the following variables in your settings file:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 # Project cache  APP_TIMEOUT   =   15   *   60  REGISTERED_USERS_TIMEOUT   =   15   *   60  ANON_USERS_TIMEOUT   =   5   *   60   *   60  STATS_FRONTPAGE_TIMEOUT   =   12   *   60   *   60  STATS_APP_TIMEOUT   =   12   *   60   *   60  STATS_DRAFT_TIMEOUT   =   24   *   60   *   60  N_APPS_PER_CATEGORY_TIMEOUT   =   60   *   60  BROWSE_TASKS_TIMEOUT   =   3   *   60   *   60  # Category cache  CATEGORY_TIMEOUT   =   24   *   60   *   60  # User cache  USER_TIMEOUT   =   15   *   60  USER_TOP_TIMEOUT   =   24   *   60   *   60  USER_TOTAL_TIMEOUT   =   24   *   60   *   60     Note  Every value is in seconds, so bear in mind to multiply it by 60 to have minutes in the configuration values.", 
            "title": "Cache"
        }, 
        {
            "location": "/installation/configuration/#disabling-the-cache", 
            "text": "If you want to disable the cache, you only have to export the following env variable:  1 PYBOSSA_REDIS_CACHE_DISABLED = 1", 
            "title": "Disabling the Cache"
        }, 
        {
            "location": "/installation/configuration/#redis-configuration", 
            "text": "You can configure how you connect to Redis via the following config variables.\nIf you can t use Redis Sentinel, just set  REDIS_SENTINEL  to  []  and use REDIS_HOST ,  REDIS_PORT  and  REDIS_PASSWORD  instead to specify the\nconnection details for a vanilla Redis server.", 
            "title": "Redis configuration"
        }, 
        {
            "location": "/installation/configuration/#redis-python-prefix", 
            "text": "1 REDIS_KEYPREFIX   =   pybossa_cache", 
            "title": "Redis python prefix"
        }, 
        {
            "location": "/installation/configuration/#redis-sentinel", 
            "text": "Specify where the Redis sentinel is listening.  1 REDIS_SENTINEL   =   [( localhost ,   26379 )]", 
            "title": "Redis Sentinel"
        }, 
        {
            "location": "/installation/configuration/#redis-host", 
            "text": "Specify the host where the non-Sentinel Redis server is listening.\nThis option, along with  REDIS_PORT  and  REDIS_PASSWORD , will be ignored if REDIS_SENTINEL  is set.  1 REDIS_HOST   =   localhost", 
            "title": "Redis host"
        }, 
        {
            "location": "/installation/configuration/#redis-port", 
            "text": "Specify the port where the non-Sentinel Redis server is listening.\nThis option, along with  REDIS_HOST  and  REDIS_PASSWORD , will be ignored if REDIS_SENTINEL  is set.  1 REDIS_PORT   =   6379", 
            "title": "Redis port"
        }, 
        {
            "location": "/installation/configuration/#redis-password", 
            "text": "Specify the password of the non-Sentinel Redis server.\nThis option, along with  REDIS_HOST  and  REDIS_PORT , will be ignored if REDIS_SENTINEL  is set.  1 REDIS_PASSWORD   =   53cr37", 
            "title": "Redis password"
        }, 
        {
            "location": "/installation/configuration/#redis-master", 
            "text": "Specify the name of the master node.  1 REDIS_MASTER   =   mymaster", 
            "title": "Redis master"
        }, 
        {
            "location": "/installation/configuration/#redis-db", 
            "text": "Specify the DB.  1 REDIS_DB   =   0", 
            "title": "Redis DB"
        }, 
        {
            "location": "/installation/configuration/#redis-socket-timeout", 
            "text": "1 REDIS_SOCKET_TIMEOUT   =   0.1", 
            "title": "Redis Socket timeout"
        }, 
        {
            "location": "/installation/configuration/#redis-retry-on-timeout", 
            "text": "1 REDIS_RETRY_ON_TIMEOUT   =   True", 
            "title": "Redis retry on timeout"
        }, 
        {
            "location": "/installation/configuration/#rate-limit-for-the-api", 
            "text": "By default, PYBOSSA limits the usage of the API with the following\nvalues:  1\n2 LIMIT   =   300  PER   =   15   *   60    Those values mean that when a user sends a request to an API endpoint, a window of 15 minutes is open, and during those 15 minutes the number of allowed requests to the same endpoint is 300. By adding these values to your settings_local.py file, you can adapt it to your own needs.   Note  Please, be sure about what you are doing by modifying these values. This is the recommended configuration, so do not change it unless you are sure.", 
            "title": "Rate limit for the API"
        }, 
        {
            "location": "/installation/configuration/#configuring-upload-method", 
            "text": "PYBOSSA by default allows you to upload avatars for users, icons for\nprojects, etc. using the local file system of your server. While this is\nnice for small setups, when you need to add more nodes to serve the same content, this feature could become a problem. For this reason, PYBOSSA also supports cloud solutions to save the files and serve them from there correctly.", 
            "title": "Configuring upload method"
        }, 
        {
            "location": "/installation/configuration/#local-uploader", 
            "text": "The local uploader is configured by default. We recommend having a separate folder for the assets, outside the pybossa folder. In any case, for enabling this method use the following the config settings:  1\n2 UPLOAD_METHOD   =   local  UPLOAD_FOLDER   =   /absolute/path/to/your/folder/to/store/assets/", 
            "title": "Local Uploader"
        }, 
        {
            "location": "/installation/configuration/#rackspace-cloud-files", 
            "text": "PYBOSSA comes with support for Rackspace CloudFiles service, allowing you to grow the services horizontally. Supporting cloud-based system is as simple as having an account in Rackspace, and setting up the following config variables:  1\n2\n3\n4 UPLOAD_METHOD   =   rackspace  RACKSPACE_USERNAME   =   username  RACKSPACE_API_KEY   =   api_key  RACKSPACE_REGION   =   region    Once the server is started, it will authenticate against Rackspace and\nsince that moment, your PYBOSSA server will save files in the cloud.", 
            "title": "Rackspace Cloud Files"
        }, 
        {
            "location": "/installation/configuration/#customizing-the-layout-and-frontpage-text", 
            "text": "PYBOSSA allows you to override two items:\n-  Front Page Text \n-  Footer  If you want to override those items, you have to create a folder named  custom  and place it in the  template  dir. Then for replacing:   The Front Page Text : create a file named.\n   front_page_text.html  and write there some HTML.  The Footer : create a file named  _footer.html , and write\n  some HTML.", 
            "title": "Customizing the Layout and FrontPage text"
        }, 
        {
            "location": "/installation/configuration/#tracking-the-server-with-google-analytics", 
            "text": "PYBOSSA provides an easy way to integrate Google Analytics with your PYBOSSA server. To enable it you only have to create a file with the name:  _ga.html  in the  pybossa/template  folder with the Google Tracking code. PYBOSSA will be including your Google Analytics tracking code on every page since that moment.  The file  _ga.html  should contain something like this:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 script   type = text/javascript \n   var   _gaq   =   _gaq   ||   []; \n   _gaq . push ([ _setAccount ,   UA-XXXXXXXX-X ]); \n   _gaq . push ([ _trackPageview ]); \n\n   ( function ()   { \n     var   ga   =   document . createElement ( script );   ga . type   =   text/javascript ;   ga . async   =   true ; \n     ga . src   =   ( https:   ==   document . location . protocol   ?   https://ssl   :   http://www )   +   .google-analytics.com/ga.js ; \n     var   s   =   document . getElementsByTagName ( script )[ 0 ];   s . parentNode . insertBefore ( ga ,   s ); \n   })();  /script", 
            "title": "Tracking the server with Google Analytics"
        }, 
        {
            "location": "/installation/configuration/#adding-a-search-box-google-custom-search", 
            "text": "PYBOSSA provides a simple way to search within the server pages: Google Custom Search. To enable it you will have to apply for a Google Custom Search API key and then follow the next steps:   Copy the Google Custom Search  script  code  Create a new file called  _gcs.html  in the templates folder  Paste the previous snippet of code (be sure to delete the\n   ; line from it.  Copy the  _gcs_form.html.template  as  _gcs_form.html  and\n  add your key in the input field  cx  (you will find a text like\n  XXXXX:YYYY where you should paste your key).   The  _gcs.html  file will have something like this:  1\n2\n3\n4\n5\n6\n7\n8\n9 script \n   ( function ()   { \n     var   cx   =   XXXXX:YYYY ; \n     var   gcse   =   document . createElement ( script );   gcse . type   =   text/javascript ;   gcse . async   =   true ; \n     gcse . src   =   ( document . location . protocol   ==   https:   ?   https:   :   http: )   + \n         //www.google.com/cse/cse.js?cx=   +   cx ; \n     var   s   =   document . getElementsByTagName ( script )[ 0 ];   s . parentNode . insertBefore ( gcse ,   s ); \n   })();  / script    And the  _gcs_form.html  will be like this:  1\n2\n3\n4\n5\n6\n7\n8\n9      form   class = navbar-form   style = padding-top:20px;   action = /search \n           input   type = hidden   name = cx   value = partner-pub-XXXXX:YYYYY / \n           input   type = hidden   name = cof   value = FORID:10   / \n           input   type = hidden   name = ie   value = ISO-8859-1   / \n           div   class = input-append \n           input   type = text   name = q   size = 21   class = input-small   placeholder = Search    / \n           span   class = add-on i   class = icon-search   style = color:black / i / span \n           / div \n     / form    After these steps, your site will be indexed by Google, and Google Custom Search will be working, providing for your users a search tool.", 
            "title": "Adding a Search box: Google Custom Search"
        }, 
        {
            "location": "/installation/configuration/#adding-web-maps-for-project-statistics-deprecated-since-v295", 
            "text": "Note  PYBOSSA does not support this feature anymore since version v2.9.5 as now\nit anonymizes the IPs (following GDPR EU law), so these maps don t make sense anymore.\nFor more info, check the  GDPR  section.   PYBOSSA creates for each project a statistics page, where the creators of the project and the volunteers can check the top 5 anonymous and authenticated users, an estimation of time about when all the tasks will be completed, etc.  One exciting feature of the statistics page is that it can generate a\nweb map showing the location of the anonymous volunteers that have been participating in the project. By default, the maps are disabled, because you will need to download the GeoLiteCity DAT file database that will be used for generating the maps.  GeoLite  is a free geolocalisation database from MaxMind that they release under a Creative Commons Attribution-ShareAlike 3.0 Uported\nLicense . You can\ndownload the required file: GeoLite City from this  page .\nOnce you have downloaded the file, all you have to do is to uncompress it and place it in the folder  dat  of the pybossa root folder.  After copying the file, all you have to do to start creating the maps is\nto restart the server.", 
            "title": "Adding web maps for project statistics (deprecated since v2.9.5)"
        }, 
        {
            "location": "/installation/configuration/#using-your-terms-of-use", 
            "text": "PYBOSSA has a default Terms of Service page that you can customize it to fit your institutional needs. In the case that you do not want to use the default one, please, create a  _tos.html  file in the  custom  folder. You can re-use the template   help/_tos.html  and adapt it (it is located in the  template/help  folder.", 
            "title": "Using your Terms of Use"
        }, 
        {
            "location": "/installation/configuration/#using-your-cookies-policy", 
            "text": "PYBOSSA has a default cookies policy page, but you can customize it to fit your institutional needs. In the case that you do not want to use the default one, please, create a  _cookies_policy.html  file in the  custom  folder. You can re-use the template  help/_cookies_policy.html  and adapt it (it is located in the template/help  folder.", 
            "title": "Using your Cookies Policy"
        }, 
        {
            "location": "/installation/configuration/#using-your-privacy-policy", 
            "text": "PYBOSSA has a blank privacy policy page. We recommend you to add one, so your users know how you are using their data. To add it, just create a file named  _privacy_policy.html  file in the  custom  folder.", 
            "title": "Using your Privacy Policy"
        }, 
        {
            "location": "/installation/configuration/#exporting-data-to-a-ckan-server", 
            "text": "CKAN  is a powerful data management system that makes data accessible \u2013 by providing tools to streamline publishing, sharing, finding and using data.  CKAN  is aimed at data publishers (national and regional governments, companies and\norganizations) wanting to make their data open and available.  PYBOSSA can export project s data to a  CKAN  server. To use this feature, you will need to add the following config variables to the settings_local.py file:  1\n2\n3 # CKAN URL for API calls  CKAN_NAME   =   Demo CKAN server  CKAN_URL   =   http://demo.ckan.org }    As  CKAN  is open source, you can install your own CKAN  server and configure it to host the data generated by your PYBOSSA projects quite quickly, making it the data repository for your projects. Another alternative is to use the  the\nData hub  service that it is a free CKAN service for hosting your data.", 
            "title": "Exporting data to a CKAN server"
        }, 
        {
            "location": "/installation/configuration/#enforce-privacy-mode", 
            "text": "Some projects sometimes need a way to protect their contributors due to their nature. In these cases, where privacy is critical, PYBOSSA allows you to  lock  all the public pages related to the users and statistics about the site and projects. Specifically,\nby enabling this mode, only administrators will be able to see the\nfollowing pages:   http://server/stats  http://server/account/  http://server/account/user/  http://server/project/stats   Anonymous and authenticated will see a warning message like this:   Additionally, the footer and front page top users will be removed with links to all these pages. If your project needs this type of protection you can enable it by changing the following config variable in your  settings_local.py  file from:  1 ENFORCE_PRIVACY   =   False    To:  1 ENFORCE_PRIVACY   =   True     Note  This feature is disabled by default.", 
            "title": "Enforce Privacy mode"
        }, 
        {
            "location": "/installation/configuration/#making-extra-keyvalue-pairs-in-info-field-public", 
            "text": "By default, PYBOSSA protects all the information the info field except for those values that are public like the URL of the image of the project, the container where that picture is stored and a few extra. While this will be more than enough for most projects, sometimes, a server will need to expose more information publicly via the info field for the User and Project Domain Objects.  Imagine that you want to give badges to users. You can store that\ninformation in the User domain object, within the info field in a field\nnamed  badges . While this will work, the API will hide all that\ninformation except for the owner. Thus, it will be impossible to show\nuser s badges to anonymous people.  With projects, it could be the same. You want to highlight some info to anyone, but hide everything else.  As PYBOSSA hides everything by default, you can always turn on which other fields from the info field can be shown to anonymous users, making them public.   Warning  Be very careful. If you expose your private data via this field, it s your responsibility as this is disabled by default in PYBOSSA.   If you want to make some key/values public, all you have to do is add them to the settings_local.py file the following config variables:  1\n2\n3 PROJECT_INFO_PUBLIC_FIELDS   =   [ key1 ,   key2 ]  USER_INFO_PUBLIC_FIELDS   =   [ badges ,   key2 ,   ... ]  CATEGORY_INFO_PUBLIC_FIELDS   =   [ key1 ,   key2 ]    Add as many as you want/need. But please, be careful about which information you disclose.", 
            "title": "Making extra key/value pairs in info field public"
        }, 
        {
            "location": "/installation/configuration/#adding-custom-project-templates", 
            "text": "PYBOSSA supports different types of templates that you can offer for\nevery project. By default, PYBOSSA comes with the following templates:   Basic : the most basic template. It only has the necessary structure to develop your project.  Image : this template is for image pattern recognition.  Sound : similar to the image template, but for sound clips\n  hosted on SoundCloud.  Video : similar to the image template, but for video clips\n  hosted on Vimeo or Youtube.  Map : this template is for geocoding projects.  PDF : this template is for transcribing documents.   If you want to add your templates or remove one, just create in the\nsettings_local.py file a variable named  PRESENTERS  and add remove the ones you want:  1 PRESENTERS   =   [ basic ,   image ,   sound ,   video ,   map ,   pdf ,   yourtemplate ]    yourtemplate  should be a template that you have to save in the theme folder:  /templates/projects/snippets/  with the same name. Check the other templates to use them as a base layer for your template.  After adding the template, the server will start offering this new template to your users.  In addition to the project templates themselves, you can add some test tasks for those projects so that the users can import them into their projects and start  playing  with them or taking their format as a starting point to create their own. These tasks can be imported from Google Docs spreadsheets, and you can add them, remove them, or modify the URLs of the spreadsheets changing the value of the variable  TEMPLATE_TASKS  in settings_local.py:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 TEMPLATE_TASKS   =   { \n     image : \n     https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdHFEN29mZUF0czJWMUhIejF6dWZXdkE usp=sharing , \n     sound : \n     https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdEczcWduOXRUb1JUc1VGMmJtc2xXaXc usp=sharing , \n     video : \n     https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdGZ2UGhxSTJjQl9YNVhfUVhGRUdoRWc usp=sharing , \n     map : \n     https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdGZnbjdwcnhKRVNlN1dGXy0tTnNWWXc usp=sharing , \n     pdf : \n     https://docs.google.com/spreadsheet/ccc?key=0AsNlt0WgPAHwdEVVamc0R0hrcjlGdXRaUXlqRXlJMEE usp=sharing }", 
            "title": "Adding custom project templates"
        }, 
        {
            "location": "/installation/configuration/#setting-an-expiration-time-for-project-passwords", 
            "text": "PYBOSSA allows the owner of a project to set a password so that only people (both anonymous or authenticated) that know it can contribute. By entering this password, the user will have access to the project for a time specified by:  1 PASSWD_COOKIE_TIMEOUT   =   60   *   30   \nThis variable is configured by default to 30 minutes.", 
            "title": "Setting an expiration time for project passwords"
        }, 
        {
            "location": "/installation/configuration/#validation-of-new-user-accounts", 
            "text": "Whenever a new user wants to sign up, PYBOSSA allows you to add some extra security steps to the process by asking the users to validate a real email account.  However, if you don t need this feature, it can be disabled (as it is enabled by default) with this configuration parameter:  1 ACCOUNT_CONFIRMATION_DISABLED   =   True", 
            "title": "Validation of new user accounts"
        }, 
        {
            "location": "/installation/configuration/#two-factor-authentication-on-login", 
            "text": "If you need an extra layer of security for user authentication, PYBOSSA allows you to enable two-factor authentication by setting this configuration value:  1 ENABLE_TWO_FACTOR_AUTH   =   True    With this parameter set, after password verification users will receive a one-time code in their email, and will be redirected to a page where they can insert the code to complete the login process.", 
            "title": "Two-factor authentication on login"
        }, 
        {
            "location": "/installation/configuration/#sending-weekly-email-stats-to-project-owners", 
            "text": "Project owners that have the pro-flag set to True can receive every week an update with the latest statistics about their projects in their email box.  By default, this email is sent every Sunday. You can modify it in the\nsettings file by changing it to another day:  1 WEEKLY_UPDATE_STATS   =   Tuesday     Note  For the moment the only way to toggle the pro-flag is via the database. It will be fixed in the future.", 
            "title": "Sending weekly email stats to project owners"
        }, 
        {
            "location": "/installation/configuration/#newsletters-with-mailchimp", 
            "text": "PYBOSSA can show a subscription page to users when they create an\naccount. By default is disabled.  You can enable it, revealing a page to recently registered users, to check if they want to subscribe or not.  To support newsletters, you ll have to create an account in Mailchimp and get an API_KEY as well as a LIST_ID to add the users.  Once you have those two items you can enable the newsletter subscription adding them to your settings_local.py file:  1\n2 MAILCHIMP_API_KEY   =   your-key  MAILCHIMP_LIST_ID   =   your-list-id    Restart the server, and you will be done. Now in your MailChimp account, you will be able to create campaigns and communicate with your registered and interested users.", 
            "title": "Newsletters with Mailchimp"
        }, 
        {
            "location": "/installation/configuration/#enabling-the-dropbox-task-importer", 
            "text": "PYBOSSA also offers the Dropbox importer, which allows importing all kind of files from a Dropbox account directly. To use it,\nyou ll need to register your PYBOSSA server as a Dropbox app, as\nexplained  here .  Don t worry about the Javascript snippet part; we ve already handled that for you. Instead, get the App key you will be given and add it to\nyour settings_local.py:  1 DROPBOX_APP_KEY   =   your-key", 
            "title": "Enabling the Dropbox Task importer"
        }, 
        {
            "location": "/installation/configuration/#enabling-the-youtubes-task-importer", 
            "text": "The Youtube s task importer needs a Youtube server key which you need to create in the  Google API Console  in YouTube Data API.  Once you have an API key, you ll have to add it to your\nsettings_local.py file:  1 YOUTUBE_API_SERVER_KEY   =   your-key    For more information on how to get a Youtube server key, please refer to  the official documentation .", 
            "title": "Enabling the Youtube's Task importer"
        }, 
        {
            "location": "/installation/configuration/#enabling-server-sent-events", 
            "text": "Since PYBOSSA v1.1.0, PYBOSSA supports Server-Sent Events (SSE) in some views. This feature is powerful. However, it brings some issues with it: it needs to run PYBOSSA in asynchronous mode.  As this is not a necessity, by default PYBOSSA has this feature\ndisabled. PYBOSSA uses SSE to notify users about specific actions (i.e., the result of a webhook in real time).  If you want to enable it, you will have to add to your settings_local.py:  1 SSE   =   True    Also, you will need to configure uwsgi and nginx to support SSE events. This is not trivial, as there are several different scenarios, libraries, and options, so instead of recommending one solution, we invite you to read the  uwsgi documentation about it , so you can take a decision based on your infrastructure and preferences.", 
            "title": "Enabling Server-Sent Events"
        }, 
        {
            "location": "/installation/configuration/#latest-news-from-pybossa", 
            "text": "Since v1.2.1 PYBOSSA gets the latest news of its new releases, as well as anything related to what Scifabric blogs about regarding the crowdsourcing world. You can add more items if you want, by just adding to your settings_local.py file new ATOM URLs:  1 NEWS_URL   =   [ http:/http:///atomurl1 ,   http://atomurl2 ,   ... ]", 
            "title": "Latest news from PYBOSSA"
        }, 
        {
            "location": "/installation/configuration/#enabling-pro-user-features", 
            "text": "Since version v1.2.2 PYBOSSA, you can specify which features can be only available to pro users or everyone. To modify them, just locate them in the settings_local.py file. By default, they look\nlike:  1\n2\n3\n4\n5\n6\n7\n8\n9 PRO_FEATURES   =   { \n     auditlog :                True , \n     webhooks :                True , \n     updated_exports :         True , \n     notify_blog_updates :     True , \n     project_weekly_report :   True , \n     autoimporter :            True , \n     better_stats :            True  }    By choosing  True  on each of them, you are making that specific feature available only to pro users. On the other hand, selecting  False  makes them available to regular users as well.", 
            "title": "Enabling pro user features"
        }, 
        {
            "location": "/installation/configuration/#strict-slashes", 
            "text": "By default, PYBOSSA distinguishes between two types of URLs for its\nendpoints: with and without a trailing slash. In other words, if an endpoint is not declared within the code as accepting both options,\naccessing the same endpoint with a trailing slash will return a 404.  For example, the about endpoint:  1 GET /about    Will return the page, but with the default configuration it will return\na 404 if you add a trailing slash to it:  1 GET /about/    To disable this behavior, enable the STRICT_SLASHES option and set it to False. That option will ensure that both endpoints work with and without the trailing slash.", 
            "title": "Strict Slashes"
        }, 
        {
            "location": "/installation/configuration/#forums", 
            "text": "PYBOSSA does not provide its own forum. However, you can use Disqus and integrate it in your PYBOSSA server.", 
            "title": "Forums"
        }, 
        {
            "location": "/installation/configuration/#disqus-single-sign-on-sso", 
            "text": "PYBOSSA supports Disqus SSO. However, it is disabled by default. You need to register a Disqus application (see their  documentation ) and then update your settings_local.py file with the following two keys:  1\n2 DISQUS_SECRET_KEY   =   secret  DISQUS_PUBLIC_KEY   =   publickey    Then, this will enable you to use a new Jinja2 filter for  authenticating PYBOSSA users directly in their Disqus server. The filter is  disqus_sso . You can use it like this:  1\n2\n3\n4\n5 {%   if   current_user.is_authenticated ()   %}  {{   current_user   |   disqus_sso   |   safe   }}  {%   else   %}  {{   None   |   disqus_sso   |   safe   }}  {%   endif   %}    Also, if you are building a Single Page Application, you can use our API endpoint:  api/disqus/sso  to get the credentials and authenticate the users within your javascript. Check the  endpoint information Disqus-API .", 
            "title": "Disqus Single Sign-On (SSO)"
        }, 
        {
            "location": "/installation/configuration/#background-jobs-timeout", 
            "text": "By default PYBOSSA timeout for every job is 10 minutes. In principle, it should be fine, but each project and server is unique, so if you start\nseeing too many jobs failing because the job timed out, then, increase the value using these config variables:  1\n2 MINUTE   =   60  TIMEOUT   =   20   *   60", 
            "title": "Background jobs timeout"
        }, 
        {
            "location": "/installation/configuration/#web-push-notifications", 
            "text": "Note  You need to have HTTPS enabled for your site. Otherwise, you will need to use a subdomain from onesignal.com to support this feature. If you cannot use HTTPS, we recommend to disable it.   PYBOSSA can send web push notifications to Google Chrome, Mozilla\nFirefox and Safari browsers.  For supporting this feature, PYBOSSA uses the Onesignal.com service. You will need an account and create an app for your PYBOSSA server. Then follow their documentation to download the WebPush SDK and configure your PYBOSSA theme.  For more info regarding Onesignal, check their  documentation.   Note  You can host the SDK files in the static folder of your theme. However, you will need to modify your web server (Apache or Nginx) to serve those files as from the root of your server. If this is not done correctly, it will not work.   Once you have created the app in Onesignal, get the API KEY and APP ID. Then copy them and put it in your settings_local.py file:  1\n2 ONESIGNAL_APP_ID   =   app-id  ONESIGNAL_API_KEY   =   app-key    Restart the server, and add one background worker for the  webpush  queue. This queue will handle the creation of the apps, as well as sending the push notifications.  Then you will need to update your PYBOSSA theme to allow your\nusers to subscribe. As this could vary a lot from one project to\nanother, we do not provide a template but some guidelines:   Use the JS SDK to subscribe a user to a given project using the\n   tags  option of Onesignal.  PYBOSSA sends notifications using those tags thanks to the    filters  option that allows us to segment traffic. PYBOSSA is\n  expecting the project.id as the tag key for segmenting.  The JS SDK allows you to subscribe/unsubscribe a user to a given project (not only the whole server) with unique methods for adding tags and deleting them. This works independently if the user is authenticated or not.   For more info regarding Onesignal JS SDK, check their  documentation.", 
            "title": "Web Push notifications"
        }, 
        {
            "location": "/installation/configuration/#ignore-specific-keys-when-exporting-data-in-csv-format", 
            "text": "Sometimes your PYBOSSA project saves information like GeoJSON within the tasks or task_runs. This is a bad thing for the exporter, as it will try to flatten it. In such scenarios, you want to instruct PYBOSSA to ignore those keys, as they will be included in the JSON export files, and reduce all the overhead (as well as destroying the format due to the normalization).  For ignoring a key (or a list of keys), just add the following config\nvariable to your settings_local.py file:  1 IGNORE_FLAT_KEYS   =   [   geojson ,   key1 ,   ... ]", 
            "title": "Ignore specific keys when exporting data in CSV format"
        }, 
        {
            "location": "/installation/configuration/#specify-a-new-root-key-instead-of-info-for-csv-exporter", 
            "text": "Sometimes you need to change the root key for the CSV exporter. This usually happens, when you have to store one ore more answers within the same info object. For this reason, you can instruct PYBOSSA to use that key instead of  info  for flattening the data:  1\n2\n3 TASK_CSV_EXPORT_INFO_KEY   =   key  TASK_RUN_CSV_EXPORT_INFO_KEY   =   key2  RESULT_CSV_EXPORT_INFO_KEY   =   key3    In this way, if key, key2 or key3 have an array or list of dictionaries, PYBOSSA will iterate over them, flat them, and then generate the CSV for you.", 
            "title": "Specify a new root key instead of info for CSV exporter"
        }, 
        {
            "location": "/installation/configuration/#disable-task-presenter-check-for-pure-javascript-apps", 
            "text": "When you are using PYBOSSA native JSON support, you will not be building your project presenter within the PYBOSSA structure, but within the JS framework of your choice.  In such a case, you would like to disable the check for the task_presenter when publishing a project. If you need this, just add\nthis flag to your settings_local.py file:  1 DISABLE_TASK_PRESENTER   =   True", 
            "title": "Disable task presenter check for pure JavaScript apps"
        }, 
        {
            "location": "/installation/configuration/#consent-field-for-users", 
            "text": "Sometimes you will need the users to click on a checkbox before\ncreating an account to get the agreement for sending them email\nnotifications or of any other type. By default, PYBOSSA provides this\nflag, and it s set to False.  Change in the theme (or your frontend) the label of the field to\nwhatever you prefer: Terms of Service, Communications, etc. so you will be able to keep track of who has accepted/declined to get notifications from you.", 
            "title": "Consent field for users"
        }, 
        {
            "location": "/installation/configuration/#custom-leaderboards", 
            "text": "By default, PYBOSSA provides a unique leaderboard. This leaderboard is based on the number of task runs that a user has submitted. However, you may want more flexibility. For this reason, you can use use the  user .info field to store any other  badges  or values that you want to score your users.  If your users have identified very complicated stuff, and you want to\ngive points to them based on that, just use the info field and instruct\nPYBOSSA to create a leaderboard for you.   Note  It is essential that this key, projectsvalue pair is computed by you. You can use the API to update these values, so this will not be handled by PYBOSSA but by yourself.   Imagine the score is named: foo, then, PYBOSSA will create for you a leaderboard using that key like this: edit the settings_local.py file\nand add the following config variable:  1 LEADERBOARDS   =   [ foo ]    Then, you can access the specific leaderboard using the endpoint:\n/leaderboard/?info=foo  As simple as that.   Note  This feature relies on background jobs. Be sure that you are running them.", 
            "title": "Custom Leaderboards"
        }, 
        {
            "location": "/installation/configuration/#default-number-of-users-for-the-leaderboard", 
            "text": "You can specify the default number of users shown in the leaderboard. By default we show the top 20 users.  1 LEADERBOARD = 20", 
            "title": "Default number of users for the leaderboard"
        }, 
        {
            "location": "/installation/configuration/#unpublish-inactive-projects", 
            "text": "PYBOSSA by default unpublishes projects that have not been active in the last three months. You can disable this feature by changing this config variable in your settings_local.py file:  1 UNPUBLISH_PROJECTS   =   False", 
            "title": "Unpublish inactive projects"
        }, 
        {
            "location": "/installation/configuration/#ldap-integration", 
            "text": "PYBOSSA can use LDAP for authenticating users. You will need to add a few config variables to the settings_local.py file to\nmake it work.  PYBOSSA supports LDAP and OpenLDAP protocols, so you should be able to use any of them.   Note  By enabling PYBOSSA LDAP integration, all other means for creating accounts and sign in will be disabled.", 
            "title": "LDAP integration"
        }, 
        {
            "location": "/installation/configuration/#ldap_host", 
            "text": "This variable should have the IP or domain name of your LDAP server.", 
            "title": "LDAP_HOST"
        }, 
        {
            "location": "/installation/configuration/#ldap_base_dn", 
            "text": "This is the LDAP Base DN for your organization.", 
            "title": "LDAP_BASE_DN"
        }, 
        {
            "location": "/installation/configuration/#ldap_username", 
            "text": "This variable should have the admin account so that PYBOSSA can access the LDAP server and search for users.", 
            "title": "LDAP_USERNAME"
        }, 
        {
            "location": "/installation/configuration/#ldap_password", 
            "text": "The admin account password.", 
            "title": "LDAP_PASSWORD"
        }, 
        {
            "location": "/installation/configuration/#ldap_objects_dn", 
            "text": "The DN.", 
            "title": "LDAP_OBJECTS_DN"
        }, 
        {
            "location": "/installation/configuration/#ldap_openldap", 
            "text": "Set it to True if you are using it.", 
            "title": "LDAP_OPENLDAP"
        }, 
        {
            "location": "/installation/configuration/#ldap_user_object_filter", 
            "text": "This is important. The filter that you write in here needs to be\nadapted to your institution, otherwise, it will not work when\nauthenticating and validating your users.  Don t use the default configuration in the settings template. You will\nneed to adapt it to your needs.", 
            "title": "LDAP_USER_OBJECT_FILTER"
        }, 
        {
            "location": "/installation/configuration/#ldap_user_filter_field", 
            "text": "If you use a different field in the previous configuration, update the\nLDAP_USER_FILTER_FIELD. It s important to reflect which key are you using within your LDAP server to identify your users uniquely.", 
            "title": "LDAP_USER_FILTER_FIELD"
        }, 
        {
            "location": "/installation/configuration/#ldap_pybossa_fields", 
            "text": "Use this configuration variable to match/link PYBOSSA fields to LDAP fields.", 
            "title": "LDAP_PYBOSSA_FIELDS"
        }, 
        {
            "location": "/installation/configuration/#uploading-files-to-pybossa", 
            "text": "PYBOSSA has a generic uploader that will check for valid extensions, avoiding for example that a user could upload a video, as only\nimages are allowed.", 
            "title": "Uploading files to PYBOSSA"
        }, 
        {
            "location": "/installation/configuration/#allowed_extensions", 
            "text": "Use this configuration variable, to specify which types of files will you allow in your server to be uploaded via the API. By default, the following extensions\nare enabled:  1 ALLOWED_EXTENSIONS   =   [ js ,   css ,   png ,   jpg ,   jpeg ,   gif ,   zip ]", 
            "title": "ALLOWED_EXTENSIONS"
        }, 
        {
            "location": "/installation/configuration/#spam-protection", 
            "text": "You can blacklist disposable email accounts by listing them in the SPAM config. Just add them like this:  1 SPAM   =   [ spam.com ,   fake.es ]", 
            "title": "SPAM protection"
        }, 
        {
            "location": "/installation/configuration/#failed-jobs", 
            "text": "Sometimes background jobs fail. For example, an email is rejected. By default\nPYBOSSA retries 3 times, before marking them as failed. You can customize it.  1 FAILED_JOBS_RETRIES   =   3", 
            "title": "Failed Jobs"
        }, 
        {
            "location": "/installation/configuration/#fulltext-search-language", 
            "text": "PYBOSSA uses PostgreSQL fulltex search support. Thus, you can instruct PYBOSSA\nto use only a given language to do it properly:  1 FULLTEXTSEARCH_LANGUAGE   =   english", 
            "title": "Fulltext search language"
        }, 
        {
            "location": "/installation/configuration/#absolute-links-to-avatars", 
            "text": "If you are building a Single Page Application or a Universal App, you will need to\nget absolute paths to the avatars. Use the following config:  1 AVATAR_ABSOLUTE   =   True", 
            "title": "Absolute links to Avatars"
        }, 
        {
            "location": "/installation/configuration/#delete-inactive-accounts", 
            "text": "PYBOSSA will delete inactive accounts after a period of time. For this purpose,\nPYBOSSA uses two different background jobs, one for warning users about the\naction, and another one to delete them.  The warning job is run on a monthly basis, while the deletion is done on a\nbi-monthly basis.  You can customize the the time period that you consider to warn users as well as\nto delete them. For these purposes you can use the following two variables:  1\n2 USER_INACTIVE_NOTIFICATION   =   5  USER_DELETE_AFTER_NOTIFICATION   =   1 month    Thus, after 5 months of not contributing a single task run, the user will get an\nemail warning her about the deletion. Then, the next month if the user has not\nsent a task run, the account will be deleted.  For deleting the accounts, PYBOSSA uses the the same method as if the user\nrequested it herself. The action anonymizes the user s contributions, and\ndeletes all her personal data.   Note  PYBOSSA will not delete users with the restrict flag set to true (to respect\nGDPR) as well as if they have projects.", 
            "title": "Delete inactive accounts"
        }, 
        {
            "location": "/installation/deployment/", 
            "text": "Deploying PYBOSSA with nginx and uwsgi\n\n\nThis section describes how to make PYBOSSA run as a service or daemon permanently in the background. This is useful if you want to run a production-ready single PYBOSSA web server. \n\n\nPYBOSSA hosted servers.\nCheckout Scifabric\ns \nhosted PYBOSSA servers\n.\nPre-requisites:\n\n\n\n\nnginx\n\n\nuwsgi\n\n\nsupervisord\n\n\nRedis and sentinel as service (with supervisord)\n\n\nRQ-Scheduler and RQ-Worker as service (with supervisord)\n\n\nPYBOSSA as service (with supervisord)\n\n\n\n\nFirst steps\n\n\nFirst things first, be sure that you have followed the \ninstallation guide\n before starting the deployment. We highly recommend installing PYBOSSA under a regular user (without any privileges) to run the PYBOSSA technology. We will refer to this user as \npybossa\n.\n\n\nInstalling nginx and uwsgi\n\n\nYou have to install nginx and uwsgi on your server machine. In a\nDebian/Ubuntu machine you can install them running the following\ncommands:\n\n\n1\nsudo apt-get install nginx\n\n\n\n\n\n\nIn the (virtualenv-)installation directory of pybossa, you need to\ninstall uwsgi:\n\n\n1\npip install -U uwsgi\n\n\n\n\n\n\nConfiguring nginx and uwsgi for PYBOSSA\n\n\nWe assume you only want to run PYBOSSA on your nginx web server. If you need to run also other services on the same server, you need to modify the nginx config files!\n\n\nYou have to copy and adapt the following files from your local PYBOSSA installation:\n\n\n\n\ncontrib/nginx/pybossa\n\n\ncontrib/pybossa.ini\n\n\n\n\nThe PYBOSSA virtual host file (\ncontrib/nginx/pybossa\n) has the\nfollowing directives:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nlocation\n \n/\n \n{\n \ntry_files\n \n$uri\n \n@pybossa\n;\n \n}\n\n\n\nlocation\n \n@\npybossa\n \n{\n\n    \ninclude\n \nuwsgi_params\n;\n\n    \nuwsgi_pass\n \nunix\n:/\ntmp\n/\npybossa\n.\nsock\n;\n\n\n}\n\n\n\nlocation\n  \n/\nstatic\n \n{\n\n\n            \n#\n \nchange\n \nthat\n \nto\n \nyour\n \npybossa\n \nstatic\n \ndirectory\n\n            \nalias\n \n/home/Scifabric/pybossa/pybossa/themes/default/static\n;\n\n\n            \nautoindex\n \non\n;\n\n            \nexpires\n \nmax\n;\n\n        \n}\n\n\n\n\n\n\n\nYou can specify a user and group from your machine with lower privileges to improve the security of the site. You can also use the www-data user and group name.\n\n\nOnce you have adapted the PATH in the alias in that file, copy it into\nthe folder:\n\n\n1\nsudo cp contrib/nginx/pybossa /etc/nginx/sites-available/.\n\n\n\n\n\n\nPlease delete the default config in sites-enabled (do not worry there is a backup):\n\n\n1\nsudo rm /etc/nginx/sites-enabled/default\n\n\n\n\n\n\nEnable the PYBOSSA site:\n\n\n1\nsudo ln -s /etc/nginx/sites-available/pybossa /etc/nginx/sites-enabled/pybossa\n\n\n\n\n\n\nAnd restart the server:\n\n1\nsudo service nginx restart\n\n\n\n\n\nCreating the pybossa.ini file for uwsgi\n\n\nYou have to copy the \npybossa.ini.template\n file to pybossa.ini in\nyour PYBOSSA installation and adapt the paths to match your\nconfiguration!\n\n\nThe content of this file is the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n[\nuwsgi\n]\n\n\nsocket\n \n=\n \n/\ntmp\n/\npybossa\n.\nsock\n\n\nchmod\n-\nsocket\n \n=\n \n666\n\n\nchdir\n \n=\n \n/\nhome\n/\npybossa\n/\npybossa\n\n\npythonpath\n \n=\n \n..\n\n\nvirtualenv\n \n=\n \n/\nhome\n/\npybossa\n/\npybossa\n/\nenv\n\n\nmodule\n \n=\n \nrun\n:\napp\n\n\ncpu\n-\naffinity\n \n=\n \n1\n\n\nprocesses\n \n=\n \n2\n\n\nthreads\n \n=\n \n2\n\n\nstats\n \n=\n \n/\ntmp\n/\npybossa\n-\nstats\n.\nsock\n\n\nbuffer\n-\nsize\n \n=\n \n65535\n\n\n\n\n\n\n\nInstall supervisord\n\n\nSupervisord\n is used to let PYBOSSA and its RQ system run as Daemon in the background. It shares some of the same goals of programs like launchd, daemontools, and runit.\n\n\nInstall it:\n\n\n1\nsudo apt-get install supervisor\n\n\n\n\n\n\nConfigure Redis and sentinel as a service with supervisord\n\n\nFirst stop Redis service and all running Redis instances with:\n\n\n1\n2\nsudo service redis-server stop\nkillall redis-server\n\n\n\n\n\n\nWe want to run redis and sentinel with supervisord because supervisord is more reliable when redis crashes (which can happen when you do not have enough RAM). So we disable redis-server daemon service with:\n\n\n1\nsudo rm /etc/init.d/redis-server\n\n\n\n\n\n\nGo to your pybossa installation directory and copy following files:\n\n\n1\n2\n3\n4\n5\n6\nsudo cp contrib/supervisor/redis-server.conf /etc/supervisor/conf.d/\nsudo cp contrib/supervisor/redis-sentinel.conf /etc/supervisor/conf.d/\nsudo cp contrib/redis-supervisor/redis.conf /etc/redis/\nsudo cp contrib/redis-supervisor/sentinel.conf /etc/redis/\nsudo chown redis:redis /etc/redis/redis.conf\nsudo chown redis:redis /etc/redis/sentinel.conf\n\n\n\n\n\n\nNow we restart supervisord (please do a full stop and start as\ndescribed):\n\n\n1\n2\nsudo service supervisor stop\nsudo service supervisor start\n\n\n\n\n\n\nTo verify the installation,  you can list all redis processes, and you should see a \nredis-server\n at port 6379 and \nredis-sentinel\n at port 26379:\n\n\n1\nps aux \n|\n grep redis\n\n\n\n\n\n\nThese two services will now run whenever the server is running (even after reboot).\n\n\nConfigure RQ-Scheduler and RQ-Worker to run with supervisord\n\n\nYou need to adjust the paths and user account in this two config files according to your installation. Then copy them to supervisor (do not\nforget to edit them):\n\n\n1\n2\nsudo cp contrib/supervisor/rq-scheduler.conf.template /etc/supervisor/conf.d/rq-scheduler.conf\nsudo cp contrib/supervisor/rq-worker.conf.template /etc/supervisor/conf.d/rq-worker.conf\n\n\n\n\n\n\nRestart supervisor:\n\n\n1\n2\nsudo service supervisor stop\nsudo service supervisor start\n\n\n\n\n\n\nVerify that the service is running. You should see a rqworker and rqscheduler instance in the console:\n\n\n1\nps aux \n|\n grep rq\n\n\n\n\n\n\nSetup PYBOSSA itself\n\n\nAs we are going to run PYBOSSA via nginx, we have to remove from the settings file the HOST and PORT sections. You can also comment them:\n\n\n1\n2\n# HOST = \n0.0.0.0\n\n\n# PORT = 12000\n\n\n\n\n\n\n\nAfter modifying the settings file, add the full server URL where your PYBOSSA is reachable:\n\n\n1\n2\nSERVER_NAME\n \n=\n \nmypybossa\n.\ncom\n\n\nPORT\n \n=\n \n80\n\n\n\n\n\n\n\nLet PYBOSSA run as service\n\n\nFinally, we need to let pybossa run as service. Adjust the paths and username again in this file and copy it to the supervisor config directory:\n\n\n1\nsudo cp contrib/supervisor/pybossa.conf.template /etc/supervisor/conf.d/pybossa.conf\n\n\n\n\n\n\nEdit now the file and adjust the paths \n username.\n\n\nRestart supervisor:\n\n\n1\n2\nsudo service supervisor stop\nsudo service supervisor start\n\n\n\n\n\n\nYou should have now a running PYBOSSA production web server on your nginx installation. Open your browser and check your configured domain: \nhttp://example.com\n.\n\n\nCongratulations! \n\n\nHow to update the PYBOSSA service\n\n\nUpgrading and updating PYBOSSA as service works the same as for the standalone version. Please follow instructions on the \ninstallation instructions\n. Once you have upgraded the code, you will need to restart all supervisor controlled services to get the changes:\n\n\n1\n2\n3\nsudo supervisorctl restart rq-scheduler\nsudo supervisorctl restart rq-worker\nsudo supervisorctl restart pybossa\n\n\n\n\n\n\nLogs of PYBOSSA services\n\n\nYou can find logs of all PYBOSSA services in this directory:\n\n\n1\ncd\n /var/log/supervisor\n\n\n\n\n\n\nLast words about Security and Scaling\n\n\nThis guide does not cover how to secure your PYBOSSA installation. As every web server, you have to make it secure (like, e.g., strong passwords, automatic Ubuntu security updates, firewall, access restrictions). Please use guides on the Internet to do so.\n\n\nPYBOSSA can also be scaled horizontally to run with redundant servers and with zero downtime over many redis, DB and web servers with load balancers in between.\n\n\nIf you need a secure and scalable PYBOSSA installation, please contact us. We offer hosted PYBOSSA servers, and we will handle all the hosting, customization, administration and setup for you. Check our  \npricing page\n and get in touch.", 
            "title": "Deploying PYBOSSA with Nginx and uWsgi"
        }, 
        {
            "location": "/installation/deployment/#deploying-pybossa-with-nginx-and-uwsgi", 
            "text": "This section describes how to make PYBOSSA run as a service or daemon permanently in the background. This is useful if you want to run a production-ready single PYBOSSA web server.   PYBOSSA hosted servers. Checkout Scifabric s  hosted PYBOSSA servers . Pre-requisites:   nginx  uwsgi  supervisord  Redis and sentinel as service (with supervisord)  RQ-Scheduler and RQ-Worker as service (with supervisord)  PYBOSSA as service (with supervisord)", 
            "title": "Deploying PYBOSSA with nginx and uwsgi"
        }, 
        {
            "location": "/installation/deployment/#first-steps", 
            "text": "First things first, be sure that you have followed the  installation guide  before starting the deployment. We highly recommend installing PYBOSSA under a regular user (without any privileges) to run the PYBOSSA technology. We will refer to this user as  pybossa .", 
            "title": "First steps"
        }, 
        {
            "location": "/installation/deployment/#installing-nginx-and-uwsgi", 
            "text": "You have to install nginx and uwsgi on your server machine. In a\nDebian/Ubuntu machine you can install them running the following\ncommands:  1 sudo apt-get install nginx   In the (virtualenv-)installation directory of pybossa, you need to\ninstall uwsgi:  1 pip install -U uwsgi", 
            "title": "Installing nginx and uwsgi"
        }, 
        {
            "location": "/installation/deployment/#configuring-nginx-and-uwsgi-for-pybossa", 
            "text": "We assume you only want to run PYBOSSA on your nginx web server. If you need to run also other services on the same server, you need to modify the nginx config files!  You have to copy and adapt the following files from your local PYBOSSA installation:   contrib/nginx/pybossa  contrib/pybossa.ini   The PYBOSSA virtual host file ( contrib/nginx/pybossa ) has the\nfollowing directives:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 location   /   {   try_files   $uri   @pybossa ;   }  location   @ pybossa   { \n     include   uwsgi_params ; \n     uwsgi_pass   unix :/ tmp / pybossa . sock ;  }  location    / static   { \n\n             #   change   that   to   your   pybossa   static   directory \n             alias   /home/Scifabric/pybossa/pybossa/themes/default/static ; \n\n             autoindex   on ; \n             expires   max ; \n         }    You can specify a user and group from your machine with lower privileges to improve the security of the site. You can also use the www-data user and group name.  Once you have adapted the PATH in the alias in that file, copy it into\nthe folder:  1 sudo cp contrib/nginx/pybossa /etc/nginx/sites-available/.   Please delete the default config in sites-enabled (do not worry there is a backup):  1 sudo rm /etc/nginx/sites-enabled/default   Enable the PYBOSSA site:  1 sudo ln -s /etc/nginx/sites-available/pybossa /etc/nginx/sites-enabled/pybossa   And restart the server: 1 sudo service nginx restart", 
            "title": "Configuring nginx and uwsgi for PYBOSSA"
        }, 
        {
            "location": "/installation/deployment/#creating-the-pybossaini-file-for-uwsgi", 
            "text": "You have to copy the  pybossa.ini.template  file to pybossa.ini in\nyour PYBOSSA installation and adapt the paths to match your\nconfiguration!  The content of this file is the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 [ uwsgi ]  socket   =   / tmp / pybossa . sock  chmod - socket   =   666  chdir   =   / home / pybossa / pybossa  pythonpath   =   ..  virtualenv   =   / home / pybossa / pybossa / env  module   =   run : app  cpu - affinity   =   1  processes   =   2  threads   =   2  stats   =   / tmp / pybossa - stats . sock  buffer - size   =   65535", 
            "title": "Creating the pybossa.ini file for uwsgi"
        }, 
        {
            "location": "/installation/deployment/#install-supervisord", 
            "text": "Supervisord  is used to let PYBOSSA and its RQ system run as Daemon in the background. It shares some of the same goals of programs like launchd, daemontools, and runit.  Install it:  1 sudo apt-get install supervisor", 
            "title": "Install supervisord"
        }, 
        {
            "location": "/installation/deployment/#configure-redis-and-sentinel-as-a-service-with-supervisord", 
            "text": "First stop Redis service and all running Redis instances with:  1\n2 sudo service redis-server stop\nkillall redis-server   We want to run redis and sentinel with supervisord because supervisord is more reliable when redis crashes (which can happen when you do not have enough RAM). So we disable redis-server daemon service with:  1 sudo rm /etc/init.d/redis-server   Go to your pybossa installation directory and copy following files:  1\n2\n3\n4\n5\n6 sudo cp contrib/supervisor/redis-server.conf /etc/supervisor/conf.d/\nsudo cp contrib/supervisor/redis-sentinel.conf /etc/supervisor/conf.d/\nsudo cp contrib/redis-supervisor/redis.conf /etc/redis/\nsudo cp contrib/redis-supervisor/sentinel.conf /etc/redis/\nsudo chown redis:redis /etc/redis/redis.conf\nsudo chown redis:redis /etc/redis/sentinel.conf   Now we restart supervisord (please do a full stop and start as\ndescribed):  1\n2 sudo service supervisor stop\nsudo service supervisor start   To verify the installation,  you can list all redis processes, and you should see a  redis-server  at port 6379 and  redis-sentinel  at port 26379:  1 ps aux  |  grep redis   These two services will now run whenever the server is running (even after reboot).", 
            "title": "Configure Redis and sentinel as a service with supervisord"
        }, 
        {
            "location": "/installation/deployment/#configure-rq-scheduler-and-rq-worker-to-run-with-supervisord", 
            "text": "You need to adjust the paths and user account in this two config files according to your installation. Then copy them to supervisor (do not\nforget to edit them):  1\n2 sudo cp contrib/supervisor/rq-scheduler.conf.template /etc/supervisor/conf.d/rq-scheduler.conf\nsudo cp contrib/supervisor/rq-worker.conf.template /etc/supervisor/conf.d/rq-worker.conf   Restart supervisor:  1\n2 sudo service supervisor stop\nsudo service supervisor start   Verify that the service is running. You should see a rqworker and rqscheduler instance in the console:  1 ps aux  |  grep rq", 
            "title": "Configure RQ-Scheduler and RQ-Worker to run with supervisord"
        }, 
        {
            "location": "/installation/deployment/#setup-pybossa-itself", 
            "text": "As we are going to run PYBOSSA via nginx, we have to remove from the settings file the HOST and PORT sections. You can also comment them:  1\n2 # HOST =  0.0.0.0  # PORT = 12000    After modifying the settings file, add the full server URL where your PYBOSSA is reachable:  1\n2 SERVER_NAME   =   mypybossa . com  PORT   =   80", 
            "title": "Setup PYBOSSA itself"
        }, 
        {
            "location": "/installation/deployment/#let-pybossa-run-as-service", 
            "text": "Finally, we need to let pybossa run as service. Adjust the paths and username again in this file and copy it to the supervisor config directory:  1 sudo cp contrib/supervisor/pybossa.conf.template /etc/supervisor/conf.d/pybossa.conf   Edit now the file and adjust the paths   username.  Restart supervisor:  1\n2 sudo service supervisor stop\nsudo service supervisor start   You should have now a running PYBOSSA production web server on your nginx installation. Open your browser and check your configured domain:  http://example.com .  Congratulations!", 
            "title": "Let PYBOSSA run as service"
        }, 
        {
            "location": "/installation/deployment/#how-to-update-the-pybossa-service", 
            "text": "Upgrading and updating PYBOSSA as service works the same as for the standalone version. Please follow instructions on the  installation instructions . Once you have upgraded the code, you will need to restart all supervisor controlled services to get the changes:  1\n2\n3 sudo supervisorctl restart rq-scheduler\nsudo supervisorctl restart rq-worker\nsudo supervisorctl restart pybossa", 
            "title": "How to update the PYBOSSA service"
        }, 
        {
            "location": "/installation/deployment/#logs-of-pybossa-services", 
            "text": "You can find logs of all PYBOSSA services in this directory:  1 cd  /var/log/supervisor", 
            "title": "Logs of PYBOSSA services"
        }, 
        {
            "location": "/installation/deployment/#last-words-about-security-and-scaling", 
            "text": "This guide does not cover how to secure your PYBOSSA installation. As every web server, you have to make it secure (like, e.g., strong passwords, automatic Ubuntu security updates, firewall, access restrictions). Please use guides on the Internet to do so.  PYBOSSA can also be scaled horizontally to run with redundant servers and with zero downtime over many redis, DB and web servers with load balancers in between.  If you need a secure and scalable PYBOSSA installation, please contact us. We offer hosted PYBOSSA servers, and we will handle all the hosting, customization, administration and setup for you. Check our   pricing page  and get in touch.", 
            "title": "Last words about Security and Scaling"
        }, 
        {
            "location": "/installation/admin/", 
            "text": "Administrating PYBOSSA\n\n\nPYBOSSA provides an admin section where administrators will be able to see a dashboard with global statistics, manage the background jobs, featured projects, categories, administrators, and users.\n\n\nRoles\n\n\nPYBOSSA has four type of users: anonymous, authenticated, pro and administrators. By default the first created user in a PYBOSSA server\nwill become an administrator and manage the site with full privileges.\n\n\nAnd admin user will be able to access the admin page by clicking on the username and then in the link \nAdmin site\n.\n\n\n\n\nAdministrators have full privileges on the server. They can modify anything within the server. Especially, they will be able to handle the following areas of the server:\n\n\n\n\nBackground jobs.\n\n\nFeatured projects.\n\n\nCategories.\n\n\nAdministrators.\n\n\nUsers.\n\n\n\n\n\n\nAdmins can also modify all projects. An admin can hide a project, update its task presenter, add new tasks, delete tasks or results. In other words, it can modify any aspect of any project within the server.\n\n\nAdding new administrators\n\n\nIn the admin area you will see a specific card for managing the administrators. In this card, you will be able to search by username to add new administrators. Also, you will see the list of current admins. From there, you will be able to remove them by clicking on the remove button below each username.\n\n\n\n\nAdding pro users\n\n\nThis feature is not available at the moment.  However, you can add a pro user within your server by modifying the user field \npro\n via SQL.\n\n\nDashboard\n\n\nThis card provides an overview of the PYBOSSA server within the last seven days.\n\n\nThe dashboard is updated every 24 hours via the background jobs. These jobs are scheduled in the \nlow\n queue.\n\n\nActive users\n\n\nIt provides the total number of active users (registered) as well as a graph showing the number of users active per day.\n\n\nActive anonymous users\n\n\nIt provides the total number of active anonymous users (registered) as well as a graph showing the number of them active per day.\n\n\nDraft projects\n\n\nIt gives you a list of draft projects created within the last seven days.  It also provides the total number of this type of projects.\n\n\nPYBOSSA considers a project to be in draft mode when it does not have a task and a task presenter.\n\n\nPublished projects\n\n\nIt gives you a list of published projects published within the last seven days.  It also provides the total number of this type of projects.\n\n\nPYBOSSA considers a project to be published when it does have at least a task and a task presenter.\n\n\nUpdated projects\n\n\nIt gives you a list of updated projects within the last seven days.  It also provides the total number of this type of projects.\n\n\nPYBOSSA considers a project to be updated when anything related to it has been updated: a new blog post, new tasks, new task runs, edits on the task presenter, etc.\n\n\nNew tasks\n\n\nIt provides the total number of new tasks created in the PYBOSSA server as well as a chart showing how many each day were created.\n\n\nNew answers (or task runs)\n\n\nIt provides the total number of new answers (task runs) created in the PYBOSSA server as well as a chart showing how many each day were created.\n\n\nNew users\n\n\nIt provides the total number of new registered users within the last seven days. It also includes a chart showing how many new users each day registered.\n\n\nReturning users\n\n\nThis chart shows how many users have contributed at least a task to a project, two, three, four, five, six and seven days in a row.\n\n\nThis statistic shows how many users you have in the system that contribute a lot and come back every day to contribute to your projects.\n\n\nRecent activity feed\n\n\nThis section shows the action of the PYBOSSA system in real time. You will be able to see the last 20 events of the system regarding new registrations, when a task has been completed, or a new blog post has been published.\n\n\nBackground jobs\n\n\nThis section allows you to see if any of your jobs and workers are performing well. Just take a look at them from time to time. In recent versions of PYBOSSA when a job fails more than three times in a row, you will get notified. Check this \nsection\n for more information.\n\n\nFeatured Projects\n\n\nIn this section, admins can add/remove projects to the front page of the site.\n\n\n\n\nYou will see an \nAdd to Featured\n link to add a project to the featured front page or a \nRemove from Featured\n to remove it.\n\n\nCategories\n\n\nPYBOSSA provides by default two categories:\n\n\n\n\nThinking\n: for projects where the users can use their skills to\n    solve a problem (i.e., image or sound pattern recognition).\n\n\nSensing\n: for projects where the users can help gathering data\n    using tools like \nEpiCollect\n and then\n    analyze the data in the PYBOSSA server.\n\n\n\n\nAdmins can add as many categories as they want, just type then and its description and click on the green button labeled: Add category.\n\n\n\n\n\n\nNote\n\n\nYou cannot delete a category if it has one or more projects associated with it. You can, however, rename the category or remove it when all the associated projects are not linked to the given category.\n\n\n\n\nProject\ns Audit log\n\n\nWhen a project is created, deleted or updated, the system registers its actions on the server. Admins will have access to all the logged activities in every project page, in a section named \nAudit log\n.\n\n\n\n\nThe section will let you know the following information:\n\n\n\n\nWhen\n: when the action was taken.\n\n\nAction\n: which action was taken: \ncreated\n, \nupdated\n, or\n    \ndeleted.\n\n\nSource\n: if it was done the action via the API or the WEB\n    interface.\n\n\nAttribute\n: which attributes of the project has been changed.\n\n\nWho\n: the user who took action.\n\n\nOld value\n: the previous value before the action.\n\n\nNew value\n: the new value after the action.\n\n\n\n\n\n\nNote\n\n\nOnly admins and users marked as \npro\n can see the audit log.", 
            "title": "Administrating PYBOSSA"
        }, 
        {
            "location": "/installation/admin/#administrating-pybossa", 
            "text": "PYBOSSA provides an admin section where administrators will be able to see a dashboard with global statistics, manage the background jobs, featured projects, categories, administrators, and users.", 
            "title": "Administrating PYBOSSA"
        }, 
        {
            "location": "/installation/admin/#roles", 
            "text": "PYBOSSA has four type of users: anonymous, authenticated, pro and administrators. By default the first created user in a PYBOSSA server\nwill become an administrator and manage the site with full privileges.  And admin user will be able to access the admin page by clicking on the username and then in the link  Admin site .   Administrators have full privileges on the server. They can modify anything within the server. Especially, they will be able to handle the following areas of the server:   Background jobs.  Featured projects.  Categories.  Administrators.  Users.    Admins can also modify all projects. An admin can hide a project, update its task presenter, add new tasks, delete tasks or results. In other words, it can modify any aspect of any project within the server.", 
            "title": "Roles"
        }, 
        {
            "location": "/installation/admin/#adding-new-administrators", 
            "text": "In the admin area you will see a specific card for managing the administrators. In this card, you will be able to search by username to add new administrators. Also, you will see the list of current admins. From there, you will be able to remove them by clicking on the remove button below each username.", 
            "title": "Adding new administrators"
        }, 
        {
            "location": "/installation/admin/#adding-pro-users", 
            "text": "This feature is not available at the moment.  However, you can add a pro user within your server by modifying the user field  pro  via SQL.", 
            "title": "Adding pro users"
        }, 
        {
            "location": "/installation/admin/#dashboard", 
            "text": "This card provides an overview of the PYBOSSA server within the last seven days.  The dashboard is updated every 24 hours via the background jobs. These jobs are scheduled in the  low  queue.", 
            "title": "Dashboard"
        }, 
        {
            "location": "/installation/admin/#active-users", 
            "text": "It provides the total number of active users (registered) as well as a graph showing the number of users active per day.", 
            "title": "Active users"
        }, 
        {
            "location": "/installation/admin/#active-anonymous-users", 
            "text": "It provides the total number of active anonymous users (registered) as well as a graph showing the number of them active per day.", 
            "title": "Active anonymous users"
        }, 
        {
            "location": "/installation/admin/#draft-projects", 
            "text": "It gives you a list of draft projects created within the last seven days.  It also provides the total number of this type of projects.  PYBOSSA considers a project to be in draft mode when it does not have a task and a task presenter.", 
            "title": "Draft projects"
        }, 
        {
            "location": "/installation/admin/#published-projects", 
            "text": "It gives you a list of published projects published within the last seven days.  It also provides the total number of this type of projects.  PYBOSSA considers a project to be published when it does have at least a task and a task presenter.", 
            "title": "Published projects"
        }, 
        {
            "location": "/installation/admin/#updated-projects", 
            "text": "It gives you a list of updated projects within the last seven days.  It also provides the total number of this type of projects.  PYBOSSA considers a project to be updated when anything related to it has been updated: a new blog post, new tasks, new task runs, edits on the task presenter, etc.", 
            "title": "Updated projects"
        }, 
        {
            "location": "/installation/admin/#new-tasks", 
            "text": "It provides the total number of new tasks created in the PYBOSSA server as well as a chart showing how many each day were created.", 
            "title": "New tasks"
        }, 
        {
            "location": "/installation/admin/#new-answers-or-task-runs", 
            "text": "It provides the total number of new answers (task runs) created in the PYBOSSA server as well as a chart showing how many each day were created.", 
            "title": "New answers (or task runs)"
        }, 
        {
            "location": "/installation/admin/#new-users", 
            "text": "It provides the total number of new registered users within the last seven days. It also includes a chart showing how many new users each day registered.", 
            "title": "New users"
        }, 
        {
            "location": "/installation/admin/#returning-users", 
            "text": "This chart shows how many users have contributed at least a task to a project, two, three, four, five, six and seven days in a row.  This statistic shows how many users you have in the system that contribute a lot and come back every day to contribute to your projects.", 
            "title": "Returning users"
        }, 
        {
            "location": "/installation/admin/#recent-activity-feed", 
            "text": "This section shows the action of the PYBOSSA system in real time. You will be able to see the last 20 events of the system regarding new registrations, when a task has been completed, or a new blog post has been published.", 
            "title": "Recent activity feed"
        }, 
        {
            "location": "/installation/admin/#background-jobs", 
            "text": "This section allows you to see if any of your jobs and workers are performing well. Just take a look at them from time to time. In recent versions of PYBOSSA when a job fails more than three times in a row, you will get notified. Check this  section  for more information.", 
            "title": "Background jobs"
        }, 
        {
            "location": "/installation/admin/#featured-projects", 
            "text": "In this section, admins can add/remove projects to the front page of the site.   You will see an  Add to Featured  link to add a project to the featured front page or a  Remove from Featured  to remove it.", 
            "title": "Featured Projects"
        }, 
        {
            "location": "/installation/admin/#categories", 
            "text": "PYBOSSA provides by default two categories:   Thinking : for projects where the users can use their skills to\n    solve a problem (i.e., image or sound pattern recognition).  Sensing : for projects where the users can help gathering data\n    using tools like  EpiCollect  and then\n    analyze the data in the PYBOSSA server.   Admins can add as many categories as they want, just type then and its description and click on the green button labeled: Add category.    Note  You cannot delete a category if it has one or more projects associated with it. You can, however, rename the category or remove it when all the associated projects are not linked to the given category.", 
            "title": "Categories"
        }, 
        {
            "location": "/installation/admin/#projects-audit-log", 
            "text": "When a project is created, deleted or updated, the system registers its actions on the server. Admins will have access to all the logged activities in every project page, in a section named  Audit log .   The section will let you know the following information:   When : when the action was taken.  Action : which action was taken:  created ,  updated , or\n     deleted.  Source : if it was done the action via the API or the WEB\n    interface.  Attribute : which attributes of the project has been changed.  Who : the user who took action.  Old value : the previous value before the action.  New value : the new value after the action.    Note  Only admins and users marked as  pro  can see the audit log.", 
            "title": "Project's Audit log"
        }, 
        {
            "location": "/installation/vagrant/", 
            "text": "Testing PYBOSSA with Vagrant\n\n\nVagrant\n is an open source solution that allows you to create and configure lightweight, reproducible, and portable development environments.\n\n\nVagrant\n simplifies a lot setting up all the requirements for a web application like PYBOSSA, as you will set up a virtual machine that \nautomagically\n downloads all the required libraries and dependencies for developing and testing the project.\n\n\nFor these reasons, PYBOSSA uses Vagrant to allow you to start effortlessly hacking the system, and more importantly, without polluting your system with lots of libraries that you may or may not needed (everything is configured in the Virtual Machine, which is a very safe sand-box!).\n\n\nAdditionally, several cloud companies have integration with Vagrant, so deploying a PYBOSSA server is simple using this method.\n\n\n\n\nWarning\n\n\nThe virtual machine and server have a \nbasic security\n set of rules (passwords, secrets, firewall, etc.). Therefore,  \nif you are going to use this method to deploy a PYBOSSA production server\n \nit is your responsibility to secure the system properly\n.\n\n\n\n\nSetting up PYBOSSA with Vagrant\n\n\nTo start using Vagrant and PYBOSSA all you have to do is\ninstalling the following open source software:\n\n\n\n\nVirtualBox\n (min version 4.2.10)\n\n\nVagrant\n (min version 1.2.1)\n\n\n\n\n\n\nNote\n\n\nVagrant\n and \nVirtualBox\n works in Windows, GNU/Linux, and Mac OS X, so you can try and run PYBOSSA without problems!\n\n\n\n\nClone the PYBOSSA git repository (be sure to install git in your\nmachine!):\n\n\n1\ngit clone --recursive https://github.com/Scifabric/pybossa.git\n\n\n\n\n\n\nOnce you have downloaded the source code, all you have to do to start your PYBOSSA development environment is typing the following in a terminal:\n\n\n1\n2\ncd\n pybossa\nvagrant up\n\n\n\n\n\n\nThe system will download a Virtual Machine, install all the required\nlibraries for PYBOSSA and set up the system for you inside the virtual machine.\n\n\nVagrant is great because all the changes that you will make in\nyour local copy of PYBOSSA will be automatically populated to the\nVirtual Machine. Hence, if you add a new feature to the system, you will be able to test it right away (this feature is pretty handy for\nworkshops, hackfests, etc.).\n\n\n\n\nNote\n\n\nIf you don\nt have enough space in your hard disk, Vagrant will fail to set up the virtual machine. For solving this issue\njust, modify the VirtualBox path to point to a partition or disk that has enough space. You can then manually change it with\nthis command: VBoxManage setproperty machinefolder to/new/path\n\n\n\n\nRunning the PYBOSSA server\n\n\nNow that all the libraries and dependencies have been installed, you can lunch the PYBOSSA development server:\n\n\n1\n2\nvagrant ssh\npython run.py\n\n\n\n\n\n\n\n\nNote\n\n\nVirtualenv (located in /home/vagrant/pybossa-env) is always activated on  login.\n\n\n\n\nNow all you have to do is open the following URL in your web browser: \nhttp://127.0.0.1:5000\n\n\nAnd you are done! Happy Hacking \n!\n\n\n\n\nNote\n\n\nPYBOSSA needs a RQ worker process. It is running by default permanently in the background in the VM and is controlled by supervisor. Optional is also the RQ scheduler process for speeding up tasks like ZIP creation. This process is off by default now. If you are developing on RQ worker, you want to restart or disable it with supervisorctl.", 
            "title": "Testing PYBOSSA with Vagrant"
        }, 
        {
            "location": "/installation/vagrant/#testing-pybossa-with-vagrant", 
            "text": "Vagrant  is an open source solution that allows you to create and configure lightweight, reproducible, and portable development environments.  Vagrant  simplifies a lot setting up all the requirements for a web application like PYBOSSA, as you will set up a virtual machine that  automagically  downloads all the required libraries and dependencies for developing and testing the project.  For these reasons, PYBOSSA uses Vagrant to allow you to start effortlessly hacking the system, and more importantly, without polluting your system with lots of libraries that you may or may not needed (everything is configured in the Virtual Machine, which is a very safe sand-box!).  Additionally, several cloud companies have integration with Vagrant, so deploying a PYBOSSA server is simple using this method.   Warning  The virtual machine and server have a  basic security  set of rules (passwords, secrets, firewall, etc.). Therefore,   if you are going to use this method to deploy a PYBOSSA production server   it is your responsibility to secure the system properly .", 
            "title": "Testing PYBOSSA with Vagrant"
        }, 
        {
            "location": "/installation/vagrant/#setting-up-pybossa-with-vagrant", 
            "text": "To start using Vagrant and PYBOSSA all you have to do is\ninstalling the following open source software:   VirtualBox  (min version 4.2.10)  Vagrant  (min version 1.2.1)    Note  Vagrant  and  VirtualBox  works in Windows, GNU/Linux, and Mac OS X, so you can try and run PYBOSSA without problems!   Clone the PYBOSSA git repository (be sure to install git in your\nmachine!):  1 git clone --recursive https://github.com/Scifabric/pybossa.git   Once you have downloaded the source code, all you have to do to start your PYBOSSA development environment is typing the following in a terminal:  1\n2 cd  pybossa\nvagrant up   The system will download a Virtual Machine, install all the required\nlibraries for PYBOSSA and set up the system for you inside the virtual machine.  Vagrant is great because all the changes that you will make in\nyour local copy of PYBOSSA will be automatically populated to the\nVirtual Machine. Hence, if you add a new feature to the system, you will be able to test it right away (this feature is pretty handy for\nworkshops, hackfests, etc.).   Note  If you don t have enough space in your hard disk, Vagrant will fail to set up the virtual machine. For solving this issue\njust, modify the VirtualBox path to point to a partition or disk that has enough space. You can then manually change it with\nthis command: VBoxManage setproperty machinefolder to/new/path", 
            "title": "Setting up PYBOSSA with Vagrant"
        }, 
        {
            "location": "/installation/vagrant/#running-the-pybossa-server", 
            "text": "Now that all the libraries and dependencies have been installed, you can lunch the PYBOSSA development server:  1\n2 vagrant ssh\npython run.py    Note  Virtualenv (located in /home/vagrant/pybossa-env) is always activated on  login.   Now all you have to do is open the following URL in your web browser:  http://127.0.0.1:5000  And you are done! Happy Hacking  !   Note  PYBOSSA needs a RQ worker process. It is running by default permanently in the background in the VM and is controlled by supervisor. Optional is also the RQ scheduler process for speeding up tasks like ZIP creation. This process is off by default now. If you are developing on RQ worker, you want to restart or disable it with supervisorctl.", 
            "title": "Running the PYBOSSA server"
        }, 
        {
            "location": "/installation/security/", 
            "text": "The installation gives you a step by step guide. However, it is your responsibility to secure the server following the standard Linux security guidelines that you should know before going live with your project. \n\n\nWe would recommend you to follow some of the following links:\n\n\n\n\nLinux Security Best Practices\n\n*\nRackspace Linux Server Best Practices\n\n\nLinux Security\n\n\n\n\n\n\nNote\n\n\nSome of these links might not work because the owners would change them, or even remove them.\n\n\n\n\nPYBOSSA server security\n\n\nUse always an unprivileged user to run PYBOSSA. Also, add secure passwords in all the variables, as this will be key to ensure that your signatures cannot be broken easily. \n\n\nRedis and Sentinel\n\n\nTo secure these services, read the \nofficial documentation\n.\n\n\nPostgreSQL\n\n\nTo secure the database, read the \nofficial documentation\n.\n\n\nData security\n\n\nPYBOSSA keeps everything private for anonymous users unless you specify in the settings_local.py file fields that you want to disclose.\n\n\nPYBOSSA can store any information within the \ninfo\n field of the following domain objects:\n\n\n\n\nAnnouncement.\n\n\nBlogpost.\n\n\nCategory.\n\n\nHelpingmaterial,\n\n\nPage,\n\n\nProject, and\n\n\nUser.\n\n\n\n\nAnnouncement\n\n\nPYBOSSA includes the following fields in a GET API call:\n\n\n\n\ncreated\n\n\nupdated\n\n\nid\n\n\nuser_id\n\n\ntitle\n\n\nbody\n\n\nmedia_url\n\n\npublished\n\n\ninfo\n\n\n\n\nFrom info, everything is public for users that are anonymous or are not the owner of the announcement.\n\n\nBlogpost\n\n\nPYBOSSA includes the following fields in a GET API call:\n\n\n\n\ncreated\n\n\nupdated\n\n\nproject_id\n\n\nid\n\n\nuser_id\n\n\ntitle\n\n\nbody\n\n\nmedia_url\n\n\npublished\n\n\ninfo\n\n\n\n\nFrom info, everything is public for users that are anonymous or are not the owner of the blogpost.\n\n\nCategory\n\n\nPYBOSSA includes the following fields in a GET API call:\n\n\n\n\ndescription\n\n\nshort_name\n\n\ncreated \n\n\nid\n\n\nname\n\n\ninfo\n\n\n\n\nFrom info, everything is public for users that are anonymous or are not the owner of the category.\n\n\nHelpingmaterial\n\n\nPYBOSSA includes the following fields in a GET API call:\n\n\n\n\ncreated\n\n\nid\n\n\ninfo\n\n\nmedia_url\n\n\npriority\n\n\n\n\nFrom info, everything is public for users that are anonymous or are not the owner of the helpingmaterial.\n\n\nPage\n\n\nPYBOSSA includes the following fields in a GET API call:\n\n\n\n\ncreated\n\n\nid\n\n\ninfo\n\n\nmedia_url\n\n\nslug\n\n\n\n\nFrom info, everything is public for users that are anonymous or are not the owner of the page.\n\n\nProject\n\n\nPYBOSSA includes the following fields in a GET API call:\n\n\n\n\nid\n\n\ndescription\n\n\ninfo\n\n\nn_tasks\n\n\nn_volunteers\n\n\nname\n\n\noverall_progress\n\n\nshort_name\n\n\ncreated\n\n\ncategory_id\n\n\nlong_description\n\n\nlast_activity\n\n\nlast_activity_raw\n\n\nn_task_runs\n\n\nn_results\n\n\nowner\n\n\nupdated\n\n\nfeatured\n\n\nowner_id\n\n\nn_completed_tasks\n\n\nn_blogposts\n\n\nowners_ids\n\n\n\n\nFrom info, only the following items are public:\n* container\n* thumbnail\n* thumbnail_url\n* task_presenter\n* tutorial\n* sched\n\n\nAny other key will be private except for the owner or an admin. If you want to add more keys, just use the following flag in the settings_local.py file:\n\n\n1\nPROJECT_INFO_PUBLIC_FIELDS\n \n=\n \n[\nkey1\n,\n \nkey2\n,\n \n..\n,\n \nkeyN\n]\n\n\n\n\n\n\n\nUser\n\n\nPYBOSSA includes the following fields in a GET API call:\n\n\n\n\ncreated\n\n\nname\n\n\nfullname\n\n\ninfo\n\n\nn_answers\n\n\nregistered_ago\n\n\nrank\n\n\nscore\n\n\nlocale\n\n\n\n\nFrom info, only the following items are public:\n\n\n\n\navatar\n\n\ncontainer\n\n\nextra\n\n\navatar_url\n\n\n\n\nAny other key will be private except for the owner or an admin. If you want to add more keys, just use the following flag in the settings_local.py file:\n\n\n1\nUSER_INFO_PUBLIC_FIELDS\n \n=\n \n[\nkey1\n,\n \nkey2\n,\n \n..\n,\n \nkeyN\n]", 
            "title": "Security"
        }, 
        {
            "location": "/installation/security/#pybossa-server-security", 
            "text": "Use always an unprivileged user to run PYBOSSA. Also, add secure passwords in all the variables, as this will be key to ensure that your signatures cannot be broken easily.", 
            "title": "PYBOSSA server security"
        }, 
        {
            "location": "/installation/security/#redis-and-sentinel", 
            "text": "To secure these services, read the  official documentation .", 
            "title": "Redis and Sentinel"
        }, 
        {
            "location": "/installation/security/#postgresql", 
            "text": "To secure the database, read the  official documentation .", 
            "title": "PostgreSQL"
        }, 
        {
            "location": "/installation/security/#data-security", 
            "text": "PYBOSSA keeps everything private for anonymous users unless you specify in the settings_local.py file fields that you want to disclose.  PYBOSSA can store any information within the  info  field of the following domain objects:   Announcement.  Blogpost.  Category.  Helpingmaterial,  Page,  Project, and  User.", 
            "title": "Data security"
        }, 
        {
            "location": "/installation/security/#announcement", 
            "text": "PYBOSSA includes the following fields in a GET API call:   created  updated  id  user_id  title  body  media_url  published  info   From info, everything is public for users that are anonymous or are not the owner of the announcement.", 
            "title": "Announcement"
        }, 
        {
            "location": "/installation/security/#blogpost", 
            "text": "PYBOSSA includes the following fields in a GET API call:   created  updated  project_id  id  user_id  title  body  media_url  published  info   From info, everything is public for users that are anonymous or are not the owner of the blogpost.", 
            "title": "Blogpost"
        }, 
        {
            "location": "/installation/security/#category", 
            "text": "PYBOSSA includes the following fields in a GET API call:   description  short_name  created   id  name  info   From info, everything is public for users that are anonymous or are not the owner of the category.", 
            "title": "Category"
        }, 
        {
            "location": "/installation/security/#helpingmaterial", 
            "text": "PYBOSSA includes the following fields in a GET API call:   created  id  info  media_url  priority   From info, everything is public for users that are anonymous or are not the owner of the helpingmaterial.", 
            "title": "Helpingmaterial"
        }, 
        {
            "location": "/installation/security/#page", 
            "text": "PYBOSSA includes the following fields in a GET API call:   created  id  info  media_url  slug   From info, everything is public for users that are anonymous or are not the owner of the page.", 
            "title": "Page"
        }, 
        {
            "location": "/installation/security/#project", 
            "text": "PYBOSSA includes the following fields in a GET API call:   id  description  info  n_tasks  n_volunteers  name  overall_progress  short_name  created  category_id  long_description  last_activity  last_activity_raw  n_task_runs  n_results  owner  updated  featured  owner_id  n_completed_tasks  n_blogposts  owners_ids   From info, only the following items are public:\n* container\n* thumbnail\n* thumbnail_url\n* task_presenter\n* tutorial\n* sched  Any other key will be private except for the owner or an admin. If you want to add more keys, just use the following flag in the settings_local.py file:  1 PROJECT_INFO_PUBLIC_FIELDS   =   [ key1 ,   key2 ,   .. ,   keyN ]", 
            "title": "Project"
        }, 
        {
            "location": "/installation/security/#user", 
            "text": "PYBOSSA includes the following fields in a GET API call:   created  name  fullname  info  n_answers  registered_ago  rank  score  locale   From info, only the following items are public:   avatar  container  extra  avatar_url   Any other key will be private except for the owner or an admin. If you want to add more keys, just use the following flag in the settings_local.py file:  1 USER_INFO_PUBLIC_FIELDS   =   [ key1 ,   key2 ,   .. ,   keyN ]", 
            "title": "User"
        }, 
        {
            "location": "/build/intro/", 
            "text": "Introduction\n\n\nPYBOSSA has two main components:\n\n\n\n\nthe server and\n\n\nthe projects.\n\n\n\n\n\n\nProfessional PYBOSSA projects.\n\n\nIf you want to build a project, you can hire Scifabric for designing,\nbuilding, and analysing your data. Check Scifabric \nsolutions\n.\n\n\n\n\nThe server\n\n\nThe PYBOSSA server is a web server with a RESTful API that\ndistributes tasks among volunteers using a simple API.\n\n\nYou can start directly using this service without any cost (setting your own server), or if you prefer you can \nhire one of our PYBOSSA server options\n.\n\n\nArchitecture\n\n\nThe following diagram gives you an overview of how a PYBOSSA system works:\n\n\n\n\nA PYBOSSA server can have one or more projects. A project can have one or more tasks, and PYBOSSA takes care of distributing the tasks among the volunteers.\n\n\nThis distribution happens when a volunteer requests a task. PYBOSSA checks which available tasks can be sent to the user, and sends them. When the volunteer sends a task run (a classification, transcription, analysis, etc.) PYBOSSA saves it.\n\n\nPYBOSSA supports real-time data analysis. If the project has this feature enabled, PYBOSSA will notify, using a webhook POST, a microservice to do the statistical analysis and save a result for the given task based on the task runs of the task.\n\n\nThe Project\n\n\nA PYBOSSA project is an HTML page with some \nJavaScript\n that will load a \ntask\n from a PYBOSSA server and present it to the volunteer and ask\nthe user to, for instance, classify an image or transcribe a handwritten document.\n\n\nA PYBOSSA project has two main components:\n\n\n\n\nThe Task Presenter\n: an HTML document where the\n  \nJavaScript\n will load the\n  task data into the \nDOM\n; and\n\n\nThe Task Importer\n: usually a script that will upload the tasks for the project into the PYBOSSA server.\n\n\n\n\nProjects can be easily created using two approaches:\n\n\n\n\nUsing the Web interface\n: where you can create a project, write\n  the \nTask Presenter\n and upload the tasks using the \nsimplified\n  built-in Task Importers\n (get tasks from Amazon S3, Dropbox, Youtube, CSV, Google Spreadsheets a IIIF manifest); or\n\n\nUsing the\n API: where you will be able to create the project,\n  write the \nTask Presenter\n. For importing the tasks, you can use the Task  Importer of your project, use \nour command line tool\n, or if you prefer it to create a specific script that will use the PYBOSSA API for this part using your preferred programming language.\n\n\n\n\nThe \nWeb Interface\n is an excellent start point to learn a bit more about the PYBOSSA architecture and how you can develop a \nsimple\n project in a short time, while the API will give you more options regarding flexibility.\n\n\nAdding tasks to a project\n\n\nCreating a project is simple. You fill in some data via the web interface, and the project is created. Once you have it, you will need to add tasks to them. To do it, you could use one of the available PYBOSSA importers:\n\n\n\n\nAmazon S3: to import images, videos, audios or PDFs.\n\n\nYoutube: to import videos.\n\n\nGoogle Spreadsheets: to import spreadsheets.\n\n\nCSV: to import spreadsheets.\n\n\nEpiCollect+: to import form data from mobile phones with geolocalized information like images.\n\n\nDropbox: to import pictures, videos, audios or PDFs.\n\n\nIIIF manifests: to import images (and in future, video or audio).\n\n\n\n\n\n\nTip\n\n\nIf you need an importer, please, add a \nGithub Issue\n in our repository so we can implement it.\n\n\n\n\nWhile these importers solve most of the problems, in some scenarios you will need to import data into your PYBOSSA project in a different way. For these cases, we recommend you to use our command line tool \npbs\n or just write a script that will talk directly to the PYBOSSA \nAPI\n.\n\n\nScifabric provides several PYBOSSA project templates that can be re-used for creating new projects easily:\n\n\n\n\nFlickr Person Finder\n: an image classification template,\n\n\nUrban Parks\n: a geo-localizing using web-maps template,\n\n\nPDF Transcribe\n: a transcription template.\n\n\n\n\nThe templates provide the following tools:\n\n\n\n\nTask Creator\n: check in the repository the \ncreateTasks.py\n\n  script (deprecated as we use now \npbs\n),\n\n\nTask Presenter\n: check in the repository the \ntemplate.html\n\n  file,\n\n\nTutorial\n: check in the repository the \ntutorial.html\n file,\n\n\nProject description\n: check in the repository the \nproject.json\n\n  and \nlong_description.md\n files.\n\n\n\n\nWe recommend you to read the \ntutorial\n as it gives \na step by step\n guide about how you can create a project, write a script to import tasks, create the Task Presenter using the \nFlickr Person Finder\n template.\n\n\nAsking the crowd to participate\n\n\nOnce we have the data in place, we would need to show it to the volunteers. We will achieve it by using the task presenter.\n\n\nAs PYBOSSA runs mostly on the web (you can build native iOS or Android apps as well), a task presenter is usually an HTML page where we will load the task. For example, if we are classifying an image,  we will insert the picture along with a form where the user can submit the response (the Task Presenter would also take care of sending that response back to the PYBOSSA server via an API call).\n\n\nTask Presenters can be written in any language and run anywhere as long as they can communicate with the PYBOSSA server via its API. PYBOSSA has a headless solution where developers can build native iOS and Android apps for interacting with PYBOSSA as well as Single Page Applications using popular Javascript frameworks.\n\n\nScifabric provides several template projects that can be re-used to create your project:\n\n\n\n\nFlickr Person   Finder\n: an image classification template,\n\n\nUrban Parks\n: a\n  geo-localizing using web-maps template,\n\n\nPDF Transcribe\n: a\n  transcription template.\n\n\n\n\nThe template projects provide the task presenter, where you can learn how to use it. We recommend you to read the \ntutorial\n as it gives \na step by step\n guide about how you can create a project, write the Task Creator and Presenter from scratch using the \nFlickr Person Finder\n template project.", 
            "title": "Introduction"
        }, 
        {
            "location": "/build/intro/#introduction", 
            "text": "PYBOSSA has two main components:   the server and  the projects.    Professional PYBOSSA projects.  If you want to build a project, you can hire Scifabric for designing,\nbuilding, and analysing your data. Check Scifabric  solutions .", 
            "title": "Introduction"
        }, 
        {
            "location": "/build/intro/#the-server", 
            "text": "The PYBOSSA server is a web server with a RESTful API that\ndistributes tasks among volunteers using a simple API.  You can start directly using this service without any cost (setting your own server), or if you prefer you can  hire one of our PYBOSSA server options .", 
            "title": "The server"
        }, 
        {
            "location": "/build/intro/#architecture", 
            "text": "The following diagram gives you an overview of how a PYBOSSA system works:   A PYBOSSA server can have one or more projects. A project can have one or more tasks, and PYBOSSA takes care of distributing the tasks among the volunteers.  This distribution happens when a volunteer requests a task. PYBOSSA checks which available tasks can be sent to the user, and sends them. When the volunteer sends a task run (a classification, transcription, analysis, etc.) PYBOSSA saves it.  PYBOSSA supports real-time data analysis. If the project has this feature enabled, PYBOSSA will notify, using a webhook POST, a microservice to do the statistical analysis and save a result for the given task based on the task runs of the task.", 
            "title": "Architecture"
        }, 
        {
            "location": "/build/intro/#the-project", 
            "text": "A PYBOSSA project is an HTML page with some  JavaScript  that will load a  task  from a PYBOSSA server and present it to the volunteer and ask\nthe user to, for instance, classify an image or transcribe a handwritten document.  A PYBOSSA project has two main components:   The Task Presenter : an HTML document where the\n   JavaScript  will load the\n  task data into the  DOM ; and  The Task Importer : usually a script that will upload the tasks for the project into the PYBOSSA server.   Projects can be easily created using two approaches:   Using the Web interface : where you can create a project, write\n  the  Task Presenter  and upload the tasks using the  simplified\n  built-in Task Importers  (get tasks from Amazon S3, Dropbox, Youtube, CSV, Google Spreadsheets a IIIF manifest); or  Using the  API: where you will be able to create the project,\n  write the  Task Presenter . For importing the tasks, you can use the Task  Importer of your project, use  our command line tool , or if you prefer it to create a specific script that will use the PYBOSSA API for this part using your preferred programming language.   The  Web Interface  is an excellent start point to learn a bit more about the PYBOSSA architecture and how you can develop a  simple  project in a short time, while the API will give you more options regarding flexibility.", 
            "title": "The Project"
        }, 
        {
            "location": "/build/intro/#adding-tasks-to-a-project", 
            "text": "Creating a project is simple. You fill in some data via the web interface, and the project is created. Once you have it, you will need to add tasks to them. To do it, you could use one of the available PYBOSSA importers:   Amazon S3: to import images, videos, audios or PDFs.  Youtube: to import videos.  Google Spreadsheets: to import spreadsheets.  CSV: to import spreadsheets.  EpiCollect+: to import form data from mobile phones with geolocalized information like images.  Dropbox: to import pictures, videos, audios or PDFs.  IIIF manifests: to import images (and in future, video or audio).    Tip  If you need an importer, please, add a  Github Issue  in our repository so we can implement it.   While these importers solve most of the problems, in some scenarios you will need to import data into your PYBOSSA project in a different way. For these cases, we recommend you to use our command line tool  pbs  or just write a script that will talk directly to the PYBOSSA  API .  Scifabric provides several PYBOSSA project templates that can be re-used for creating new projects easily:   Flickr Person Finder : an image classification template,  Urban Parks : a geo-localizing using web-maps template,  PDF Transcribe : a transcription template.   The templates provide the following tools:   Task Creator : check in the repository the  createTasks.py \n  script (deprecated as we use now  pbs ),  Task Presenter : check in the repository the  template.html \n  file,  Tutorial : check in the repository the  tutorial.html  file,  Project description : check in the repository the  project.json \n  and  long_description.md  files.   We recommend you to read the  tutorial  as it gives  a step by step  guide about how you can create a project, write a script to import tasks, create the Task Presenter using the  Flickr Person Finder  template.", 
            "title": "Adding tasks to a project"
        }, 
        {
            "location": "/build/intro/#asking-the-crowd-to-participate", 
            "text": "Once we have the data in place, we would need to show it to the volunteers. We will achieve it by using the task presenter.  As PYBOSSA runs mostly on the web (you can build native iOS or Android apps as well), a task presenter is usually an HTML page where we will load the task. For example, if we are classifying an image,  we will insert the picture along with a form where the user can submit the response (the Task Presenter would also take care of sending that response back to the PYBOSSA server via an API call).  Task Presenters can be written in any language and run anywhere as long as they can communicate with the PYBOSSA server via its API. PYBOSSA has a headless solution where developers can build native iOS and Android apps for interacting with PYBOSSA as well as Single Page Applications using popular Javascript frameworks.  Scifabric provides several template projects that can be re-used to create your project:   Flickr Person   Finder : an image classification template,  Urban Parks : a\n  geo-localizing using web-maps template,  PDF Transcribe : a\n  transcription template.   The template projects provide the task presenter, where you can learn how to use it. We recommend you to read the  tutorial  as it gives  a step by step  guide about how you can create a project, write the Task Creator and Presenter from scratch using the  Flickr Person Finder  template project.", 
            "title": "Asking the crowd to participate"
        }, 
        {
            "location": "/build/overview/", 
            "text": "Quickstart: Creating a Project\n\n\nThis is a short guide on how you can create a PYBOSSA project. You may wish to start with the \nstep by step tutorial\n; which walks through creating a simple photo classification project if you want to understand all the details about how a project works.\n\n\nFirst of all, we have to create a project for the project. To create a project, you will have to provide the following information:\n\n\n\n\nName\n,\n\n\nShort name\n or \nslug\n, and\n\n\nDescription\n\n\n\n\nThe \nslug\n or \nshort name\n is a shortcut for accessing the project\nvia the web (short URLs like this \nhttp://domain.com/project/slug\n).\n\n\nThe \ndescription\n is a short sentence that will be used to describe\nyour project (think about it as a Tweet long description).\n\n\nA project can be created using two different methods:\n\n\n\n\nweb interface, or\n\n\nAPI interface.\n\n\n\n\nUsing the Web Interface\n\n\nCreating a project using the web interface involves four steps:\n\n\n\n\nBuilding the project,\n\n\nImport the tasks using one of the available \ntask importers\n,\n\n\nWrite the task-presenter for the users, and\n\n\nPublish the project.\n\n\n\n\nCreating the project\n\n\nTo create a project using the web interface you have\nto:\n\n\nCreate a PYBOSSA account\n\n\nYou can create an account filling a form.\n\n\n\n\nYou can also set preferences for language, location, area of expertise(termed as user type) and set metadata for the account. For this, pybossa server need to be configured with new settings; sample for same can be obtained from pybossa/settings_upref_mdata.py.tmpl. Rename settings_upref_mdata.py.tmpl to settings_upref_mdata.py and copy it under folder containing settings_local.py. With this, contents of settings_upref_mdata.py will be available on account filling form.\n\n\n\n\nUser preference/metedata set for the account can viewed and modified under account profile page.\n\n\n\n\nCreating the project\n\n\nOnce you have an account, click in \ncreate the ** link of the navigation bar. After clicking on the previous link, you will have to fill in a    form with the fundamental information to create your project:\n    1.  **Name\n: the full name of your project, i.e., \nFlickr Person\n        Finder\n.\n    2.  \nShort Name\n: the \nslug\n or short name used in the URL for         accessing your project, i.e., \nflickrperson\n.\n    3.  \nLong Description\n: A \nlong\n description where you can use\n        Markdown to format the description of your project. This field\n        is usually used to provide information about the project, the\n        developer, the researcher group or institutions involved in the\n        project, etc.\n\n\n\n\n\n\nNote\n\n\nPYBOSSA usually provides two Project Categories by default: \nthinking\n and \nsensing\n. The \nthinking\n category represents the standard PYBOSSA project where users contribute helping with their skills. \nSensing\n category refers to projects that are using volunteer sensing tools like EpiCollect or Raspberry Pi with PYBOSSA for gathering data.\n\n\n\n\nOnce you have filled all the fields, click in the \nCreate the project\n button, and you will have created your first project \n\n\nAfter creating the project, you should be redirected to the \nSettings\n  project page, where you will be able to customize your project by adding some extra information or changing some settings. There, you will find a form with the same fields as in the previous step (just in case you\nve changed your mind and wanted to change any of them) plus the following:\n\n\n\n\nDescription\n: A \nshort\n description of the project, e.g., \nA    project to classify cancer cells\n. By default, this field is automatically populated with the information that you provided in the \nLong description\n field.\n\n\nAllow Anonymous Contributors\n: By default, anonymous and authenticated users can participate in all the projects. However, you can change it only to allow authenticated volunteers to participate.\n\n\nPassword\n: If you want to control who can access your project, you can set a password here to share with those you allow to do it. If you leave it blank, then no password will protect your project.\n\n\nCategory\n: Select a category that fits your project. Categories\n   are added and managed by the server administrators.\n\n\n\n\n\n\nNote\n\n\nAlso, you will be able to select and upload a \nimage\n from your local computer to set it as the project image throughout the server.\n\n\n\n\n\n\nImporting the tasks via the built-in CSV Task Importer\n\n\nTasks can be imported from different services like Dropbox or Amazon S3 via the importers. To use one, just do the following:\n1. Navigate to your project\ns page (you can directly access it using\n   the \nslug\n project name: \nhttp://server/project/slug\n).\n2. Click in the \nTasks\n section -on the left side local navigation\n   menu:\n\n\n\n\n\n\nAnd click again on the \nImport Tasks\n card. After clicking on it, you will see several options. The first ones are for using the different kinds of importers supported by PYBOSSA: Amazon S3, Dropbox, Youtube, Google Spreadsheet, CSV URL, IIIF, and EpiCollect Plus.\n\n\n\n\nThe other importers are very similar. In most cases, you\nll provide a URL to the resource, like for the CSV and Google Spreadsheet importer, while the Dropbox, Amazon S3, Youtube, and EpiCollect Plus importers will have a friendly interface to import data automagically for you.\n\n\n\n\nNote\n\n\nIf you\nre trying to import from a Google Spreadsheet, ensure the file is accessible to everyone via the Share option, choosing: \nPublic on the web - Anyone on the Internet can find and view.\n\n\n\n\n\n\nNote\n\n\nYour spreadsheet/CSV file must contain a header row. All the fields in the CSV will be serialized to JSON and stored in the \ninfo\n field. If your field name is one of \nstate\n, \nquorum\n, \ncalibration\n,    \npriority_0\n, or \nn_answers\n, it will be saved in the respective     columns. Your spreadsheet must be visible to the public or everyone with an URL.\n\n\n\n\nIn the Task Importer section, you\nll also find other pre-loaded Google Spreadsheets URLs. Those templates are examples that you can use to learn how to create your spreadsheets and import data for image,\nsound, video, pdf mining and mapping projects.\n\n\n\n\nBy using these templates, you\nll be able to learn the structure of the\ntasks, and directly re-use the task-presenter templates that know the\nstructure (name of the columns) for presenting the task.\n\n\nAdditionally, you can re-use the templates by downloading the CSV files from Google Docs, or even copying them to your own Google Drive account (click in \nFile\n \n \nMake a copy\n in the Google Doc Spreadsheet). Scifabric provides the following templates:\n\n\n\n\nImage Pattern Recognition\n\n\nSound Pattern Recognition\n\n\nVideo Pattern Recognition\n\n\nGeo-coding\n\n  and\n\n\nPDF transcription\n.\n\n\n\n\n\n\nTip\n\n\nIf you import the same URL again, only new records will be added to the project.\n\n\n\n\nImporting the tasks from an EpiCollect Plus Public Project\n\n\nEpiCollect\n provides a web tool for the\ngeneration of forms for many kinds of mobile data collection projects.\n\n\nData can be collected using multiple mobile phones running either the Android Operating system or the iPhone (using the EpiCollect mobile app), and all data can be synchronized from the phones and viewed centrally (using Google Maps) via the Project website or directly on the phones.\n\n\nEpiCollect can help you to recollect data samples according to a form that could include multimedia like photos. Moreover, EpiCollect can geolocate the data sample as it supports the built-in GPS that all modern smartphones have.\n\n\nFor example, you can create an EpiCollect project where the form will ask the user to take a picture of a lake, geo-locate it automatically via the built-in smartphone GPS and upload the image to the EpiCollect server. If the user does not have Internet access at that moment, the user will be able to synchronize the data afterward, i.e., when the user has access to an Internet WIFI hotspot.\n\n\nPYBOSSA can automatically import data from a public EpiCollect Plus project that you own or that it is publicly available on the\nwebsite. Then you will be able to validate, analyze, etc. the data that has been obtained via EpiCollect.\n\n\nIf you want to import the data points submitted to a \npublic\n\nEpiCollect project, you will have to follow the next steps:\n\n\n\n\nNavigate to your project\ns page (you can directly access it using\n   the \nslug\n project name: \nhttp://server/project/slug\n).\n\n\nClick in the \nTasks\n section -on the left side local navigation\n   menu.\n\n\nAnd click on the \nImport Tasks\n button. After clicking on it you\n   will see several different options.\n\n\nClick on the \nUse an EpiCollect Project\n one.\n    \n\n\nThen, type the \nname of the EpiCollect project\n and the name of the \nform\n that you want to import and click on the import button.\n\n\n\n\nAll the data points should be imported now in your project.\n\n\n\n\nNote\n\n\nEpiCollect projects will be gathering data mostly all the time, for this reason, if you import again the same EpiCollect project, only  \nnew data points\n will be imported. This feature will allow you to easily add new data points to the PYBOSSA project without having to do anything special.\n\n\n\n\nImporting the tasks from a Flickr photo set\n\n\nPYBOSSA also allows importing tasks for projects based on images (like image pattern recognition ones) directly from a \nFlickr\n [set]\nhttps://www.flickr.com/help/photos/#150321191\n) (also called\nalbum).\n\n\nWhen importing tasks from a Flickr set, a new task will be created for each of the photos in the specified set. The tasks will include the\nfollowing data about each picture (which will be later available to be\nused in the task presenter):\n\n\n\n\ntitle: the title of the photograph, as it appears on Flickr.\n\n\nURL: the URL to the raw .jpg image, in its original size.\n\n\nurl_b: the URL to the image, \nbig sized.\n\n\nurl_m: the URL to the image, \nmedium\n sized.\n\n\nlink: a link to the photo page on Flickr (not to the raw image).\n\n\n\n\nYou can import tasks from a Flickr photo set (a.k.a. album) in either of the following ways: using your Flickr account, or by typing the album ID.\n\n\nThe easiest one is to give the PYBOSSA server permission to access your Flickr list of albums. To do so, you\nll have to log in to your Flickr\naccount by clicking the \nLog in Flickr\n button. Then you\nll be\nredirected to Flickr, where you will be asked if you want to allow\nPYBOSSA to access your Flickr information. If you say yes, then you\nll be again redirected to PYBOSSA, and you\nll see all of your albums. Choose one of them and then click the \nImport\n button to get all the photos created as tasks for your project.\n\n\n\n\nNote\n\n\nNext time you try to import photos using the Flickr importer, you\nll see the albums for your account again. If you don\nt want PYBOSSA to access them anymore, or just want to use another Flickr account, then click \nRevoke access.\n\n\n\n\nAnother option to import from a Flickr album is by specifying the ID of the set (collection) directly. This option is a bit more advanced, but  it allows you to import from a photo set that you don\nt own (although, it will have to be public. Also check the rights of the photos on it!). Another advantage is that you don\nt need to log in to Flickr, so you don\nt even need to have a Flickr account.\n\n\nThese are the steps:\n\n\n\n\nNavigate to your project\ns page and click in the \nTasks\n section.\n\n\nThen click on the \nImport Tasks\n button, and select the \nFlickr\n   importer\n.\n\n\nType the ID of the Flickr set you want to import the photos from, then click on the import button.\n\n\n\n\n\n\nIf you cannot find the ID or don\nt know which one it is, just browse to the Flickr photo set and check the URL. Can you see that last long number right at the end of it? That\ns what you\nre looking for!\n\n\n\n\nJust like with the other importers, each task will be created only once, even if you import twice from the same Flickr set (unless you add new photos to it, of course!).\n\n\n\n\nNote\n\n\nYou will need to make sure that every photo belonging to the set has the visibility set to public, so the PYBOSSA server can then access and present them to the volunteers of your project.\n\n\n\n\n\n\nNote\n\n\nFor enabling the Flickr importer, check this \nsection\n.\n\n\n\n\nImporting the tasks from a Dropbox account\n\n\nYou can import tasks from arbitrary data hosted on a Dropbox account with the Dropbox importer. When you import tasks in this way, the following information will be added to the info field of each task, available later to be used in the task presenter of the project:\n\n\n\n\nfilename: just it, the name of the file you\nre importing as a task.\n\n\nlink: the link to the Dropbox page showing the file.\n\n\nlink_raw: the link to the raw file served by Dropbox. This is the\n  one you\nll have to use if you want to direct link to the file from\n  the presenter (e.g., for using an image in a \n tag, you\nd\n  do: \n).\n\n\n\n\nIn addition to this generic information, the Dropbox importer will also recognize some files by their extension and will attach some extra information to them.\n\n\nFor pdf files (.pdf extension), the following fields will be obtained\ntoo:\n\n\n\n\npdf_url: direct link to the raw pdf file, with CORS support.\n\n\n\n\nFor image files (.png, jpg, .jpeg and .gif extensions) the following\ndata will be available:\n\n\n\n\nurl_m: the same as link_raw\n\n\nurl_b: the same as link_raw\n\n\ntitle: the same as the filename\n\n\n\n\nFor audio files (.mp4, .m4a, .mp3, .ogg, .oga, .webm and .wav\nextensions):\n\n\n\n\naudio_url: raw link to the audio file, which can be used inside an\n  HTML 5 \naudio\n tag and supports CORS.\n\n\n\n\nFor video files (.mp4, .m4v, .ogg, .ogv, .webm and .avi extensions):\n\n\n\n\naudio_url: raw link to the video file, which can be used inside an\n  HTML 5 \nvideo\n tag and supports CORS.\n\n\n\n\nThe tasks created with the Dropbox importer are ready to be used with the template project presenters available in PYBOSSA, as they include the described fields.\n\n\nThus, importing your images from Dropbox will allow you to use the image pattern recognition template with them immediately. If you import videos, audio files or PDFs  you will also be able to use the presenter templates for video pattern recognition, sound pattern recognition or documents transcription, respectively, with no additional modifications and have them working right away (as long as the files have any of the mentioned file extensions, of course).\n\n\nFor using this importer, just follow these are the steps:\n\n\n\n\nNavigate to your project\ns page and click in the \nTasks\n section.\n\n\nThen click on the \nImport Tasks\n button, and select the \nDropbox importer\n.\n\n\nClick on the \nChoose from Dropbox\n icon. You will be asked your    Dropbox account credentials. Then select as many files as you want:\n    \n\n\nYou can repeat step 3 as many times as you want, and more files will be added to your import. Then, click on \nImport.\n\n\n\n\n\n\nNote\n\n\nFor enabling the Dropbox importer, check this \nsection\n.\n\n\n\n\nImporting tasks from an Amazon S3 bucket\n\n\nTasks can be imported from data hosted on the Amazon S3 service.\nSimilarly to the Dropbox importer, these tasks can use different kind of data, like images, videos, audios, PDF files, etc. hosted on any S3\nbucket.\n\n\nThe S3 importer will work pretty much the same as the Dropbox one. When using it, the created tasks will contain the following data in the info field:\n\n\n\n\nfilename: just it, the name of the file you\nre importing as a task.\n\n\nlink: the link to the raw file served from Amazon S3.\n\n\nURL: same as the above.\n\n\n\n\nIn addition to this generic information, the S3 importer will also\nrecognize some files by their extension and will attach some extra information to them.\n\n\nFor pdf files (.pdf extension), the following field will be obtained\ntoo:\n\n\n\n\npdf_url: direct link to the raw pdf file.\n\n\n\n\nFor image files (.png, jpg, .jpeg and .gif extensions) the following\ndata will be available:\n\n\n\n\nurl_m: the same as the link.\n\n\nurl_b: the same as the link.\n\n\ntitle: the same as the filename.\n\n\n\n\nFor audio files (.mp4, .m4a, .mp3, .ogg, .oga, .webm and .wav\nextensions):\n\n\n\n\naudio_url: raw link to the audio file, which can be used inside an\n  HTML 5 \n tag.\n\n\n\n\nFor video files (.mp4, .m4v, .ogg, .ogv, .webm and .avi extensions):\n\n\n\n\naudio_url: raw link to the video file, which can be used inside an\n  HTML 5 \n tag.\n\n\n\n\nThe tasks created with the S3 importer are ready to be used with the\ntemplate project presenters available in PYBOSSA, as they include the described fields.\n\n\nThus, importing your images from S3 will allow you to use the image pattern recognition template with them immediately. If you import videos, audio files or PDFs  you will also be able to use the presenter templates for video pattern recognition, sound pattern recognition or documents transcription, respectively, with no additional modifications and have them working right away (as long as the files have any of the mentioned file extensions, of course).\n\n\nImporting from an S3 bucket requires that the bucket visibility is set to \npublic\n so its content can be seen and listed by PYBOSSA. To make a bucket public, go to your AWS management console and select the S3 service. Then select the bucket you want to make public and click on \nProperties.\n Click on \nAdd more Permissions\n and add a new one with \nGrantee: Everyone\n and the \nList\n checkbox selected, like in the following image:\n\n\n\n\nYou may also need to enable CORS in the bucket. In the same menu as above, click on \nEdit CORS Configuration\n and configure it. You can\nlearn more \nhere\n.\n\n\nFinally, you need to make sure that every file inside the bucket that\nyou want to use in a task has a \npublic\n link too. Go to the bucket\ncontent and select the files. Then click on \nActions\n and select \nMake\nPublic\n. Your files will now be visible for everyone, including a\nPYBOSSA server.\n\n\n\n\nOnce your S3 bucket is ready, you can follow these steps to import tasks from it:\n\n\n\n\nNavigate to your project\ns page and click in the \nTasks\n section.\n\n\nThen click on the \nImport Tasks\n button, and select the \nS3\n   importer\n.\n\n\n\n\nType the name of the bucket from which you will be importing your tasks and click on \nSearch in the bucket.\n If you followed the steps above and your bucket is public, you will see a list of the items it contains. Select as many as you want:\n\n\n\n\n\n\n\n\nWhen you\nre ready, click on \nImport.\n\n\n\n\n\n\nImporting the tasks from Youtube\n\n\nTasks can be imported from Youtube. Currently, the importer supports importing from Youtube with:\n\n\n\n\nPlaylists\n\n\n\n\nWhen importing the video, the importer parses all videos information and creates tasks with info fields:\n\n\n\n\nvideo_url: the URL of the youtube video which can be embedded in\n  the task form.\n\n\noembed: embeddable code for the (old) PYBOSSA video templates.\n\n\n\n\nThe tasks created with the Youtube importer are ready to be used with the youtube and video templates.\n\n\n\n\nNote\n\n\nFor enabling the Youtube importer, check this \nsection\n.\n\n\n\n\nImporting the tasks from a IIIF manifest\n\n\nThe \nInternational Image Interoperability Framework (IIIF)\n is a protocol for standardized image retrieval created by a community of the world\ns leading research libraries, major national libraries and not-for-profit image repositories in an effort to collaboratively produce an interoperable technology and community framework for image delivery.\n\n\nContent made available via the \nIIIF Presentation API\n can be imported into PyBossa by passing the URI of a manifest. All images for all canvases defined in the first sequence of the manifest will be imported. In practice, this means that all images will be imported in their default order and each image used to generate a single task.\n\n\nEach task will include a reference to the canvas ID, the manifest ID, the tile source for the image and URIs to request different sizes of the image from the \nIIIF Image API\n.\n\n\nHere are the steps to import:\n\n\n\n\nNavigate to your project\ns page and click in the \nTasks\n section.\n\n\nThen click on the \nImport Tasks\n button, and select the \nIIIF importer\n.\n\n\nType the URI of the IIIF manifest that you want to import from, then click on the import button.\n\n\n\n\nFlushing all the tasks\n\n\nThe project settings gives you an option to automatically \ndelete all\nthe tasks and associated task volunteer\n from your project.\n\n\n\n\nDanger\n\n\nThis action cannot be undone, so please, be sure that you want to actually, delete all the tasks.\n\n\n\n\n\n\nWarning\n\n\nThis action will only allow you to delete tasks that are not associated with a result. When a result is created, that task and its task runs cannot be deleted so the volunteers can always have access to their contributions.\n\n\n\n\nIf you are sure that you want to flush all the tasks and task runs for\nyour project, go to the project page (http://server/project/slug/tasks/) and click on the \nSettings\n option of the left local navigation menu:\n\n\n\n\nThen, you will see that there is a subsection called: \nTask Settings\n and a button with the label: \nDelete the tasks\n. Click on that button and a new page will be shown:\n\n\n\n\nAs you can see, a \nred warning alert\n is shown, warning you that if\nyou click on the \nyes\n button, you will be deleting not only the\nproject tasks but also the answers (task runs) that you have\nrecollected for your project. Be sure before proceeding that you want to delete all the tasks. After clicking on the \nyes\n button, you will see that all the tasks have been flushed.\n\n\nCreating the Task Presenter\n\n\nOnce you have the project and you have imported some tasks, you can start working with the task-presenter, which will be the web project that will get the tasks of your project, present them to the volunteer and save the answers provided by the users.\n\n\nIf you have followed all the steps described in this section, you will\nbe already on the page of your project, however, if you are not, you only need to access your project URL to work with your project. If  your project \nslug\n or \nshort name\n is \nflickrperson\n you will be able to access the project managing options in this URL:\n\n\n1\nhttp://PYBOSSA-SERVER/project/flickrperson\n\n\n\n\n\n\n\n\nNote\n\n\nYou need to be logged in. Otherwise, you will not be able to modify the project.\n\n\n\n\nAnother way of accessing your project (or projects) is clicking on your \nusername\n (at the navbar) and select the \nMy Projects\n item from the but it menu. From there you will be able to manage your projects:\n\n\n\n\n\n\nOnce you have chosen your project, you can add a task-presenter by\nclicking on the \nTasks\n local navigation link, and then clicking on the button named \nEditor\n under the \nTask Presenter\n box.\n\n\n\n\nAfter clicking this button, a new web page will be shown where you\ncan choose a template to start coding your project, so you don\nt have to start from scratch.\n\n\n\n\nAfter choosing one of the templates, you will be able to adapt it to fit\nyour project needs in a web text editor.\n\n\n\n\nClick on the \nPreview button\n to get an idea of how it will look\nlike your task-presenter.\n\n\n\n\nWe recommend reading the \nStep by step tutorial\n as you will understand how to create the task presenter, which explains how you can add some HTML skeleton to load the task data, input fields to get the answer from the users, and some JavaScript to make it work.\n\n\nPublishing the project\n\n\nAfter completing the previous three steps, your project will be almost ready. The final step is to publish it, because now it will still be a draft, and it will be hidden to everyone but you (and admins).\n\n\nWhen your project is a draft, you can contribute to it, and the answers (task runs) and results will be stored in the database so you can have access to them (and test the webhooks solution if you want to do real-time analysis). However, in the moment of publishing the project all the task runs and results (as well as the webhooks log entries) will be flushed, so don\nt be afraid and try it as much as you can until you are sure that everything works as expected. Once you think the project is ready for the world to see it, just click on the Publish button:\n\n\n\n\n\n\nNote\n\n\nPublishing a project \ncannot\n be undone, so please double check everything before taking the step.\n\n\n\n\n\n\nNote\n\n\nYou can allow other users to give you feedback and let them try and see your project before it has been published. To do it so, just protect it with a password, and people will be able to access it (as long as they have the password, of course).\n\n\n\n\nAfter publishing it, you will be able to access your project using the\nslug, or under your account in the \nPublished\n projects section.\n\n\nAlso, results will begin to be created every time a task is completed.\nEnjoy!\n\n\nUsing the API\n\n\nCreating a project using the API involves these steps:\n\n\n\n\nCreate the project,\n\n\nCreate the tasks for the project, and\n\n\nCreate the task-presenter for the users.\n\n\nPublish it. This needs to be done via the web interface.\n\n\n\n\nCreating the project\n\n\nYou can create a project via the API URL \n/api/project\n with a POST request (See \napi\n).\n\n\nYou have to provide the following information about the project and\nconvert it to a JSON object (the actual values are taken from the\n\nFlickr Person demo project\n):\n\n\n1\n2\n3\n4\n5\n6\nname\n \n=\n \nu\nFlickr\n \nPerson\n \nFinder\n\n\nshort_name\n \n=\n \nu\nFlickrPerson\n\n\ndescription\n \n=\n \nu\nDo\n \nyou\n \nsee\n \na\n \nhuman\n \nin\n \nthis\n \nphoto?\n\n\ninfo\n \n=\n \n{\n \ntask_presenter\n:\n \nu\ndiv\n \nSkeleton\n \nfor\n \nthe\n \ntasks\n/div\n \n}\n\n\ndata\n \n=\n \ndict(name\n \n=\n \nname,\n \nshort_name\n \n=\n \nshort_name,\n \ndescription\n \n=\n \ndescription,\n \ninfo\n \n=\n \ninfo,\n \nhidden\n \n=\n \n0\n)\n\n\ndata\n \n=\n \njson.dumps(data)\n\n\n\n\n\n\n\nFlickr Person Finder, which is a \ndemo template\n that \nyou can\nre-use\n to create your own project, simplifies this step by using a\nsimple file named \nproject.json\n:\n\n\n1\n2\n3\n4\n5\n{\n\n\nname\n:\n \nFlickr Person Finder\n,\n\n\nshort_name\n:\n \nflickrperson\n,\n\n\ndescription\n:\n \nImage pattern recognition\n,\n\n\n}\n\n\n\n\n\n\n\nThe file provides the basic configuration for your project.\n\n\nAdding tasks\n\n\nAs in all the previous steps, we are going to create a JSON object and\nPOST it using the following API URL \n/api/task\n to add tasks\nto a project that you own.\n\n\nFor PYBOSSA all the tasks are JSON objects with a field named \ninfo\n where the owners of the project can add any JSON object that will represent a task for their project. For example, using again the \nFlickr Person demo project\n template, we need to create a JSON object that should have the link to the photo that we want to identify:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\ninfo\n \n=\n \ndict\n \n(\nlink\n=\nphoto\n[\nlink\n],\n\n             \nurl\n=\nphoto\n[\nurl_m\n],\n\n             \nquestion\n=\nDo you see a human face in this photo?\n)\n\n\ndata\n \n=\n \ndict\n \n(\nproject_id\n=\nproject_id\n,\n\n             \nstate\n=\n0\n,\n\n             \ninfo\n=\ninfo\n,\n\n             \ncalibration\n=\n0\n,\n\n             \npriority_0\n=\n0\n)\n\n\ndata\n \n=\n \njson\n.\ndumps\n(\ndata\n)\n\n\n\n\n\n\n\n\n\nNote\n\n\nurl_m\n is a pattern to describe the URL to the \nm\n medium size of the photo used by Flickr. It can be whatever you want, but as we are using Flickr, we use the same patterns for storing the data.\n\n\n\n\nThe most important field for the task is the \ninfo\n one. This field\nwill be used to store a JSON object with the required data for the task. As \nFlickr Person\n is trying to figure out if there is a human or not in a photo, the provided information is:\n\n\n\n\nthe Flickr web page posting the photo, and\n\n\nthe direct URL to the image, the \n value.\n\n\n\n\nThe \ninfo\n field is a free-form field that can be populated with any\nstructure. If your project needs more fields, you can add them and use the format that best fits your needs.\n\n\nThese steps are usually coded in a script. The Flickr Person\nFinder projects provides a template for the task-creator that can be\nre-used without any problems (check the createTasks.py script).\n\n\n\n\nNote\n\n\nThe API request has to be authenticated and authorized\n. You can get an API-KEY creating an account on the server, and check the API-KEY created for your user, check the profile account (click on your username) and copy the field \nAPI-KEY\n.\n\n\nThis API-KEY should be passed as a POST argument like this with the previous data:\n\n\n[POST] \nhttp://domain/api/task/?api_key=API-KEY\n\n\n\n\nOne of the benefits of using the API is that you can create tasks\npolling other web services like Flickr, where you can use an\nAPI. Once we have created the tasks, we will need to create the\ntask-presenter for the project.\n\n\nCreating the Task Presenter\n\n\nThe task-presenter is usually a template of HTML and JavaScript that will present the tasks to the users, and save the answers in the\ndatabase. The \nFlickr Person demo project\n provides a template which has a \n to load the input files, in this case, the photo, and another \n to load the action buttons that the users will be able to press to answer the question and save it in the database. Please, check the \ntutorial\n for more details about the task-presenter.\n\n\nAs we will be using the API for creating the task presenter, we will have to create an HTML file in our computer, read it from a\na script, and post it into PYBOSSA using the API.\n\n\nOnce the presenter has been posted to the project, you can edit it\nlocally with your editor, or using the PYBOSSA interface (see\nprevious section).\n\n\n\n\nNote\n\n\nThe API request has to be authenticated and authorized\n. You can get an API-KEY creating an account on the server, and check the API-KEY created for your user, check the profile account (click on your user name) and copy the field \nAPI-KEY\n.\n\n\nThis API-KEY should be passed as a POST argument like this with the previous data: [POST] \nhttp://domain/api/project/?api_key=API-KEY\n\n\n\n\nUsing PYBOSSA API from the command line\n\n\nWhile you can use your preferred programming language to access the API, we recommend you to use the \nPYBOSSA PBS command line\ntool\n as it simplifies the usage of\nPYBOSSA for any given project.\n\n\nCreating a project is as simple as creating a project.json file and then\nrun the following command:\n\n\n1\npbs --server server --api-key yourkey create_project\n\n\n\n\nPlease, read the \npbs section\n for more details.", 
            "title": "Quickstart: Creating a project"
        }, 
        {
            "location": "/build/overview/#quickstart-creating-a-project", 
            "text": "This is a short guide on how you can create a PYBOSSA project. You may wish to start with the  step by step tutorial ; which walks through creating a simple photo classification project if you want to understand all the details about how a project works.  First of all, we have to create a project for the project. To create a project, you will have to provide the following information:   Name ,  Short name  or  slug , and  Description   The  slug  or  short name  is a shortcut for accessing the project\nvia the web (short URLs like this  http://domain.com/project/slug ).  The  description  is a short sentence that will be used to describe\nyour project (think about it as a Tweet long description).  A project can be created using two different methods:   web interface, or  API interface.", 
            "title": "Quickstart: Creating a Project"
        }, 
        {
            "location": "/build/overview/#using-the-web-interface", 
            "text": "Creating a project using the web interface involves four steps:   Building the project,  Import the tasks using one of the available  task importers ,  Write the task-presenter for the users, and  Publish the project.", 
            "title": "Using the Web Interface"
        }, 
        {
            "location": "/build/overview/#creating-the-project", 
            "text": "To create a project using the web interface you have\nto:", 
            "title": "Creating the project"
        }, 
        {
            "location": "/build/overview/#create-a-pybossa-account", 
            "text": "You can create an account filling a form.   You can also set preferences for language, location, area of expertise(termed as user type) and set metadata for the account. For this, pybossa server need to be configured with new settings; sample for same can be obtained from pybossa/settings_upref_mdata.py.tmpl. Rename settings_upref_mdata.py.tmpl to settings_upref_mdata.py and copy it under folder containing settings_local.py. With this, contents of settings_upref_mdata.py will be available on account filling form.   User preference/metedata set for the account can viewed and modified under account profile page.", 
            "title": "Create a PYBOSSA account"
        }, 
        {
            "location": "/build/overview/#creating-the-project_1", 
            "text": "Once you have an account, click in  create the ** link of the navigation bar. After clicking on the previous link, you will have to fill in a    form with the fundamental information to create your project:\n    1.  **Name : the full name of your project, i.e.,  Flickr Person\n        Finder .\n    2.   Short Name : the  slug  or short name used in the URL for         accessing your project, i.e.,  flickrperson .\n    3.   Long Description : A  long  description where you can use\n        Markdown to format the description of your project. This field\n        is usually used to provide information about the project, the\n        developer, the researcher group or institutions involved in the\n        project, etc.    Note  PYBOSSA usually provides two Project Categories by default:  thinking  and  sensing . The  thinking  category represents the standard PYBOSSA project where users contribute helping with their skills.  Sensing  category refers to projects that are using volunteer sensing tools like EpiCollect or Raspberry Pi with PYBOSSA for gathering data.   Once you have filled all the fields, click in the  Create the project  button, and you will have created your first project   After creating the project, you should be redirected to the  Settings   project page, where you will be able to customize your project by adding some extra information or changing some settings. There, you will find a form with the same fields as in the previous step (just in case you ve changed your mind and wanted to change any of them) plus the following:   Description : A  short  description of the project, e.g.,  A    project to classify cancer cells . By default, this field is automatically populated with the information that you provided in the  Long description  field.  Allow Anonymous Contributors : By default, anonymous and authenticated users can participate in all the projects. However, you can change it only to allow authenticated volunteers to participate.  Password : If you want to control who can access your project, you can set a password here to share with those you allow to do it. If you leave it blank, then no password will protect your project.  Category : Select a category that fits your project. Categories\n   are added and managed by the server administrators.    Note  Also, you will be able to select and upload a  image  from your local computer to set it as the project image throughout the server.", 
            "title": "Creating the project"
        }, 
        {
            "location": "/build/overview/#importing-the-tasks-via-the-built-in-csv-task-importer", 
            "text": "Tasks can be imported from different services like Dropbox or Amazon S3 via the importers. To use one, just do the following:\n1. Navigate to your project s page (you can directly access it using\n   the  slug  project name:  http://server/project/slug ).\n2. Click in the  Tasks  section -on the left side local navigation\n   menu:    And click again on the  Import Tasks  card. After clicking on it, you will see several options. The first ones are for using the different kinds of importers supported by PYBOSSA: Amazon S3, Dropbox, Youtube, Google Spreadsheet, CSV URL, IIIF, and EpiCollect Plus.   The other importers are very similar. In most cases, you ll provide a URL to the resource, like for the CSV and Google Spreadsheet importer, while the Dropbox, Amazon S3, Youtube, and EpiCollect Plus importers will have a friendly interface to import data automagically for you.   Note  If you re trying to import from a Google Spreadsheet, ensure the file is accessible to everyone via the Share option, choosing:  Public on the web - Anyone on the Internet can find and view.    Note  Your spreadsheet/CSV file must contain a header row. All the fields in the CSV will be serialized to JSON and stored in the  info  field. If your field name is one of  state ,  quorum ,  calibration ,     priority_0 , or  n_answers , it will be saved in the respective     columns. Your spreadsheet must be visible to the public or everyone with an URL.   In the Task Importer section, you ll also find other pre-loaded Google Spreadsheets URLs. Those templates are examples that you can use to learn how to create your spreadsheets and import data for image,\nsound, video, pdf mining and mapping projects.   By using these templates, you ll be able to learn the structure of the\ntasks, and directly re-use the task-presenter templates that know the\nstructure (name of the columns) for presenting the task.  Additionally, you can re-use the templates by downloading the CSV files from Google Docs, or even copying them to your own Google Drive account (click in  File     Make a copy  in the Google Doc Spreadsheet). Scifabric provides the following templates:   Image Pattern Recognition  Sound Pattern Recognition  Video Pattern Recognition  Geo-coding \n  and  PDF transcription .    Tip  If you import the same URL again, only new records will be added to the project.", 
            "title": "Importing the tasks via the built-in CSV Task Importer"
        }, 
        {
            "location": "/build/overview/#importing-the-tasks-from-an-epicollect-plus-public-project", 
            "text": "EpiCollect  provides a web tool for the\ngeneration of forms for many kinds of mobile data collection projects.  Data can be collected using multiple mobile phones running either the Android Operating system or the iPhone (using the EpiCollect mobile app), and all data can be synchronized from the phones and viewed centrally (using Google Maps) via the Project website or directly on the phones.  EpiCollect can help you to recollect data samples according to a form that could include multimedia like photos. Moreover, EpiCollect can geolocate the data sample as it supports the built-in GPS that all modern smartphones have.  For example, you can create an EpiCollect project where the form will ask the user to take a picture of a lake, geo-locate it automatically via the built-in smartphone GPS and upload the image to the EpiCollect server. If the user does not have Internet access at that moment, the user will be able to synchronize the data afterward, i.e., when the user has access to an Internet WIFI hotspot.  PYBOSSA can automatically import data from a public EpiCollect Plus project that you own or that it is publicly available on the\nwebsite. Then you will be able to validate, analyze, etc. the data that has been obtained via EpiCollect.  If you want to import the data points submitted to a  public \nEpiCollect project, you will have to follow the next steps:   Navigate to your project s page (you can directly access it using\n   the  slug  project name:  http://server/project/slug ).  Click in the  Tasks  section -on the left side local navigation\n   menu.  And click on the  Import Tasks  button. After clicking on it you\n   will see several different options.  Click on the  Use an EpiCollect Project  one.\n      Then, type the  name of the EpiCollect project  and the name of the  form  that you want to import and click on the import button.   All the data points should be imported now in your project.   Note  EpiCollect projects will be gathering data mostly all the time, for this reason, if you import again the same EpiCollect project, only   new data points  will be imported. This feature will allow you to easily add new data points to the PYBOSSA project without having to do anything special.", 
            "title": "Importing the tasks from an EpiCollect Plus Public Project"
        }, 
        {
            "location": "/build/overview/#importing-the-tasks-from-a-flickr-photo-set", 
            "text": "PYBOSSA also allows importing tasks for projects based on images (like image pattern recognition ones) directly from a  Flickr  [set] https://www.flickr.com/help/photos/#150321191 ) (also called\nalbum).  When importing tasks from a Flickr set, a new task will be created for each of the photos in the specified set. The tasks will include the\nfollowing data about each picture (which will be later available to be\nused in the task presenter):   title: the title of the photograph, as it appears on Flickr.  URL: the URL to the raw .jpg image, in its original size.  url_b: the URL to the image,  big sized.  url_m: the URL to the image,  medium  sized.  link: a link to the photo page on Flickr (not to the raw image).   You can import tasks from a Flickr photo set (a.k.a. album) in either of the following ways: using your Flickr account, or by typing the album ID.  The easiest one is to give the PYBOSSA server permission to access your Flickr list of albums. To do so, you ll have to log in to your Flickr\naccount by clicking the  Log in Flickr  button. Then you ll be\nredirected to Flickr, where you will be asked if you want to allow\nPYBOSSA to access your Flickr information. If you say yes, then you ll be again redirected to PYBOSSA, and you ll see all of your albums. Choose one of them and then click the  Import  button to get all the photos created as tasks for your project.   Note  Next time you try to import photos using the Flickr importer, you ll see the albums for your account again. If you don t want PYBOSSA to access them anymore, or just want to use another Flickr account, then click  Revoke access.   Another option to import from a Flickr album is by specifying the ID of the set (collection) directly. This option is a bit more advanced, but  it allows you to import from a photo set that you don t own (although, it will have to be public. Also check the rights of the photos on it!). Another advantage is that you don t need to log in to Flickr, so you don t even need to have a Flickr account.  These are the steps:   Navigate to your project s page and click in the  Tasks  section.  Then click on the  Import Tasks  button, and select the  Flickr\n   importer .  Type the ID of the Flickr set you want to import the photos from, then click on the import button.    If you cannot find the ID or don t know which one it is, just browse to the Flickr photo set and check the URL. Can you see that last long number right at the end of it? That s what you re looking for!   Just like with the other importers, each task will be created only once, even if you import twice from the same Flickr set (unless you add new photos to it, of course!).   Note  You will need to make sure that every photo belonging to the set has the visibility set to public, so the PYBOSSA server can then access and present them to the volunteers of your project.    Note  For enabling the Flickr importer, check this  section .", 
            "title": "Importing the tasks from a Flickr photo set"
        }, 
        {
            "location": "/build/overview/#importing-the-tasks-from-a-dropbox-account", 
            "text": "You can import tasks from arbitrary data hosted on a Dropbox account with the Dropbox importer. When you import tasks in this way, the following information will be added to the info field of each task, available later to be used in the task presenter of the project:   filename: just it, the name of the file you re importing as a task.  link: the link to the Dropbox page showing the file.  link_raw: the link to the raw file served by Dropbox. This is the\n  one you ll have to use if you want to direct link to the file from\n  the presenter (e.g., for using an image in a   tag, you d\n  do:  ).   In addition to this generic information, the Dropbox importer will also recognize some files by their extension and will attach some extra information to them.  For pdf files (.pdf extension), the following fields will be obtained\ntoo:   pdf_url: direct link to the raw pdf file, with CORS support.   For image files (.png, jpg, .jpeg and .gif extensions) the following\ndata will be available:   url_m: the same as link_raw  url_b: the same as link_raw  title: the same as the filename   For audio files (.mp4, .m4a, .mp3, .ogg, .oga, .webm and .wav\nextensions):   audio_url: raw link to the audio file, which can be used inside an\n  HTML 5  audio  tag and supports CORS.   For video files (.mp4, .m4v, .ogg, .ogv, .webm and .avi extensions):   audio_url: raw link to the video file, which can be used inside an\n  HTML 5  video  tag and supports CORS.   The tasks created with the Dropbox importer are ready to be used with the template project presenters available in PYBOSSA, as they include the described fields.  Thus, importing your images from Dropbox will allow you to use the image pattern recognition template with them immediately. If you import videos, audio files or PDFs  you will also be able to use the presenter templates for video pattern recognition, sound pattern recognition or documents transcription, respectively, with no additional modifications and have them working right away (as long as the files have any of the mentioned file extensions, of course).  For using this importer, just follow these are the steps:   Navigate to your project s page and click in the  Tasks  section.  Then click on the  Import Tasks  button, and select the  Dropbox importer .  Click on the  Choose from Dropbox  icon. You will be asked your    Dropbox account credentials. Then select as many files as you want:\n      You can repeat step 3 as many times as you want, and more files will be added to your import. Then, click on  Import.    Note  For enabling the Dropbox importer, check this  section .", 
            "title": "Importing the tasks from a Dropbox account"
        }, 
        {
            "location": "/build/overview/#importing-tasks-from-an-amazon-s3-bucket", 
            "text": "Tasks can be imported from data hosted on the Amazon S3 service.\nSimilarly to the Dropbox importer, these tasks can use different kind of data, like images, videos, audios, PDF files, etc. hosted on any S3\nbucket.  The S3 importer will work pretty much the same as the Dropbox one. When using it, the created tasks will contain the following data in the info field:   filename: just it, the name of the file you re importing as a task.  link: the link to the raw file served from Amazon S3.  URL: same as the above.   In addition to this generic information, the S3 importer will also\nrecognize some files by their extension and will attach some extra information to them.  For pdf files (.pdf extension), the following field will be obtained\ntoo:   pdf_url: direct link to the raw pdf file.   For image files (.png, jpg, .jpeg and .gif extensions) the following\ndata will be available:   url_m: the same as the link.  url_b: the same as the link.  title: the same as the filename.   For audio files (.mp4, .m4a, .mp3, .ogg, .oga, .webm and .wav\nextensions):   audio_url: raw link to the audio file, which can be used inside an\n  HTML 5   tag.   For video files (.mp4, .m4v, .ogg, .ogv, .webm and .avi extensions):   audio_url: raw link to the video file, which can be used inside an\n  HTML 5   tag.   The tasks created with the S3 importer are ready to be used with the\ntemplate project presenters available in PYBOSSA, as they include the described fields.  Thus, importing your images from S3 will allow you to use the image pattern recognition template with them immediately. If you import videos, audio files or PDFs  you will also be able to use the presenter templates for video pattern recognition, sound pattern recognition or documents transcription, respectively, with no additional modifications and have them working right away (as long as the files have any of the mentioned file extensions, of course).  Importing from an S3 bucket requires that the bucket visibility is set to  public  so its content can be seen and listed by PYBOSSA. To make a bucket public, go to your AWS management console and select the S3 service. Then select the bucket you want to make public and click on  Properties.  Click on  Add more Permissions  and add a new one with  Grantee: Everyone  and the  List  checkbox selected, like in the following image:   You may also need to enable CORS in the bucket. In the same menu as above, click on  Edit CORS Configuration  and configure it. You can\nlearn more  here .  Finally, you need to make sure that every file inside the bucket that\nyou want to use in a task has a  public  link too. Go to the bucket\ncontent and select the files. Then click on  Actions  and select  Make\nPublic . Your files will now be visible for everyone, including a\nPYBOSSA server.   Once your S3 bucket is ready, you can follow these steps to import tasks from it:   Navigate to your project s page and click in the  Tasks  section.  Then click on the  Import Tasks  button, and select the  S3\n   importer .   Type the name of the bucket from which you will be importing your tasks and click on  Search in the bucket.  If you followed the steps above and your bucket is public, you will see a list of the items it contains. Select as many as you want:     When you re ready, click on  Import.", 
            "title": "Importing tasks from an Amazon S3 bucket"
        }, 
        {
            "location": "/build/overview/#importing-the-tasks-from-youtube", 
            "text": "Tasks can be imported from Youtube. Currently, the importer supports importing from Youtube with:   Playlists   When importing the video, the importer parses all videos information and creates tasks with info fields:   video_url: the URL of the youtube video which can be embedded in\n  the task form.  oembed: embeddable code for the (old) PYBOSSA video templates.   The tasks created with the Youtube importer are ready to be used with the youtube and video templates.   Note  For enabling the Youtube importer, check this  section .", 
            "title": "Importing the tasks from Youtube"
        }, 
        {
            "location": "/build/overview/#importing-the-tasks-from-a-iiif-manifest", 
            "text": "The  International Image Interoperability Framework (IIIF)  is a protocol for standardized image retrieval created by a community of the world s leading research libraries, major national libraries and not-for-profit image repositories in an effort to collaboratively produce an interoperable technology and community framework for image delivery.  Content made available via the  IIIF Presentation API  can be imported into PyBossa by passing the URI of a manifest. All images for all canvases defined in the first sequence of the manifest will be imported. In practice, this means that all images will be imported in their default order and each image used to generate a single task.  Each task will include a reference to the canvas ID, the manifest ID, the tile source for the image and URIs to request different sizes of the image from the  IIIF Image API .  Here are the steps to import:   Navigate to your project s page and click in the  Tasks  section.  Then click on the  Import Tasks  button, and select the  IIIF importer .  Type the URI of the IIIF manifest that you want to import from, then click on the import button.", 
            "title": "Importing the tasks from a IIIF manifest"
        }, 
        {
            "location": "/build/overview/#flushing-all-the-tasks", 
            "text": "The project settings gives you an option to automatically  delete all\nthe tasks and associated task volunteer  from your project.   Danger  This action cannot be undone, so please, be sure that you want to actually, delete all the tasks.    Warning  This action will only allow you to delete tasks that are not associated with a result. When a result is created, that task and its task runs cannot be deleted so the volunteers can always have access to their contributions.   If you are sure that you want to flush all the tasks and task runs for\nyour project, go to the project page (http://server/project/slug/tasks/) and click on the  Settings  option of the left local navigation menu:   Then, you will see that there is a subsection called:  Task Settings  and a button with the label:  Delete the tasks . Click on that button and a new page will be shown:   As you can see, a  red warning alert  is shown, warning you that if\nyou click on the  yes  button, you will be deleting not only the\nproject tasks but also the answers (task runs) that you have\nrecollected for your project. Be sure before proceeding that you want to delete all the tasks. After clicking on the  yes  button, you will see that all the tasks have been flushed.", 
            "title": "Flushing all the tasks"
        }, 
        {
            "location": "/build/overview/#creating-the-task-presenter", 
            "text": "Once you have the project and you have imported some tasks, you can start working with the task-presenter, which will be the web project that will get the tasks of your project, present them to the volunteer and save the answers provided by the users.  If you have followed all the steps described in this section, you will\nbe already on the page of your project, however, if you are not, you only need to access your project URL to work with your project. If  your project  slug  or  short name  is  flickrperson  you will be able to access the project managing options in this URL:  1 http://PYBOSSA-SERVER/project/flickrperson    Note  You need to be logged in. Otherwise, you will not be able to modify the project.   Another way of accessing your project (or projects) is clicking on your  username  (at the navbar) and select the  My Projects  item from the but it menu. From there you will be able to manage your projects:    Once you have chosen your project, you can add a task-presenter by\nclicking on the  Tasks  local navigation link, and then clicking on the button named  Editor  under the  Task Presenter  box.   After clicking this button, a new web page will be shown where you\ncan choose a template to start coding your project, so you don t have to start from scratch.   After choosing one of the templates, you will be able to adapt it to fit\nyour project needs in a web text editor.   Click on the  Preview button  to get an idea of how it will look\nlike your task-presenter.   We recommend reading the  Step by step tutorial  as you will understand how to create the task presenter, which explains how you can add some HTML skeleton to load the task data, input fields to get the answer from the users, and some JavaScript to make it work.", 
            "title": "Creating the Task Presenter"
        }, 
        {
            "location": "/build/overview/#publishing-the-project", 
            "text": "After completing the previous three steps, your project will be almost ready. The final step is to publish it, because now it will still be a draft, and it will be hidden to everyone but you (and admins).  When your project is a draft, you can contribute to it, and the answers (task runs) and results will be stored in the database so you can have access to them (and test the webhooks solution if you want to do real-time analysis). However, in the moment of publishing the project all the task runs and results (as well as the webhooks log entries) will be flushed, so don t be afraid and try it as much as you can until you are sure that everything works as expected. Once you think the project is ready for the world to see it, just click on the Publish button:    Note  Publishing a project  cannot  be undone, so please double check everything before taking the step.    Note  You can allow other users to give you feedback and let them try and see your project before it has been published. To do it so, just protect it with a password, and people will be able to access it (as long as they have the password, of course).   After publishing it, you will be able to access your project using the\nslug, or under your account in the  Published  projects section.  Also, results will begin to be created every time a task is completed.\nEnjoy!", 
            "title": "Publishing the project"
        }, 
        {
            "location": "/build/overview/#using-the-api", 
            "text": "Creating a project using the API involves these steps:   Create the project,  Create the tasks for the project, and  Create the task-presenter for the users.  Publish it. This needs to be done via the web interface.", 
            "title": "Using the API"
        }, 
        {
            "location": "/build/overview/#creating-the-project_2", 
            "text": "You can create a project via the API URL  /api/project  with a POST request (See  api ).  You have to provide the following information about the project and\nconvert it to a JSON object (the actual values are taken from the Flickr Person demo project ):  1\n2\n3\n4\n5\n6 name   =   u Flickr   Person   Finder  short_name   =   u FlickrPerson  description   =   u Do   you   see   a   human   in   this   photo?  info   =   {   task_presenter :   u div   Skeleton   for   the   tasks /div   }  data   =   dict(name   =   name,   short_name   =   short_name,   description   =   description,   info   =   info,   hidden   =   0 )  data   =   json.dumps(data)    Flickr Person Finder, which is a  demo template  that  you can\nre-use  to create your own project, simplifies this step by using a\nsimple file named  project.json :  1\n2\n3\n4\n5 {  name :   Flickr Person Finder ,  short_name :   flickrperson ,  description :   Image pattern recognition ,  }    The file provides the basic configuration for your project.", 
            "title": "Creating the project"
        }, 
        {
            "location": "/build/overview/#adding-tasks", 
            "text": "As in all the previous steps, we are going to create a JSON object and\nPOST it using the following API URL  /api/task  to add tasks\nto a project that you own.  For PYBOSSA all the tasks are JSON objects with a field named  info  where the owners of the project can add any JSON object that will represent a task for their project. For example, using again the  Flickr Person demo project  template, we need to create a JSON object that should have the link to the photo that we want to identify:  1\n2\n3\n4\n5\n6\n7\n8\n9 info   =   dict   ( link = photo [ link ], \n              url = photo [ url_m ], \n              question = Do you see a human face in this photo? )  data   =   dict   ( project_id = project_id , \n              state = 0 , \n              info = info , \n              calibration = 0 , \n              priority_0 = 0 )  data   =   json . dumps ( data )     Note  url_m  is a pattern to describe the URL to the  m  medium size of the photo used by Flickr. It can be whatever you want, but as we are using Flickr, we use the same patterns for storing the data.   The most important field for the task is the  info  one. This field\nwill be used to store a JSON object with the required data for the task. As  Flickr Person  is trying to figure out if there is a human or not in a photo, the provided information is:   the Flickr web page posting the photo, and  the direct URL to the image, the   value.   The  info  field is a free-form field that can be populated with any\nstructure. If your project needs more fields, you can add them and use the format that best fits your needs.  These steps are usually coded in a script. The Flickr Person\nFinder projects provides a template for the task-creator that can be\nre-used without any problems (check the createTasks.py script).   Note  The API request has to be authenticated and authorized . You can get an API-KEY creating an account on the server, and check the API-KEY created for your user, check the profile account (click on your username) and copy the field  API-KEY .  This API-KEY should be passed as a POST argument like this with the previous data:  [POST]  http://domain/api/task/?api_key=API-KEY   One of the benefits of using the API is that you can create tasks\npolling other web services like Flickr, where you can use an\nAPI. Once we have created the tasks, we will need to create the\ntask-presenter for the project.", 
            "title": "Adding tasks"
        }, 
        {
            "location": "/build/overview/#creating-the-task-presenter_1", 
            "text": "The task-presenter is usually a template of HTML and JavaScript that will present the tasks to the users, and save the answers in the\ndatabase. The  Flickr Person demo project  provides a template which has a   to load the input files, in this case, the photo, and another   to load the action buttons that the users will be able to press to answer the question and save it in the database. Please, check the  tutorial  for more details about the task-presenter.  As we will be using the API for creating the task presenter, we will have to create an HTML file in our computer, read it from a\na script, and post it into PYBOSSA using the API.  Once the presenter has been posted to the project, you can edit it\nlocally with your editor, or using the PYBOSSA interface (see\nprevious section).   Note  The API request has to be authenticated and authorized . You can get an API-KEY creating an account on the server, and check the API-KEY created for your user, check the profile account (click on your user name) and copy the field  API-KEY .  This API-KEY should be passed as a POST argument like this with the previous data: [POST]  http://domain/api/project/?api_key=API-KEY", 
            "title": "Creating the Task Presenter"
        }, 
        {
            "location": "/build/overview/#using-pybossa-api-from-the-command-line", 
            "text": "While you can use your preferred programming language to access the API, we recommend you to use the  PYBOSSA PBS command line\ntool  as it simplifies the usage of\nPYBOSSA for any given project.  Creating a project is as simple as creating a project.json file and then\nrun the following command:  1 pbs --server server --api-key yourkey create_project  \nPlease, read the  pbs section  for more details.", 
            "title": "Using PYBOSSA API from the command line"
        }, 
        {
            "location": "/build/pbs/", 
            "text": "Using the command line\n\n\nIn this section we\nll learn how we can use the command line to interact with our project in a PYBOSSA server, using the command line tool: \nPBS\n built by Scifabric.\n\n\nPBS\n\n\nPBS\n is a simple command line interface to a PYBOSSA server. The command allows you to:\n\n\n\n\ncreate projects, \n\n\nadd tasks from a CSV, Excel or JSON file, \n\n\nshow progress when adding tasks\n\n\ndelete tasks,\n\n\nupdated redundancy for tasks, \n\n\nand update the project templates.\n\n\n\n\nInstallation\n\n\nPBS is available in Pypi so that you can install the software with pip:\n\n\n1\npip install pybossa-pbs\n\n\n\n\n\n\n\n\nNote\n\n\nWe recommend to use virtual environments to install new Python libraries and packages, so please, before installing the PBS command line tool consider using a virtual environment.\n\n\n\n\nIf you have all the dependencies, the package will be installed, and you will be able to use it from the command line. The command is \npbs\n.\n\n\nConfiguring PBS\n\n\nBy default, PBS does not need a config file. However, you will have to specify for every command the server and your API key to add tasks, create a project, etc. For determining the server and API key\nthat you want to use, all you have to do is pass it as an argument:\n\n\n1\npbs --server http://server.com --api-key yourkey subcommand\n\n\n\n\n\n\nIf you work with two or more servers, then, remembering all the keys, and server URLs could be problematic, as well as you will be leaving a trace in your BASH history file. For this reason, pbs has a\nconfiguration file where you can add all the servers that you are\nworking with.\n\n\nTo create the config file, all you have to do is creating a\n\n.pybossa.cfg\n file in your home folder:\n\n\n1\n2\ncd\n ~\nvim .pybossa.cfg\n\n\n\n\n\n\nThe file should have the following structure:\n\n\n1\n2\n3\n[\ndefault\n]\n\n\nserver\n:\n \nhttps\n:\n//\ntheserver\n.\ncom\n\n\napikey\n:\n \nyourkey\n\n\n\n\n\n\n\nIf you are working with more servers, add another section below it. For example:\n\n\n1\n2\n3\n4\n5\n6\n7\n[\ndefault\n]\n\n\nserver\n:\n \nhttps\n:\n//\ntheserver\n.\ncom\n\n\napikey\n:\n \nyourkey\n\n\n\n[\nyourserver\n]\n\n\nserver\n:\n \nhttps\n:\n//\nyourserver\n.\norg\n\n\napikey\n:\n \nyourkeyinyourserver\n.\norg\n\n\n\n\n\n\n\nBy default, pbs will use the credentials of the default section, so you don\nt have to type anything to use those values. However, if you want to do actions on another server, all you have to do is the following:\n\n\n1\npbs --credentials yourserver --help\n\n\n\n\n\n\nThat command will use the values of the yourserver section.\n\n\nProject\n\n\nThis section shows how you can handle a project using PBS.\n\n\nCreating a project\n\n\nCreating a project is very simple. All you have to do is create a file\nnamed \nproject.json\n with the following fields:\n\n\n1\n2\n3\n4\n5\n{\n\n    \nname\n:\n \nFlickr Person Finder\n,\n\n    \nshort_name\n:\n \nflickrperson\n,\n\n    \ndescription\n:\n \nImage pattern recognition\n\n\n}\n\n\n\n\n\n\n\nIf you use the name \nproject.json\n you will not have to pass the file\nname via an argument, as it\ns the name used by default. Once you have the file created, run the following command:\n\n\n1\npbs create_project\n\n\n\n\n\n\nThat command should create the project. If you want to see all the\navailable options, please check the \nhelp\n command:\n\n\n1\npbs create_project --help\n\n\n\n\n\n\nUpdating templates\n\n\nNow that you have added tasks, you can work in your templates. All you have to do to add/update the templates of your project is running the following command:\n\n\n1\npbs update_project\n\n\n\n\n\n\nThat command needs to have in the same folder where you are running it, the following files:\n\n\n\n\ntemplate.html\n\n\nresults.html\n\n\nlong_description.md\n\n\ntutorial.html\n\n\n\n\nIf you want to use another template, just use these arguments:\n\n\n1\npbs update_project --template /tmp/template.html\n\n\n\n\n\n\nIf you want to see all the available options, please check the\n\nhelp\n command:\n\n\n1\npbs update_project --help\n\n\n\n\n\n\nUsing an external JavaScript file\n\n\nSince PBS \n= 2.3.0, PBS will check for an external JavaScript file named \nbundle.js\n or \nbundle.min.js\n. If any of those files exist, then, they will be added at the bottom of your template (like you have been doing so far with your projects).\n\n\nThis solution allows you to use for example webpack plus babel to transpile your code, minimize it and add it to your PYBOSSA project.\n\n\nTo use this solution, just transpile to a file named bundle.js or bundle.min.js.\n\n\n\n\nNote\n\n\nIf there\ns a minified version of the file, bundle.min.js, that file will always be used instead of bundle.js. \n\n\n\n\nAuto-updating while developing a PYBOSSA project\n\n\nAt some point, you will end up running lots of PBS update_project commands, as you will be using your chosen editor for fixing CSS, HTML or JavaScript. For these scenarios, PBS comes with a handy flag: \nwatch\n. This argument will tell PBS to run the update_project command automatically when bundle.js, bundle.min.js, template.html, tutorial.html or long_description.md are modified in the file system. As simple as that.\n\n\nYou can run it like this:\n\n\n1\n    pbs update_project --watch\n\n\n\n\n\n\nAnd the output will be similar to this:\n\n\n\n\n\n\nUsing webpack and PBS\n\n\nThis also works with bundle.js files. Thus, you can have webpack transpiling automatically your code, and PBS will update your project with the new code. Cheers \n\n\n\n\nTasks\n\n\nThis section shows how you can handle project\ns tasks.\n\n\nAdding tasks to a project\n\n\nAdding tasks is very simple. You can have your tasks in these formats:\n\n\n\n\nJSON\n\n\nCSV\n\n\nExcel (xlsx from 2010. It imports the first sheet)\n\n\nPO (any po file that you want to translate)\n\n\nPROPERTIES (any PROPERTIES file that you want to translate)\n\n\n\n\nTherefore, adding tasks to your project is as simple as this command:\n\n\n1\npbs add_tasks --tasks-file tasks_file.json\n\n\n\n\n\n\nIf you want to see all the available options, please check the\n\nhelp\n command:\n\n\n\n\nNote\n\n\nBy default, PYBOSSA servers use a rate limit for avoiding abuse of the API. For this reason, you can only do usually 300 requests per every 15 minutes. If you are going to add more than 300 tasks, pbs will detect it and warn you, auto-enabling the throttling for you to respect the limits. Please, see \nthe rate-limiting section\n for more details.\n\n\n\n\n1\npbs add_tasks --help\n\n\n\n\n\n\nUpdating tasks redundancy from a project\n\n\nIf you need it, you can update the redundancy of a task using its ID or all the tasks skipping the ID. For example, to update the redundancy of one task to 5:\n\n\n1\n    pbs update-task-redundancy --task-id \n34234\n --redundancy \n5\n\n\n\n\n\n\n\nTo update all of them:\n\n\n1\n    pbs update-task-redundancy --redundancy \n5\n\n\n\n\n\n\n\n\n\nNote\n\n\nWithout the \nredundancy\n argument it will revert the redundancy to the default value: 30.\n\n\n\n\nThis last command will confirm that you want to update all the tasks.\n\n\nIf you want to see all the available options, please check the \nhelp\n command:\n\n\n1\n    pbs update-task-redundancy --help\n\n\n\n\n\n\nDeleting tasks from a project\n\n\nIf you need it, you can delete all the tasks from your project, or only one using its task.id. For removing all the tasks, all you\nve to do is\nrun the following command:\n\n\n1\npbs delete_tasks\n\n\n\n\n\n\nThis command will confirm that you want to delete all the tasks and\nassociated task_runs.\n\n\nIf you want to see all the available options, please check the\n\nhelp\n command:\n\n\n1\npbs delete_tasks --help\n\n\n\n\n\n\n\n\nWarning\n\n\nOnly tasks that are not associated with a result will be deleted.\n\n\n\n\nGetting out of the API context\n\n\nPYBOSSA by default returns first your projects, meaning that if you want to work on a project that you don\nt own, it will return an error as the project will not be found. For solving this issue you have two options:\n\n\n\n\nIn the config file, by adding a new flag: all:1\n\n\nOn the command line, passing the \nall=1 flag\n\n\n\n\nHelping Materials\n\n\nThis section shows how you can handle project\ns helping materials.\n\n\nAdding helping materials to a project\n\n\nAdding helping materials is very simple. You can have your materials in three formats:\n\n\n\n\nJSON\n\n\nExcel (xlsx from 2010. It imports the first sheet)\n\n\nCSV\n\n\n\n\nTherefore, adding helping materials to your project is as simple as this command:\n\n\n1\n2\n    pbs add_helpingmaterials\n    --helping-materials-lfile file.xlsx --helping-type xlsx\n\n\n\n\n\n\nIf you want to see all the available options, please check the \nhelp\n command:\n\n\n\n\nNote\n\n\nBy default, PYBOSSA servers use a rate limit for avoiding abuse of the API. For this reason, you can only do usually 300 requests per every 15 minutes. If you are going to add more than 300 tasks, pbs will detect it and warn you, auto-enabling the throttling for you to respect the limits.\n\n\n\n\n\n\nTip\n\n\nPYBOSSA helping materials allow you to upload media files like videos, images, or sounds to support your project tutorials. The command line PBS will check for a column in your file with the name \nfile_path\n so it can upload it first to the server. Please, be sure that the file (or files) path is reachable from the helping materials file.\n\n\n\n\n1\n    pbs add_helpingmaterials --help", 
            "title": "Using the command line"
        }, 
        {
            "location": "/build/pbs/#using-the-command-line", 
            "text": "In this section we ll learn how we can use the command line to interact with our project in a PYBOSSA server, using the command line tool:  PBS  built by Scifabric.", 
            "title": "Using the command line"
        }, 
        {
            "location": "/build/pbs/#pbs", 
            "text": "PBS  is a simple command line interface to a PYBOSSA server. The command allows you to:   create projects,   add tasks from a CSV, Excel or JSON file,   show progress when adding tasks  delete tasks,  updated redundancy for tasks,   and update the project templates.", 
            "title": "PBS"
        }, 
        {
            "location": "/build/pbs/#installation", 
            "text": "PBS is available in Pypi so that you can install the software with pip:  1 pip install pybossa-pbs    Note  We recommend to use virtual environments to install new Python libraries and packages, so please, before installing the PBS command line tool consider using a virtual environment.   If you have all the dependencies, the package will be installed, and you will be able to use it from the command line. The command is  pbs .", 
            "title": "Installation"
        }, 
        {
            "location": "/build/pbs/#configuring-pbs", 
            "text": "By default, PBS does not need a config file. However, you will have to specify for every command the server and your API key to add tasks, create a project, etc. For determining the server and API key\nthat you want to use, all you have to do is pass it as an argument:  1 pbs --server http://server.com --api-key yourkey subcommand   If you work with two or more servers, then, remembering all the keys, and server URLs could be problematic, as well as you will be leaving a trace in your BASH history file. For this reason, pbs has a\nconfiguration file where you can add all the servers that you are\nworking with.  To create the config file, all you have to do is creating a .pybossa.cfg  file in your home folder:  1\n2 cd  ~\nvim .pybossa.cfg   The file should have the following structure:  1\n2\n3 [ default ]  server :   https : // theserver . com  apikey :   yourkey    If you are working with more servers, add another section below it. For example:  1\n2\n3\n4\n5\n6\n7 [ default ]  server :   https : // theserver . com  apikey :   yourkey  [ yourserver ]  server :   https : // yourserver . org  apikey :   yourkeyinyourserver . org    By default, pbs will use the credentials of the default section, so you don t have to type anything to use those values. However, if you want to do actions on another server, all you have to do is the following:  1 pbs --credentials yourserver --help   That command will use the values of the yourserver section.", 
            "title": "Configuring PBS"
        }, 
        {
            "location": "/build/pbs/#project", 
            "text": "This section shows how you can handle a project using PBS.", 
            "title": "Project"
        }, 
        {
            "location": "/build/pbs/#creating-a-project", 
            "text": "Creating a project is very simple. All you have to do is create a file\nnamed  project.json  with the following fields:  1\n2\n3\n4\n5 { \n     name :   Flickr Person Finder , \n     short_name :   flickrperson , \n     description :   Image pattern recognition  }    If you use the name  project.json  you will not have to pass the file\nname via an argument, as it s the name used by default. Once you have the file created, run the following command:  1 pbs create_project   That command should create the project. If you want to see all the\navailable options, please check the  help  command:  1 pbs create_project --help", 
            "title": "Creating a project"
        }, 
        {
            "location": "/build/pbs/#updating-templates", 
            "text": "Now that you have added tasks, you can work in your templates. All you have to do to add/update the templates of your project is running the following command:  1 pbs update_project   That command needs to have in the same folder where you are running it, the following files:   template.html  results.html  long_description.md  tutorial.html   If you want to use another template, just use these arguments:  1 pbs update_project --template /tmp/template.html   If you want to see all the available options, please check the help  command:  1 pbs update_project --help", 
            "title": "Updating templates"
        }, 
        {
            "location": "/build/pbs/#using-an-external-javascript-file", 
            "text": "Since PBS  = 2.3.0, PBS will check for an external JavaScript file named  bundle.js  or  bundle.min.js . If any of those files exist, then, they will be added at the bottom of your template (like you have been doing so far with your projects).  This solution allows you to use for example webpack plus babel to transpile your code, minimize it and add it to your PYBOSSA project.  To use this solution, just transpile to a file named bundle.js or bundle.min.js.   Note  If there s a minified version of the file, bundle.min.js, that file will always be used instead of bundle.js.", 
            "title": "Using an external JavaScript file"
        }, 
        {
            "location": "/build/pbs/#auto-updating-while-developing-a-pybossa-project", 
            "text": "At some point, you will end up running lots of PBS update_project commands, as you will be using your chosen editor for fixing CSS, HTML or JavaScript. For these scenarios, PBS comes with a handy flag:  watch . This argument will tell PBS to run the update_project command automatically when bundle.js, bundle.min.js, template.html, tutorial.html or long_description.md are modified in the file system. As simple as that.  You can run it like this:  1     pbs update_project --watch   And the output will be similar to this:    Using webpack and PBS  This also works with bundle.js files. Thus, you can have webpack transpiling automatically your code, and PBS will update your project with the new code. Cheers", 
            "title": "Auto-updating while developing a PYBOSSA project"
        }, 
        {
            "location": "/build/pbs/#tasks", 
            "text": "This section shows how you can handle project s tasks.", 
            "title": "Tasks"
        }, 
        {
            "location": "/build/pbs/#adding-tasks-to-a-project", 
            "text": "Adding tasks is very simple. You can have your tasks in these formats:   JSON  CSV  Excel (xlsx from 2010. It imports the first sheet)  PO (any po file that you want to translate)  PROPERTIES (any PROPERTIES file that you want to translate)   Therefore, adding tasks to your project is as simple as this command:  1 pbs add_tasks --tasks-file tasks_file.json   If you want to see all the available options, please check the help  command:   Note  By default, PYBOSSA servers use a rate limit for avoiding abuse of the API. For this reason, you can only do usually 300 requests per every 15 minutes. If you are going to add more than 300 tasks, pbs will detect it and warn you, auto-enabling the throttling for you to respect the limits. Please, see  the rate-limiting section  for more details.   1 pbs add_tasks --help", 
            "title": "Adding tasks to a project"
        }, 
        {
            "location": "/build/pbs/#updating-tasks-redundancy-from-a-project", 
            "text": "If you need it, you can update the redundancy of a task using its ID or all the tasks skipping the ID. For example, to update the redundancy of one task to 5:  1     pbs update-task-redundancy --task-id  34234  --redundancy  5    To update all of them:  1     pbs update-task-redundancy --redundancy  5     Note  Without the  redundancy  argument it will revert the redundancy to the default value: 30.   This last command will confirm that you want to update all the tasks.  If you want to see all the available options, please check the  help  command:  1     pbs update-task-redundancy --help", 
            "title": "Updating tasks redundancy from a project"
        }, 
        {
            "location": "/build/pbs/#deleting-tasks-from-a-project", 
            "text": "If you need it, you can delete all the tasks from your project, or only one using its task.id. For removing all the tasks, all you ve to do is\nrun the following command:  1 pbs delete_tasks   This command will confirm that you want to delete all the tasks and\nassociated task_runs.  If you want to see all the available options, please check the help  command:  1 pbs delete_tasks --help    Warning  Only tasks that are not associated with a result will be deleted.", 
            "title": "Deleting tasks from a project"
        }, 
        {
            "location": "/build/pbs/#getting-out-of-the-api-context", 
            "text": "PYBOSSA by default returns first your projects, meaning that if you want to work on a project that you don t own, it will return an error as the project will not be found. For solving this issue you have two options:   In the config file, by adding a new flag: all:1  On the command line, passing the  all=1 flag", 
            "title": "Getting out of the API context"
        }, 
        {
            "location": "/build/pbs/#helping-materials", 
            "text": "This section shows how you can handle project s helping materials.", 
            "title": "Helping Materials"
        }, 
        {
            "location": "/build/pbs/#adding-helping-materials-to-a-project", 
            "text": "Adding helping materials is very simple. You can have your materials in three formats:   JSON  Excel (xlsx from 2010. It imports the first sheet)  CSV   Therefore, adding helping materials to your project is as simple as this command:  1\n2     pbs add_helpingmaterials\n    --helping-materials-lfile file.xlsx --helping-type xlsx   If you want to see all the available options, please check the  help  command:   Note  By default, PYBOSSA servers use a rate limit for avoiding abuse of the API. For this reason, you can only do usually 300 requests per every 15 minutes. If you are going to add more than 300 tasks, pbs will detect it and warn you, auto-enabling the throttling for you to respect the limits.    Tip  PYBOSSA helping materials allow you to upload media files like videos, images, or sounds to support your project tutorials. The command line PBS will check for a column in your file with the name  file_path  so it can upload it first to the server. Please, be sure that the file (or files) path is reachable from the helping materials file.   1     pbs add_helpingmaterials --help", 
            "title": "Adding helping materials to a project"
        }, 
        {
            "location": "/build/tutorial/", 
            "text": "Project Tutorial\n\n\nThis tutorial uses the demo project \nFlickr Person\n (\nsource\ncode\n) built by Scifabric for PYBOSSA. This demo is a simple microtasking project where users have to answer the following question: \nDo you see a human face in this photo?\n The possible answers are: \nYes, No\n and \nI don\nt know\n. In other words, this is an example of a simple crowdsourcing project for image classification.\n\n\nThe demo project Flickr Person has two main components:\n\n\n\n\nA Python script that creates the tasks in\n  PYBOSSA using the Flickr API, and\n\n\nthe task-presenter: an HTML + Javascript structure that will show\n  the tasks to the users and save their answers.\n\n\n\n\nThis tutorial uses the PYBOSSA \npbs command line tool\n as it will show you how you can handle your project from the command line like a pro.\n\n\nSetting Things Up\n\n\nTo run the tutorial, you will need to create an account in a\nPYBOSSA server. The PYBOSSA server could be running on your computer or in a third party server.\n\n\nOnce you have a PYBOSSA account, you will have access to your profile by clicking on your name, and then on the \nMy Settings\n section. There, you will find your API-KEY.\n\n\n\n\nThis \nAPI-KEY\n will identify and authenticate you via the PYBOSSA API. It will allow you to create a project, add tasks, update the project, etc. As you will be the owner of the project, only you will be able to perform these actions, but anyone will be able to participate in your project.\n\n\n\n\nNote\n\n\nThis tutorial uses the \npbs command line tool\n. You need to install it in your system before proceeding. Please, check the \npbs documentation for more information\n.\n\n\n\n\nCreating the Project\n\n\nThere are two possible methods for creating a project:\n\n\n\n\nweb-interface: click on your username, and you will see a section\n  named \nprojects\n list. In that section, you will be able to create a project using the web interface.\n\n\nAPI-interface: using the \npbs\n command line tool.\n\n\n\n\nFor this tutorial, we are going to use the second option. The reason is that via the API you will have more flexibility than via the web interface.\n\n\nTherefore, for creating the project, you will need two parameters:\n\n\n\n\nthe URL of the PYBOSSA server, and\n\n\nan API-KEY to authenticate yourself in the PYBOSSA server.\n\n\n\n\n\n\nTip\n\n\nIf you are running a PYBOSSA server locally, you can omit the URL parameter as by default it uses the URL \nhttp://localhost:5000\n.\n\n\n\n\nGetting the project\ns source code\n\n\nNow that we know where are we going to create the project (the server URL) and that we have an API key,  we can download the source code of the project. To get the code, we will clone the \nFlickr\nPerson Finder Repository\n. This step will download all the code and scripts to your computer.\n\n\n\n\nTo clone the code, we will use Git. Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance.\n\n\nIf you are new to Git, we recommend you to take\nthis \nfree and on-line course\n (it will take you\nonly 15 minutes!) where you will learn the basics, which are the main\nconcepts that you will need for cloning the demo project repository.\n\n\nIf you prefer to skip the course and take it in a later stage, the\ncommands that you need to clone the repository are:\n\n\n1\ngit clone git://github.com/Scifabric/app-flickrperson.git\n\n\n\n\n\n\nAfter running that command,  a new folder named \napp-flickrperson\n will be created from where you run the command.\n\n\nConfiguring the name, short name, thumbnail, etc.\n\n\nThe Flickr Person Finder provides a file called \nproject.json\n that has the following content:\n\n\n1\n2\n3\n4\n5\n{\n\n    \nname\n:\n \nFlickr Person Finder\n,\n\n    \nshort_name\n:\n \nflickrperson\n,\n\n    \ndescription\n:\n \nImage pattern recognition\n,\n\n\n}\n\n\n\n\n\n\n\nThis file, project.json identifies your project. It has its name, as well as a short description about it. As we are creating a new project, please, modify the \nname\n and \nshort_name\n to make it yours.\n\n\n\n\nWarning\n\n\nThe \nname\n and \nshort_name\n of the project \nmust be unique\n! Otherwise, you will get an error (IntegrityError) when creating the project.\n\n\n\n\nDescription\n will be the text shown in the project listing page. It\ns important that you try to have a short description that explains what your project does.\n\n\nNow that we have the \nproject.json\n file ready, we can create the\nproject:\n\n\n1\npbs --server server --api-key key create_project\n\n\n\n\n\n\nThis command will read the values from the \nproject.json\n file and use them to create a draft project in the PYBOSSA server of your\nchoice.\n\n\n\n\nNote\n\n\nYou can save some typing if you create a config file for pbs. Please,\ncheck the \npbs page\n for more details.\n\n\n\n\nIf you want to check if the project exists, just open your web browser,\nand type in the following URL http://server/project/short_name\n\n\nWhere \nshort_name\n is the value of the key with the same name in the file: \nproject.json\n. You should get a project page. Now, let\ns add some tasks to the project.\n\n\nProviding more details about the project\n\n\nUp to now we have created the project, added some tasks, but the project still lacks a lot of information. For example, a welcome page (or long description) of the project, so the users can know what this project is about.\n\n\nIf you check the source code, you will see that there is a file named\n\nlong_description.md\n. This file has a lengthy description of the project, explaining different aspects of it.\n\n\nThis information is not mandatory. However it will be beneficial for\nthe users as they will get a bit more of information about the project\ngoals.\n\n\nThe file can be composed using Markdown or plain text.\n\n\nThe long description will be shown on the project home page:\n\n\n1\nhttps://yourserver/project/flickrperson\n\n\n\n\n\n\nIf you want to modify the description you have two options, edit it via the web interface, or change locally the \nlong_description.md\n file and run pbs to update it:\n\n\n1\npbs update_project\n\n\n\n\n\n\nAdding an icon to the project\n\n\nIt is possible also to add a nice icon for the project. By default\nPYBOSSA will render a 100x100 pixels empty thumbnail for those projects that do not provide it.\n\n\nIf you want to add an icon you can do it by using the web interface.\nJust go to the \nSettings\n tab within your project. There, select the\nimage file you want to use and push the \nUpload\n button. That\ns all!\n\n\nProtecting the project with a password\n\n\nIf for any reason, you want to allow only certain people to contribute\nto your project, you can set a password. Thus, every time a user (either anonymous or authenticated) wants to contribute to the project, it will be asked to introduce the password. The user will then be able to contribute to the project for 30 minutes (this is a value by default, can be changed in every PYBOSSA server). After this time, the user will be asked again to introduce the password if the user wants to continue contributing, and so on.\n\n\nAdding tasks to the project\n\n\nNow that we have the project created, we can add some tasks to it. PYBOSSA will deliver the tasks for the users (authenticated and\nanonymous ones) and store the submitted answers in the PYBOSSA database so that you can process them in a later stage.\n\n\nA PYBOSSA task is a JSON object with the information that needs to be processed by the volunteers. Usually, it will be a link to a media file (image, video, sound clip, PDF file, etc.) that needs to be processed.\n\n\nPYBOSSA does not store any data; it only links data in the tasks\n. This feature is really cool as you will always have control of the data. \n\n\nWhile PYBOSSA internally uses JSON for storing the data, you can add  tasks to your project using several formats:\n\n\n\n\nCSV: a comma-separated spreadsheet-\n\n\nExcel: xlsx from 2010. It imports the first sheet).\n\n\nJSON: a lightweight data-interchange format.\n\n\nPO (any po file that you want to translate).\n\n\nPROPERTIES (any PROPERTIES file that you want to translate).\n\n\n\n\nThe demo project comes with a CSV sample file, which has the following structure:\n\n\n\n\n\n\n\n\nquestion\n\n\nurl_m\n\n\nlink\n\n\nurl_b\n\n\n\n\n\n\n\n\n\n\nDo you see a human face in this photo?\n\n\nhttp://srv/img_m.jpg\n\n\nhttp://srv/img\n\n\nhttp://srv/img_b.jpg\n\n\n\n\n\n\n\n\nAdditionally there is a script named: \nget_images.py\n that will\ncontact Flickr, get the latest published photos to this web service, and\nsave them in JSON format as a file (flickr_tasks.json), with the same\nstructure as the CSV file (the keys are the same):\n\n\n1\n2\n3\n{\n \nlink\n:\n \nhttp://www.flickr.com/photos/teleyinex/2945647308/\n,\n\n  \nurl_m\n:\n \nhttp://farm4.staticflickr.com/3208/2945647308_f048cc1633_m.jpg\n,\n \n  \nurl_b\n:\n \nhttp://farm4.staticflickr.com/3208/2945647308_f048cc1633_b.jpg\n \n}\n\n\n\n\n\n\n\n\n\nNote\n\n\nFlickr creates from the original image different cropped versions of the image. It uses a pattern to distinguish them: \n_m\n for medium size, and \n_b\n for the big ones. There are more options, so if you need more help in this matter, check the official \nFlickr    documentation\n.\n\n\n\n\nAs we have a CSV file with some tasks, let\ns use it for adding some\ntasks to your project. For adding tasks using the CSV file,  all you have to do is the following:\n\n\n1\npbs add_tasks --tasks-file flickr_tasks.csv\n\n\n\n\n\n\nAfter running this command, you will see a progress bar that will let\nyou know when all the tasks have been added to your project. This has been really easy, right? As you can see, adding tasks to a project is really straightforward if you have a CSV or Excel file. Each row will become a task in PYBOSSA, and you only have to run one command to get all of them into your project.\n\n\nAs a bonus, let\ns also add some tasks using the \nget_images.py\n script. This script will contact Flickr, get the last 20 published photos, and then, save them in JSON format into a file called \nflickr_tasks.json\n.  By doing this, we are showing you how you can easily extract data from third-party services and import them into a PYBOSSA project. Thus, let\ns start by running the command and getting the tasks:\n\n\n1\npython get_images.py\n\n\n\n\n\n\nThat command has created the file: \nflickr_tasks.json\n. Now, let\ns use it to add the pictures to our project:\n\n\n1\npbs add_tasks --tasks-file flickr_tasks.json\n\n\n\n\n\n\nDone! Again, a progress bar will show us how long it takes to add all\nthe tasks. Now that we have all the tasks in the project, we can work on the next step: presenting the tasks to the volunteers.\n\n\nTask\ns redundancy\n\n\nPYBOSSA by default will send a task to different users (authenticated \nand anonymous users) until 30 different task runs are obtained for each task. This is usually known as \nredundancy\n, and we will use it to validate the analysis of the task. The whole aim of this value is to avoid trolls to participate several times in the same task, answering wrong on purpose so that we can have a valid statistical analysis of the submitted contributions by the volunteers.\n\n\nPYBOSSA does not allow the same user to submit more than one\nanswer (task runs in PYBOSSA lingo) to the same task. PYBOSSA identifies anonymous users via their IP, while registered users via their PYBOSSA id.\n\n\nWhy PYBOSSA uses a default value of 30? Well, because we are getting 30 observations for a task, and if the data is normal, at least 30 samples should be obtained to get that model. In any case, you can easily change this value for each, using the task settings section of your project (or via the API using the \npbs\n tool). \n\n\nIf you want to improve the quality of the results for one task and get more confidence in the data when you will analyze it, you can modify the redundancy value with the pbs command. For example, to reduce the number of users that will analyze each task to ten, run the following command:\n\n\n1\npbs add_tasks --tasks-file file --redundancy \n10\n\n\n\n\n\n\n\nIn this case, the \nn_answers\n field will instruct PYBOSSA to send the task to 10 different users.\n\n\nTasks\ns priority\n\n\nEvery task can have its own \npriority\n. You can modify it using the web interface, or the API.\n\n\nA task with a higher priority will be delivered first to the volunteers.\nHence if you have a project where you need to analyze a task first due to an external event (a new data sample has been obtained), then you can modify the priority of the newly created task and deliver it first.\n\n\nIf you have a new batch of tasks, instead of only a task, that needs to be processed before all the available ones, you can do it with pbs as well. Run the following command:\n\n\n1\npbs add_tasks --tasks-file file --priority \n1\n\n\n\n\n\n\n\nThe priority is a number between 0.0 and 1.0. The highest priority is\n1.0 and the lowest is 0.0.\n\n\nPresenting the Tasks to the user\n\n\nNow that we have the tasks in our project, we have to present them to the user. For achieving this, you will have to create an HTML\ntemplate.\n\n\nThe template is the skeleton that will be used to load the data of the\ntasks: the question, the photos, user progress, input fields \n submit\nbuttons to solve the task.\n\n\nIn this tutorial, Flickr Person uses a basic HTML skeleton and the\n\nPYBOSSA.JS\n library to load the data of the tasks into the HTML template and take actions based on the users\n answers.\n\n\n\n\nNote\n\n\nWhen an authenticated user submits a task, the task will save the user ID. For anonymous users, the submitted task will only have the user IP address.\n\n\n\n\nThe HTML Skeleton\n\n\nThe \nfile\n\n\ntemplate.html\n has the skeleton to show the tasks. The file has three sections:\n\n\n\n\nA div for the warnings actions\n. When the user saves an   answer, a success feedback message is shown to the user. There is\n  also an error one for the failures.\n\n\nA div for the Flickr image\n. This div will be populated\n  with the task photo URL and LINK data.\n\n\nA div for the Questions \n Answer buttons\n. There are\n  three buttons with the possible answers: \nYes\n, \nNo\n, and \nI don\nt\n  know\n.\n\n\n\n\nBy default, PYBOSSA includes the PYBOSSA.JS\nlibrary, so you don\nt have to include it in your template.\n\n\nAll you have to do is to add a script section where you will be loading\nthe tasks and saving the answers from the users: \n.\n\n\nThis template file will be used by the pbs command line tool to add the task presenter to the project. You can add it running the following command:\n\n\n1\npbs update_project\n\n\n\n\n\n\n\n\nNote\n\n\nYou can also edit the HTML skeleton using the web interface. Once the project has been created in PYBOSSA you will see a button that\nallows you to edit the skeleton using a WYSIWYG editor.\n\n\n\n\nIn PYBOSSA every project has a \ntask presenter\n endpoint: http://PYBOSSA-SERVER/project/SLUG/newtask\n\n\n\n\nNote\n\n\nThe \nslug\n is the short name for the project, in this case\n\nflickrperson\n.\n\n\n\n\nLoading the above endpoint will load the skeleton and trigger the\nJavaScript functions to get a task from the PYBOSSA server and populate it in the HTML skeleton.\n\n\nThe header and footer for the presenter are already provided by PYBOSSA, so the template only has to define the structure to present the data from the tasks to the users and the action buttons, input methods, etc. to retrieve and save the answer from the volunteers.\n\n\nFlickr Person Skeleton\n\n\nFor this tutorial, we have a very simple DOM. At the\nbeginning you will find a big div that will be used to show some\nmessages to the user about the success of an action, for instance, that an answer has been saved or that a new task is being loaded. Take a look:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\ndiv\n \nclass\n=\nrow\n\n  \n!-- Success and Error Messages for the user --\n \n  \ndiv\n \nclass\n=\nspan6 offset2\n \nstyle\n=\nheight:50px\n\n    \ndiv\n \nid\n=\nsuccess\n \nclass\n=\nalert alert-success\n \nstyle\n=\ndisplay:none;\n\n      \na\n \nclass\n=\nclose\n\u00d7\n/\na\n\n      \nstrong\nWell done!\n/\nstrong\n Your answer has been saved\n    \n/\ndiv\n\n    \ndiv\n \nid\n=\nloading\n \nclass\n=\nalert alert-info\n \nstyle\n=\ndisplay:none;\n\n      \na\n \nclass\n=\nclose\n\u00d7\n/\na\n\n      Loading next task...\n    \n/\ndiv\n\n    \ndiv\n \nid\n=\ntaskcompleted\n \nclass\n=\nalert alert-info\n \nstyle\n=\ndisplay:none;\n\n      \nstrong\nThe task has been completed!\n/\nstrong\n Thanks a lot!\n    \n/\ndiv\n\n    \ndiv\n \nid\n=\nfinish\n \nclass\n=\nalert alert-success\n \nstyle\n=\ndisplay:none;\n\n      \nstrong\nCongratulations!\n/\nstrong\n You have participated in all available tasks!\n      \nbr\n/\n\n      \ndiv\n \nclass\n=\nalert-actions\n\n        \na\n \nclass\n=\nbtn small\n \nhref\n=\n/\nGo back\n/\na\n\n        \na\n \nclass\n=\nbtn small\n \nhref\n=\n/project\nor, Check other projects\n/\na\n\n      \n/\ndiv\n\n    \n/\ndiv\n\n    \ndiv\n \nid\n=\nerror\n \nclass\n=\nalert alert-error\n \nstyle\n=\ndisplay:none;\n\n      \na\n \nclass\n=\nclose\n\u00d7\n/\na\n\n      \nstrong\nError!\n/\nstrong\n Something went wrong, please contact the site administrators\n    \n/\ndiv\n\n  \n/\ndiv\n \n!-- End Success and Error Messages for the user --\n\n\n/\ndiv\n \n!-- End of Row --\n\n\n\n\n\n\n\nThen we have the skeleton where we will be loading the Flickr photos, and the submission buttons for the user.\n\n\nFirst, it creates a row that will have two columns (in Bootstrap a row\ncan have 12 columns), so we will populate a structure like this:\n\n\n1\n2\n3\n4\n5\n6\n7\ndiv\n \nclass\n=\nrow skeleton\n\n    \n!-- First column for showing the question, submission buttons and user\n\n\n    progress --\n\n    \ndiv\n \nclass\n=\nspan6\n/\ndiv\n\n    \n!-- Second column for showing the Flickr photo --\n\n    \ndiv\n \nclass\n=\nspan6\n/\ndiv\n\n\n/\ndiv\n\n\n\n\n\n\n\nThe content for the first column where we will be showing the question of the task, the submission buttons with the answers: yes, no, and I don\nt know, and obviously the user progress for the user, so he can know how many tasks he has completed and how many are left. The code is the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\ndiv\n \nclass\n=\nspan6 \n!-- Start of Question and Submission DIV (column) --\n\n    \nh1\n \nid\n=\nquestion\nQuestion\n/\nh1\n \n!-- The question will be loaded here --\n\n    \ndiv\n \nid\n=\nanswer\n \n!-- Start DIV for the submission buttons --\n\n        \n!-- If the user clicks this button, the saved answer will be value=\nyes\n--\n\n        \nbutton\n \nclass\n=\nbtn btn-success btn-answer\n \nvalue\n=\nYes\ni\n \nclass\n=\nicon icon-white icon-thumbs-up\n/\ni\n Yes\n/\nbutton\n\n        \n!-- If the user clicks this button, the saved answer will be value=\nno\n--\n\n        \nbutton\n \nclass\n=\nbtn btn-danger btn-answer\n \nvalue\n=\nNo\ni\n \nclass\n=\nicon icon-white icon-thumbs-down\n/\ni\n No\n/\nbutton\n\n        \n!-- If the user clicks this button, the saved answer will be value=\nNotKnown\n--\n\n        \nbutton\n \nclass\n=\nbtn btn-answer\n \nvalue\n=\nNotKnown\ni\n \nclass\n=\nicon icon-white icon-question-sign\n/\ni\n I don\nt know\n/\nbutton\n\n    \n/\ndiv\n!-- End of DIV for the submission buttons --\n\n    \n!-- Feedback items for the user --\n\n    \np\nYou are working now on task: \nspan\n \nid\n=\ntask-id\n \nclass\n=\nlabel label-warning\n#\n/\nspan\n/\np\n\n    \np\nYou have completed: \nspan\n \nid\n=\ndone\n \nclass\n=\nlabel label-info\n/\nspan\n tasks from\n    \n!-- Progress bar for the user --\n\n    \nspan\n \nid\n=\ntotal\n \nclass\n=\nlabel label-inverse\n/\nspan\n/\np\n\n    \ndiv\n \nclass\n=\nprogress progress-striped\n\n        \ndiv\n \nid\n=\nprogress\n \nrel\n=\ntooltip\n \ntitle\n=\n#\n \nclass\n=\nbar\n \nstyle\n=\nwidth: 0%;\n/\ndiv\n\n    \n/\ndiv\n\n    \n!-- \n\n\n        This project uses Disqus to allow users to provide some feedback.\n\n\n        The next section includes a button that when a user clicks on it will\n\n\n        load the comments, if any, for the given task\n\n\n    --\n\n    \ndiv\n \nid\n=\ndisqus_show_btn\n \nstyle\n=\nmargin-top:5px;\n\n        \nbutton\n \nclass\n=\nbtn btn-primary btn-large btn-disqus\n \nonclick\n=\nloadDisqus()\ni\n \nclass\n=\nicon-comments\n/\ni\n Show comments\n/\nbutton\n\n        \nbutton\n \nclass\n=\nbtn btn-large btn-disqus\n \nonclick\n=\nloadDisqus()\n \nstyle\n=\ndisplay:none\ni\n \nclass\n=\nicon-comments\n/\ni\n Hide comments\n/\nbutton\n\n    \n/\ndiv\n!-- End of Disqus Button section --\n\n    \n!-- Disqus thread for the given task --\n\n    \ndiv\n \nid\n=\ndisqus_thread\n \nstyle\n=\nmargin-top:5px;display:none\n/\ndiv\n\n\n/\ndiv\n!-- End of Question and Submission DIV (column) --\n\n\n\n\n\n\n\nThen we will add the code for showing the photos. This second column will be much simpler:\n\n\n1\n2\n3\n4\n5\ndiv\n \nclass\n=\nspan6\n!-- Start of Photo DIV (columnt) --\n\n    \na\n \nid\n=\nphoto-link\n \nhref\n=\n#\n\n        \nimg\n \nid\n=\nphoto\n \nsrc\n=\nhttp://img339.imageshack.us/img339/9017/loadingo.png\n \nstyle\n=\nmax-width=100%\n\n    \n/\na\n\n\n/\ndiv\n!-- End of Photo DIV (column) --\n\n\n\n\n\n\n\nIn the above code, we use a placeholder \nloadingo.png\n that we have\ncreated previously, so we show an image while the first one from the\ntask is getting loaded.\n\n\nThe second section of the skeleton, if we join the previous snippets of code will be like this:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\ndiv\n \nclass\n=\nrow skeleton\n \n!-- Start Skeleton Row--\n\n    \ndiv\n \nclass\n=\nspan6 \n!-- Start of Question and Submission DIV (column) --\n\n        \nh1\n \nid\n=\nquestion\nQuestion\n/\nh1\n \n!-- The question will be loaded here --\n\n        \ndiv\n \nid\n=\nanswer\n \n!-- Start DIV for the submission buttons --\n\n            \n!-- If the user clicks this button, the saved answer will be value=\nyes\n--\n\n            \nbutton\n \nclass\n=\nbtn btn-success btn-answer\n \nvalue\n=\nYes\ni\n \nclass\n=\nicon icon-white icon-thumbs-up\n/\ni\n Yes\n/\nbutton\n\n            \n!-- If the user clicks this button, the saved answer will be value=\nno\n--\n\n            \nbutton\n \nclass\n=\nbtn btn-danger btn-answer\n \nvalue\n=\nNo\ni\n \nclass\n=\nicon icon-white icon-thumbs-down\n/\ni\n No\n/\nbutton\n\n            \n!-- If the user clicks this button, the saved answer will be value=\nNotKnown\n--\n\n            \nbutton\n \nclass\n=\nbtn btn-answer\n \nvalue\n=\nNotKnown\ni\n \nclass\n=\nicon icon-white icon-question-sign\n/\ni\n I don\nt know\n/\nbutton\n\n        \n/\ndiv\n!-- End of DIV for the submission buttons --\n\n        \n!-- Feedback items for the user --\n\n        \np\nYou are working now on task: \nspan\n \nid\n=\ntask-id\n \nclass\n=\nlabel label-warning\n#\n/\nspan\n/\np\n\n        \np\nYou have completed: \nspan\n \nid\n=\ndone\n \nclass\n=\nlabel label-info\n/\nspan\n tasks from\n        \n!-- Progress bar for the user --\n\n        \nspan\n \nid\n=\ntotal\n \nclass\n=\nlabel label-inverse\n/\nspan\n/\np\n\n        \ndiv\n \nclass\n=\nprogress progress-striped\n\n            \ndiv\n \nid\n=\nprogress\n \nrel\n=\ntooltip\n \ntitle\n=\n#\n \nclass\n=\nbar\n \nstyle\n=\nwidth: 0%;\n/\ndiv\n\n        \n/\ndiv\n\n        \n!-- \n\n\n            This project uses Disqus to allow users to provide some feedback.\n\n\n            The next section includes a button that when a user clicks on it will\n\n\n            load the comments, if any, for the given task\n\n\n        --\n\n        \ndiv\n \nid\n=\ndisqus_show_btn\n \nstyle\n=\nmargin-top:5px;\n\n            \nbutton\n \nclass\n=\nbtn btn-primary btn-large btn-disqus\n \nonclick\n=\nloadDisqus()\ni\n \nclass\n=\nicon-comments\n/\ni\n Show comments\n/\nbutton\n\n            \nbutton\n \nclass\n=\nbtn btn-large btn-disqus\n \nonclick\n=\nloadDisqus()\n \nstyle\n=\ndisplay:none\ni\n \nclass\n=\nicon-comments\n/\ni\n Hide comments\n/\nbutton\n\n        \n/\ndiv\n!-- End of Disqus Button section --\n\n        \n!-- Disqus thread for the given task --\n\n        \ndiv\n \nid\n=\ndisqus_thread\n \nstyle\n=\nmargin-top:5px;display:none\n/\ndiv\n\n    \n/\ndiv\n!-- End of Question and Submission DIV (column) --\n\n    \ndiv\n \nclass\n=\nspan6\n!-- Start of Photo DIV (column) --\n\n        \na\n \nid\n=\nphoto-link\n \nhref\n=\n#\n\n            \nimg\n \nid\n=\nphoto\n \nsrc\n=\nhttp://img339.imageshack.us/img339/9017/loadingo.png\n \nstyle\n=\nmax-width=100%\n\n        \n/\na\n\n    \n/\ndiv\n!-- End of Photo DIV (columnt) --\n\n\n/\ndiv\n!-- End of Skeleton Row --\n\n\n\n\n\n\n\nLoading the Task data\n\n\nNow that we have set up the \nskeleton\n to load the task data, let\ns see\nthe JavaScript that we have to write to load the pictures from\nFlickr and ask the volunteer an answer about them.\n\n\nAll the action takes place in the \nfile\n \ntemplate.html\n script section.\n\n\nThe script is very simple; it uses the PYBOSSA.JS library to get a new task and to submit and save the answer in the server.\n\n\nPYBOSSA.JS implements two methods that have to be overridden with some logic, as each project will have a different need, i.e., some projects will be loading another type of data in a different skeleton:\n\n\n\n\npybossa.taskLoaded(function(task, deferred){});\n\n\npybossa.presentTask(function(task, deferred){});\n\n\n\n\nThe \npybossa.taskLoaded\n method will be in charge of adding new\n\n objects to the DOM once they have been loaded from\nFlickr (the URL is provided by the task object in the field\ntask.info.url_b), and resolve the deferred object, so another task for\nthe current user can be pre-loaded. The code is the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\npybossa\n.\ntaskLoaded\n(\nfunction\n(\ntask\n,\n \ndeferred\n)\n \n{\n\n    \nif\n \n(\n \n!\n$\n.\nisEmptyObject\n(\ntask\n)\n \n)\n \n{\n\n        \n// load image from flickr\n\n        \nvar\n \nimg\n \n=\n \n$\n(\nimg /\n);\n\n        \nimg\n.\nload\n(\nfunction\n()\n \n{\n\n            \n// continue as soon as the image is loaded\n\n            \ndeferred\n.\nresolve\n(\ntask\n);\n\n        \n});\n\n        \nimg\n.\nattr\n(\nsrc\n,\n \ntask\n.\ninfo\n.\nurl_b\n).\ncss\n(\nheight\n,\n \n460\n);\n\n        \nimg\n.\naddClass\n(\nimg-polaroid\n);\n\n        \ntask\n.\ninfo\n.\nimage\n \n=\n \nimg\n;\n\n    \n}\n\n    \nelse\n \n{\n\n        \ndeferred\n.\nresolve\n(\ntask\n);\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\nThe \npybossa.presentTask\n method will be called when a task has been obtained from the server:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n{\n \nquestion\n:\n \nproject\n.\ndescription\n,\n\n  \ntask\n:\n \n{\n \n          \nid\n:\n \nvalue\n,\n\n          \n...,\n\n          \ninfo\n:\n \n{\n \n                  \nurl_m\n:\n \n                  \nlink\n:\n\n                 \n}\n \n        \n}\n \n\n}\n\n\n\n\n\n\n\nThat JSON object will be accessible via the task object passed as an\nargument to the pybossa.presentTask method. First, we will need to check that we are not getting an empty object, as it will mean that there are no more available tasks for the current user. In that case, we should hide the skeleton, and say thanks to the user as he has participated in all the tasks of the project.\n\n\nIf the task object is not empty, then we have a task to load into the\n\nskeleton\n. In this demo project, we will update the\nquestion, adding the photo to the DOM, refreshing the user progress and add some actions to the submission buttons so we can save the answer of the volunteer.\n\n\nThe PYBOSSA.JS library treats the user input as an \nasync function.\n\nThis is why the function gets a deferred object, as this object will be\nresolved\n when the user clicks on one of the possible answers. We use this approach to load in the background the next task for the user while the volunteer is solving the current one. Once the answer has been saved in the server, we resolve the deferred:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\npybossa\n.\npresentTask\n(\nfunction\n(\ntask\n,\n \ndeferred\n)\n \n{\n\n    \nif\n \n(\n \n!\n$\n.\nisEmptyObject\n(\ntask\n)\n \n)\n \n{\n\n        \nloadUserProgress\n();\n\n        \n$\n(\n#photo-link\n).\nhtml\n(\n).\nappend\n(\ntask\n.\ninfo\n.\nimage\n);\n\n        \n$\n(\n#photo-link\n).\nattr\n(\nhref\n,\n \ntask\n.\ninfo\n.\nlink\n);\n\n        \n$\n(\n#question\n).\nhtml\n(\ntask\n.\ninfo\n.\nquestion\n);\n\n        \n$\n(\n#task-id\n).\nhtml\n(\ntask\n.\nid\n);\n\n        \n$\n(\n.btn-answer\n).\noff\n(\nclick\n).\non\n(\nclick\n,\n \nfunction\n(\nevt\n)\n \n{\n\n            \nvar\n \nanswer\n \n=\n \n$\n(\nevt\n.\ntarget\n).\nattr\n(\nvalue\n);\n\n            \nif\n \n(\ntypeof\n \nanswer\n \n!=\n \nundefined\n)\n \n{\n\n                \n//console.log(answer);\n\n                \npybossa\n.\nsaveTask\n(\ntask\n.\nid\n,\n \nanswer\n).\ndone\n(\nfunction\n()\n \n{\n\n                    \ndeferred\n.\nresolve\n();\n\n                \n});\n\n                \n$\n(\n#loading\n).\nfadeIn\n(\n500\n);\n\n                \nif\n \n(\n$\n(\n#disqus_thread\n).\nis\n(\n:visible\n))\n \n{\n\n                    \n$\n(\n#disqus_thread\n).\ntoggle\n();\n\n                    \n$\n(\n.btn-disqus\n).\ntoggle\n();\n\n                \n}\n\n            \n}\n\n            \nelse\n \n{\n\n                \n$\n(\n#error\n).\nshow\n();\n\n            \n}\n\n        \n});\n\n        \n$\n(\n#loading\n).\nhide\n();\n\n    \n}\n\n    \nelse\n \n{\n\n        \n$\n(\n.skeleton\n).\nhide\n();\n\n        \n$\n(\n#loading\n).\nhide\n();\n\n        \n$\n(\n#finish\n).\nfadeIn\n(\n500\n);\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\nIt is important to note that in this method we bind the \non-click\n\naction for the \nYes\n, \nNo\n and \nI don\nt know\n buttons to call the above snippet:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n$\n(\n.btn-answer\n).\noff\n(\nclick\n).\non\n(\nclick\n,\n \nfunction\n(\nevt\n)\n \n{\n\n    \nvar\n \nanswer\n \n=\n \n$\n(\nevt\n.\ntarget\n).\nattr\n(\nvalue\n);\n\n    \nif\n \n(\ntypeof\n \nanswer\n \n!=\n \nundefined\n)\n \n{\n\n        \n//console.log(answer);\n\n        \npybossa\n.\nsaveTask\n(\ntask\n.\nid\n,\n \nanswer\n).\ndone\n(\nfunction\n()\n \n{\n\n            \ndeferred\n.\nresolve\n();\n\n        \n});\n\n        \n$\n(\n#loading\n).\nfadeIn\n(\n500\n);\n\n        \nif\n \n(\n$\n(\n#disqus_thread\n).\nis\n(\n:visible\n))\n \n{\n\n            \n$\n(\n#disqus_thread\n).\ntoggle\n();\n\n            \n$\n(\n.btn-disqus\n).\ntoggle\n();\n\n        \n}\n\n    \n}\n\n    \nelse\n \n{\n\n        \n$\n(\n#error\n).\nshow\n();\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\nIf your project uses other input methods, you will have to adapt this to fit your project needs.\n\n\nFinally, the pybossa.presentTask calls a method named\n\nloadUserProgress\n. This method is in charge of getting the user\nthe progress of the user and update the progress bar accordingly:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nfunction\n \nloadUserProgress\n()\n \n{\n\n    \npybossa\n.\nuserProgress\n(\nflickrperson\n).\ndone\n(\nfunction\n(\ndata\n){\n\n        \nvar\n \npct\n \n=\n \nMath\n.\nround\n((\ndata\n.\ndone\n*\n100\n)\n/\ndata\n.\ntotal\n);\n\n        \n$\n(\n#progress\n).\ncss\n(\nwidth\n,\n \npct\n.\ntoString\n()\n \n+\n%\n);\n\n        \n$\n(\n#progress\n).\nattr\n(\ntitle\n,\n \npct\n.\ntoString\n()\n \n+\n \n% completed!\n);\n\n        \n$\n(\n#progress\n).\ntooltip\n({\nplacement\n:\n \nleft\n});\n \n        \n$\n(\n#total\n).\ntext\n(\ndata\n.\ntotal\n);\n\n        \n$\n(\n#done\n).\ntext\n(\ndata\n.\ndone\n);\n\n    \n});\n\n\n}\n\n\n\n\n\n\n\nYou can update the code only to show the number of answers, or remove it entirely. However, the volunteers will benefit from this type of information as they will be able to know how many tasks they have to do, giving an idea of progress while they contribute to the project.\n\n\nFinally, we only need in our code to tell pybossa.js to run our project:\n\n\n1\npybossa\n.\nrun\n(\nflickrperson\n)\n\n\n\n\n\n\n\nSaving the answer\n\n\nOnce the task has been presented, users can click on the answer\nbuttons: \nYes\n, \nNo\n or \nI don\nt know\n.\n\n\nYes\n and \nNo\n save the answer in the DB with information about the task and the answer, while the button \nI don\nt know\n loads another task as sometimes the image is not available.\n\n\nTo submit and save the answer from the user, we will use again\nthe PYBOSSA.JS library. In this case:\n\n\n1\npybossa\n.\nsaveTask\n(\n \ntaskid\n,\n \nanswer\n \n)\n\n\n\n\n\n\n\nThe \npybossa.saveTask\n method saves an answer for a given task. In the previous section, we show that in the pybossa.presentTask method the \ntask-id\n can be obtained, as we will be passing the object to saveTask method.\n\n\nThe method allows us to give a successful pop-up feedback for the user, so you can use the following structure to warn the user and tell him that his answer has been successfully saved:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\npybossa\n.\nsaveTask\n(\n \ntaskid\n,\n \nanswer\n \n).\ndone\n(\n\n  \nfunction\n(\n \ndata\n \n)\n \n{\n\n      \n// Show the feedback div\n\n      \n$\n(\n#success\n).\nfadeIn\n();\n \n      \n// Fade out the pop-up after a 1000 miliseconds\n\n      \nsetTimeout\n(\nfunction\n()\n \n{\n \n$\n(\n#success\n).\nfadeOut\n()\n \n},\n \n1000\n);\n\n  \n};\n\n\n);\n\n\n\n\n\n\n\nKeeping track of the time spent by volunteers solving a task\n\n\nSince v1.1.3, PYBOSSA records a timestamp, for every task run, of the contributed task runs. This is stored in the \ncreated\n attribute of the Task Runs.\n\n\nNow, with the \nfinish_time\n attribute, we will be able to know how\nmuch time the volunteer has spent completing the task: (time spent =\nfinish_time - created)\n\n\n\n\nTip\n\n\nThis information is only shown to the owner of the project.\n\n\n\n\nUpdating the template for all the tasks\n\n\nIt is possible to update the template of the project without having to re-create the project and its tasks. To update the template,\nyou only have to modify the file \ntemplate.html\n and run the following command:\n\n\n1\npbs update_project\n\n\n\n\n\n\nYou can also use the web interface to do it, and see the changes in real time before saving the results. Check your project page, go to the tasks section, and look for the \nEdit the task presenter\n button.\n\n\nTesting the task presenter\n\n\nTo test the project task presenter, go to the following URL     http://PYBOSSA-SERVER/project/SLUG/presenter\n\n\nThe presenter will load one task, and you will be able to submit and\nsave one answer for the current task.\n\n\nPublishing the project\n\n\nUntil now, the project has been in testing mode. This means that you can play with your project as much as you want. You can invite a few friends or colleauges to test it, just to know that everything works. \n\n\nIn this mode PYBOSSA will work as a published project, so you can test it, however, it is not published so it\ns not visible to users on the server unless you share the link to it. \n\n\nOnce you are happy, you can publish the project. When you publish the project, PYBOSSA will clean your tests and leave it clean for your contributors. Thus, don\nt be afraid and test as much as you want!\n\n\nTutorial\n\n\nIn general, users will like to have some feedback when accessing for the very first time your project. Usually, the overview page of your project will not be enough, so you can build a tutorial (a web page) that will explain to the volunteer how he can participate in the\nproject.\n\n\nPYBOSSA will detect if the user is accessing for the very first time\nyour project, so in that case, it will load the \ntutorial\n, if your project has one.\n\n\nAdding a tutorial is simple: you only have to create a file named\n\ntutorial.html\n and load the content of the file using pbs:\n\n\n1\npbs update_project\n\n\n\n\n\n\nThe tutorial could have whatever you like: videos, nice animations, etc. PYBOSSA will render for you the header and the footer, so you only have to focus on the content. You can copy the template.html file and use it as a draft of your tutorial or just include a video of yourself explaining why your project is important and how, as a volunteer, you can contribute.\n\n\nIf your project has a tutorial, you can access it directly in\nthis endpoint:\n\n\n1\nhttp://server/project/tutorial\n\n\n\n\n\n\nAdvance tutorial (helping materials)\n\n\nWhile the previous solution works for most of the projects, your project might need something special: visual clues so users can easily identify sounds, patterns, etc. easily. The default tutorial does not allow you to curate/create a list of helping materials that could be used directly in the presenter to explain how for example you can identify cancer cells, or specific species of animals.\n\n\nFor this reason, PYBOSSA now supports an API endpoint for helping\nmaterials: api/helpingmaterial.\n\n\nThis endpoint allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build an interactive tutorial.\n\n\nHelping materials allow you to upload images via the endpoint using the multipart/form-data Content-Type.\n\n\nFor example, imagine that you want to add a photo of an animal and it\ns description, so users can easily identify it (or use it as pre-loaded\nanswer for classifying pictures of animals). In this case, you can do\nthe following (using the popular Python requests library, but you can\nuse any other programming language):\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nimport\n \nrequests\n\n\nurl\n \n=\n \nhttps://server/api/helpingpoint?api_key=YOURKEY\n\n\n# Upload a picture\n\n\nfiles\n \n=\n \n{\nfile\n:\n \nopen\n(\ntest.jpg\n,\n \nrb\n)}\n\n\ndata\n \n=\n \n{\nproject_id\n:\n \nYOURPROJECT_ID\n}\n\n\nr\n \n=\n \nrequests\n.\npost\n(\nurl\n,\n \ndata\n=\ndata\n,\n \nfiles\n=\nfiles\n)\n\n\n# Get the created helping material\n\n\nhp\n \n=\n \nr\n.\njson\n()\n\n\n# Add the meta-data of the picture\n\n\nurl\n \n=\n \nhttps://server/api/helpingpoint/\n%s\n?api_key=YOURKEY\n \n%\n \nhp\n[\nid\n]\n\n\ninfo\n \n=\n \n{\npopular_name\n:\n \nelephant\n,\n \nscientific_name\n:\n \nloxodonta\n}\n\n\nr\n \n=\n \nrequests\n.\nput\n(\nurl\n,\n \njson\n=\n{\ninfo\n:\n \ninfo\n})\n\n\n\n\n\n\n\nYou can add as many files as you want. Then, from any place you can\nquery the helping material endpoint to retrieve the example/tutorial\nmaterials for helping your users.\n\n\n\n\nTip\n\n\n\n\nPBS and helping materials\n     You can use PBS to add helping materials from an Excel or CSV file. Check the \ndocumentation\n.\n\n\nProviding some I18n support\n\n\nSometimes, you may want to provide the task interface in their language. To support this, you can access their locale via Javascript in an effortless way, as we\nve placed the user locale in a hidden \ndiv\n node:\n\n\n1\nvar\n \nuserLocale\n \n=\n \ndocument\n.\ngetElementById\n(\nPYBOSSA_USER_LOCALE\n).\ntextContent\n.\ntrim\n();\n\n\n\n\n\n\n\nThe way you use it after that is up to you. But let\ns see an example of\nhow you can use it to make a tutorial that automatically shows the\nstrings in the locale of the user.\n\n\n\n\nWarning\n\n\nAnonymous users will be only shown with \nen\n language by default. This feature only works for authenticated users that choose their locale in their account. You can, however, load the translated strings using the browser preferred language.\n\n\n\n\nFirst of all, check the \ntutorial.html file\n. You will see it consists on some HTML plus some Javascript inside a script tag to handle the different steps of the tutorial. Here you have a snippet of HTML tutorial file:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\ndiv\n \nclass\n=\nrow\n\n    \ndiv\n \nclass\n=\ncol-md-12\n\n        \ndiv\n \nid\n=\nmodal\n \nclass\n=\nmodal hide fade\n\n            \ndiv\n \nclass\n=\nmodal-header\n\n                \nh3\nFlickr Person Finder tutorial\n/\nh3\n\n            \n/\ndiv\n\n            \ndiv\n \nid\n=\n0\n \nclass\n=\nmodal-body\n \nstyle\n=\ndisplay:none\n\n                \np\nstrong\nHi!\n/\nstrong\n This is a \nstrong\ndemo project\n/\nstrong\n that shows how you can do pattern recognition on pictures or images using the PYBOSSA framework.\n               \n/\np\n\n            \n/\ndiv\n\n            \ndiv\n \nid\n=\n1\n \nclass\n=\nmodal-body\n \nstyle\n=\ndisplay:none\n\n                \np\nThe project is really simple. It loads a photo from \na\n \nhref\n=\nhttp://flickr.com\nFlickr\n/\na\n and asks you this question: \nstrong\nDo you see a human in this photo?\n/\nstrong\n/\np\n\n                \nimg\n \nsrc\n=\nhttp://farm7.staticflickr.com/6109/6286728068_2f3c6912b8_q.jpg\n \nclass\n=\nimg-thumbnail\n/\n\n                \np\nYou will have 3 possible answers:\n                \nul\n\n                    \nli\nYes,\n/\nli\n\n                    \nli\nNo, and\n/\nli\n\n                    \nli\nI don\nt know\n/\nli\n\n                \n/\nul\n\n                \n/\np\n\n                \np\n\n                \n/\np\n\n                \np\nAll you have to do is to click in one of the three possible answers and you will be done. This demo project could be adapted for more complex pattern recognition problems.\n/\np\n\n            \n/\ndiv\n\n            \ndiv\n \nclass\n=\nmodal-footer\n\n                \na\n \nid\n=\nprevBtn\n \nhref\n=\n#\n \nonclick\n=\nshowStep(\nprev\n)\n \nclass\n=\nbtn\nPrevious\n/\na\n\n                \na\n \nid\n=\nnextBtn\n \nhref\n=\n#\n \nonclick\n=\nshowStep(\nnext\n)\n \nclass\n=\nbtn btn-success\nNext\n/\na\n\n                \na\n \nid\n=\nstartContrib\n \nhref\n=\n../flickrperson/newtask\n \nclass\n=\nbtn btn-primary\n \nstyle\n=\ndisplay:none\ni\n \nclass\n=\nfa fa-thumbs-o-up\n/\ni\n Try the demo!\n/\na\n\n            \n/\ndiv\n\n        \n/\ndiv\n\n    \n/\ndiv\n\n\n/\ndiv\n\n\n\n\n\n\n\nTo add multilingual support, copy and paste it is as many times as\nlanguages you\nre planning to support.\n\n\nThen, add to each of them an id in the outermost \ndiv\n which\ncorresponds to the name of the locale (\nen\n for English, \nes\n\nfor Spanish, etc.), and translate the inner text of it, but leave all\nthe HTML the same in every version (tags, ids, classes, etc.) like:\n\n\n1\n2\n3\n4\ndiv\n \nid\n=\nes\n \nclass\n=\nrow\n\n   Your translated version of the HTML goes here, but only change the text,\n   NOT the HTML tags, IDs or classes.\n\n/\ndiv\n\n\n\n\n\n\n\nFinally, in the Javascript section of the tutorial, you will need to add some extra code to enable multilingual tutorials. Thus, modify the\njavascript from:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nvar\n \nstep\n \n=\n \n-\n1\n;\n\n\nfunction\n \nshowStep\n(\naction\n)\n \n{\n\n    \n$\n(\n#\n \n+\n \nstep\n).\nhide\n();\n\n    \nif\n \n(\naction\n \n==\n \nnext\n)\n \n{\n\n        \nstep\n \n=\n \nstep\n \n+\n \n1\n;\n\n    \n}\n\n    \nif\n \n(\naction\n \n==\n \nprev\n)\n \n{\n\n        \nstep\n \n=\n \nstep\n \n-\n \n1\n;\n\n    \n}\n\n    \nif\n \n(\nstep\n \n==\n \n0\n)\n \n{\n\n        \n$\n(\n#prevBtn\n).\nhide\n();\n\n    \n}\n\n    \nelse\n \n{\n\n        \n$\n(\n#prevBtn\n).\nshow\n();\n\n    \n}\n\n\n    \nif\n \n(\nstep\n \n==\n \n1\n \n)\n \n{\n\n        \n$\n(\n#nextBtn\n).\nhide\n();\n\n        \n$\n(\n#startContrib\n).\nshow\n();\n\n    \n}\n\n    \n$\n(\n#\n \n+\n \nstep\n).\nshow\n();\n\n\n}\n\n\n\nshowStep\n(\nnext\n);\n\n\n$\n(\n#modal\n).\nmodal\n(\nshow\n);\n\n\n\n\n\n\n\nTo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nvar\n \nlanguages\n \n=\n \n[\nen\n,\n \nes\n]\n\n\n$\n(\ndocument\n).\nready\n(\nfunction\n(){\n\n    \nvar\n \nuserLocale\n \n=\n \ndocument\n.\ngetElementById\n(\nPYBOSSA_USER_LOCALE\n).\ntextContent\n.\ntrim\n();\n\n    \nlanguages\n.\nforEach\n(\nfunction\n(\nlan\n){\n\n        \nif\n \n(\nlan\n \n!==\n \nuserLocale\n)\n \n{\n\n            \nvar\n \nnode\n \n=\n \ndocument\n.\ngetElementById\n(\nlan\n);\n\n            \nif\n \n(\nnode\n.\nparentNode\n)\n \n{\n\n                \nnode\n.\nparentNode\n.\nremoveChild\n(\nnode\n);\n\n            \n}\n\n        \n}\n\n    \n});\n\n    \nvar\n \nstep\n \n=\n \n-\n1\n;\n\n    \nfunction\n \nshowStep\n(\naction\n)\n \n{\n\n        \n$\n(\n#\n \n+\n \nstep\n).\nhide\n();\n\n        \nif\n \n(\naction\n \n==\n \nnext\n)\n \n{\n\n            \nstep\n \n=\n \nstep\n \n+\n \n1\n;\n\n        \n}\n\n        \nif\n \n(\naction\n \n==\n \nprev\n)\n \n{\n\n            \nstep\n \n=\n \nstep\n \n-\n \n1\n;\n\n        \n}\n\n        \nif\n \n(\nstep\n \n==\n \n0\n)\n \n{\n\n            \n$\n(\n#prevBtn\n).\nhide\n();\n\n        \n}\n\n        \nelse\n \n{\n\n            \n$\n(\n#prevBtn\n).\nshow\n();\n\n        \n}\n\n\n        \nif\n \n(\nstep\n \n==\n \n1\n \n)\n \n{\n\n            \n$\n(\n#nextBtn\n).\nhide\n();\n\n            \n$\n(\n#startContrib\n).\nshow\n();\n\n        \n}\n\n        \n$\n(\n#\n \n+\n \nstep\n).\nshow\n();\n\n    \n}\n\n    \nshowStep\n(\nnext\n);\n\n    \n$\n(\n#modal\n).\nmodal\n(\nshow\n);\n\n\n});\n\n\n\n\n\n\n\nNotice the languages array variable defined at the beginning?. It\ns\nvital that you place there the IDs you\nve given to the different translated versions of your HTML for the tutorial. The rest of the\nscript will only compare the locale of the user that is seeing the\ntutorial and delete all the HTML that is not in his language, so that\nonly the tutorial that fits his locale settings is shown.\n\n\nAnother method to support I18n\n\n\nAnother option for translating your project to different languages is\nusing a JSON object like this:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nmessages\n \n=\n \n{\nen\n:\n \n               \n{\nwelcome\n:\n \nHello World!,\n\n\n                \nbye\n: \nGood\n \nbye\n!\n\n\n               },\n\n\n            \nes\n:\n\n               \n{\nwelcome\n:\n \nHola mundo!\n,\n\n                \nbye\n:\n \nHasta luego!\n\n               \n}\n\n           \n}\n\n\n\n\n\n\n\nThis object can be placed in the \ntutorial.html\n or \ntemplate.html\n file to load the proper strings translated to your users.\n\n\nThe logic is very simple. With the following code you grab the language that should be loaded for the current user:\n\n\n1\nvar\n \nuserLocale\n \n=\n \ndocument\n.\ngetElementById\n(\nPYBOSSA_USER_LOCALE\n).\ntextContent\n.\ntrim\n();\n\n\n\n\n\n\n\nNow, use userLocale to load the strings. For example, for\n\ntemplate.html\n and the Flickrperson demo project, you will find the\nfollowing code at the start of the script:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n// Default language\n\n\nvar\n \nuserLocale\n \n=\n \nen\n;\n\n\n// Translations\n\n\nvar\n \nmessages\n \n=\n \n{\nen\n:\n \n{\n\n                        \ni18n_welldone\n:\n \nWell done!\n,\n\n                        \ni18n_welldone_text\n:\n \nYour answer has been saved\n,\n\n                        \ni18n_loading_next_task\n:\n \nLoading next task...\n,\n\n                        \ni18n_task_completed\n:\n \nThe task has been completed!\n,\n\n                        \ni18n_thanks\n:\n \nThanks a lot!\n,\n\n                        \ni18n_congratulations\n:\n \nCongratulations\n,\n\n                        \ni18n_congratulations_text\n:\n \nYou have participated in all available tasks!\n,\n\n                        \ni18n_yes\n:\n \nYes\n,\n\n                        \ni18n_no_photo\n:\n \nNo photo\n,\n\n                        \ni18n_i_dont_know\n:\n \nI don\nt know\n,\n\n                        \ni18n_working_task\n:\n \nYou are working now on task:\n,\n\n                        \ni18n_tasks_completed\n:\n \nYou have completed:\n,\n\n                        \ni18n_tasks_from\n:\n \ntasks from\n,\n\n                        \ni18n_show_comments\n:\n \nShow comments:\n,\n\n                        \ni18n_hide_comments\n:\n \nHide comments:\n,\n\n                        \ni18n_question\n:\n \nDo you see a human face in this photo?\n,\n\n                      \n},\n\n                \nes\n:\n \n{\n\n                        \ni18n_welldone\n:\n \nBien hecho!\n,\n\n                        \ni18n_welldone_text\n:\n \nTu respuesta ha sido guardada\n,\n\n                        \ni18n_loading_next_task\n:\n \nCargando la siguiente tarea...\n,\n\n                        \ni18n_task_completed\n:\n \nLa tarea ha sido completadas!\n,\n\n                        \ni18n_thanks\n:\n \nMuch\u00edsimas gracias!\n,\n\n                        \ni18n_congratulations\n:\n \nEnhorabuena\n,\n\n                        \ni18n_congratulations_text\n:\n \nHas participado en todas las tareas disponibles!\n,\n\n                        \ni18n_yes\n:\n \nS\u00ed\n,\n\n                        \ni18n_no_photo\n:\n \nNo hay foto\n,\n\n                        \ni18n_i_dont_know\n:\n \nNo lo s\u00e9\n,\n\n                        \ni18n_working_task\n:\n \nEst\u00e1s trabajando en la tarea:\n,\n\n                        \ni18n_tasks_completed\n:\n \nHas completado:\n,\n\n                        \ni18n_tasks_from\n:\n \ntareas de\n,\n\n                        \ni18n_show_comments\n:\n \nMostrar comentarios\n,\n\n                        \ni18n_hide_comments\n:\n \nOcultar comentarios\n,\n\n                        \ni18n_question\n:\n \n\u00bfVes una cara humana en esta foto?\n,\n\n                      \n},\n\n               \n};\n\n\n// Update userLocale with server side information\n\n \n$\n(\ndocument\n).\nready\n(\nfunction\n(){\n\n     \nuserLocale\n \n=\n \ndocument\n.\ngetElementById\n(\nPYBOSSA_USER_LOCALE\n).\ntextContent\n.\ntrim\n();\n\n\n\n});\n\n\n\nfunction\n \ni18n_translate\n()\n \n{\n\n    \nvar\n \nids\n \n=\n \nObject\n.\nkeys\n(\nmessages\n[\nuserLocale\n])\n\n    \nfor\n \n(\ni\n=\n0\n;\n \ni\nids\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n        \nconsole\n.\nlog\n(\nTranslating: \n \n+\n \nids\n[\ni\n]);\n\n        \ndocument\n.\ngetElementById\n(\nids\n[\ni\n]).\ninnerHTML\n \n=\n \nmessages\n[\nuserLocale\n][\nids\n[\ni\n]];\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nFirst, we define the default locale, \nen\n for English. Then, we create a\nmessages dictionary with all the ids that we want to translate. Finally, we add the languages that we want to support.\n\n\nAs you can see, it\ns quite simple as you can share the messages object with your volunteers so that you can get many more translations for your project smoothly.\n\n\nFinally, we need actually to load those translated strings into the\ntemplate. For doing this step, all we\nve to do is adding the following\ncode to our \ntemplate.html\n file at the function pybossa.presentTask:\n\n\n1\n2\n3\n4\n5\npybossa\n.\npresentTask\n(\nfunction\n(\ntask\n,\n \ndeferred\n)\n \n{\n\n    \nif\n \n(\n \n!\n$\n.\nisEmptyObject\n(\ntask\n)\n \n)\n \n{\n\n        \nloadUserProgress\n();\n\n        \ni18n_translate\n();\n\n        \n...\n\n\n\n\n\n\n\nDone! When the task is loaded, the strings are translated and the\nproject will be shown in the user language.\n\n\nUpdating project\ns status\n\n\nYou can share the progress of the project creating a blog. Every PYBOSSA project includes a blog where you will be able to write about your project regularly.\n\n\nYou can use Markdown or plain text for the content of the posts. And you will also be able to edit them or delete after creation if you want.\n\n\nTo write a post go to the project \nSettings\n tab and there you\nwill find an option to write, read or delete your blog posts.\n\n\nYou can use the endpoint /api/blogpost to also add blogposts, update\nthem and delete them. The api endpoint allows you as well to upload a picture to your blogpost.\n\n\nThis endpoint allows you to add JSON and media files (images, videos or sounds) that you can use with your blogpost.\n\n\nYou can use this endpoint for uploading images via the endpoint using the multipart/form-data Content-Type.\n\n\nFor example, imagine that you want to add a photo as a cover and then the body of the blogpost. In this case, you can do the following (using the popular Python requests library, but you can use any other\nprogramming language):\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nimport\n \nrequests\n\n\nurl\n \n=\n \nhttps://server/api/blogpost?api_key=YOURKEY\n\n\n# Upload a picture\n\n\nfiles\n \n=\n \n{\nfile\n:\n \nopen\n(\ntest.jpg\n,\n \nrb\n)}\n\n\ndata\n \n=\n \n{\nproject_id\n:\n \nYOURPROJECT_ID\n,\n \ntitle\n=\ntitle\n,\n \nbody\n=\nbody\n}\n\n\nr\n \n=\n \nrequests\n.\npost\n(\nurl\n,\n \ndata\n=\ndata\n,\n \nfiles\n=\nfiles\n)\n\n\n# Get the created blogpost\n\n\nbp\n \n=\n \nr\n.\njson\n()\n\n\n# Update the body with the meta-data of the picture\n\n\nurl\n \n=\n \nhttps://server/api/blogpost/\n%s\n?api_key=YOURKEY\n \n%\n \nbp\n[\nid\n]\n\n\nbody\n \n=\n \nhello ![img](\n%s\n)\n \n%\n \nbp\n[\nmedia_url\n]\n\n\nr\n \n=\n \nrequests\n.\nput\n(\nurl\n,\n \njson\n=\n{\nbody\n:\n \nbody\n})\n\n\n\n\n\n\n\nExporting the project\ns data\n\n\nYou can export all the available data  your project in three different ways:\n\n\n\n\nJSON\n, an open standard designed for human-readable data interchange, or\n\n\nCSV\n, a file\n    that stores tabular data (numbers and text) in plain-text form and\n    that can be opened with almost any spreadsheet software, or\n\n\nCKAN\n web server, a powerful data management\n    a system that makes data accessible \u2013by providing tools to streamline publishing, sharing, finding and using data.\n\n\n\n\nFor exporting the data, all you have to do is to visit the following URL\nin your web-browser:\n\n\n1\nhttp://PYBOSSA-SERVER/project/slug/tasks/export\n\n\n\n\n\n\nYou will find an interface that will allow you to export the Tasks, Task Runs and Results to \nJSON\n and \nCSV\n formats:\n\n\n\n\nThe previous methods will export all the tasks, results and task runs, \neven if they are not completed\n. When a task has been completed, in other words, when a task has collected the number of answers specified by the task (\nn_answers\n = 30 by default), a \nbrown button\n with the text \nDownload results\n will pop up, and if you click it all the answers for the given task will be shown in JSON format.\n\n\nYou can check which tasks are completed, in the following URL:\n\n\n1\nhttp://PYBOSSA-SERVER/project/slug\n\n\n\n\n\n\nAnd clicking on the \nTasks\n link in the \nleft local navigation\n, and\nthen click in the \nBrowse\n box:\n\n\n\n\nThen you will see which tasks are completed, and which ones you can download in \nJSON\n format:\n\n\n\n\nYou could download the results also using the API. For example, you\ncould write a small script that gets the list of tasks that have been\ncompleted using this URL:\n\n\n1\nGET http://PYBOSSA-SERVER/api/task?state=completed\n\n\n\n\n\n\n\n\nNote\n\n\nIf your project has more than 20 tasks, then you will need to use the \nAPI pagination\n, as by default PYBOSSA API only returns the first 20 items.\n\n\n\n\nOnce you have obtained the list of completed tasks, your script could\nstart requesting the collected answers for the given tasks:\n\n\n1\nGET http://PYBOSSA-SERVER/api/taskrun?task_id=TASK-ID\n\n\n\n\n\n\nThat way you will be able to get all the submitted answers by the\nvolunteers for the given task.\n\n\nExporting the task, task runs and results in JSON\n\n\nFor the \nJSON\n format, you will get\nall the output as a file that your browser will download, named:\nshort_name_tasks.json for the tasks, and short_name_task_runs.json\nfor the task runs.\n\n\nExporting the task, task runs and results to a CSV file\n\n\nWhile for the \nCSV\n format, you will get a CSV file that will be automatically saved on your computer.\n\n\nExporting the task, task runs and results to a CKAN server\n\n\nIf the server has been configured to allow you to export your\nproject\ns data to a CKAN server, the owner of the project will see another box that will give you the option to export the data to the CKAN server.\n\n\nTo use this method, you will need to add the CKAN API-KEY\nassociated with your account, otherwise, you will not be able to export the data, and a warning message will let you know it.\n\n\nAdding the CKAN API-KEY is simple. You only need to create an\naccount in the supported CKAN server, check your profile and copy the API-KEY. Then, open your PYBOSSA account page, edit it and paste the key in the section \nExternal Services\n.\n\n\n\n\nThen, you will be able to export the data to the CKAN server\nand host it there.\n\n\nPublishing results of your project\n\n\nSince v1.2.0, PYBOSSA automatically creates \nempty\n results when a task is completed.\n\n\nFor example, imagine your project is asking the following question in a set of images: \nDo you see a triangle in this picture?\n The possible\nanswers are: yes and no.\n\n\nYour project has configured the task redundancy to 5, so five people will answer that question for a given image (or task). When the 5\nth\n person sends the answer, the server marks the task as completed, and it creates a result for the given task associating the answers, the task and the project:\n\n\n1\n2\n3\n4\n5\n{\nid\n:\n \n1\n,\n\n \nproject_id\n:\n \n1\n,\n\n \ntask_id\n:\n \n1\n,\n\n \ntask_run_ids\n:\n \n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n],\n\n \ninfo\n:\n \nnull\n}\n\n\n\n\n\n\n\nAs in other PYBOSSA domain objects, a result has a JSON field named\n\ninfo\n that allows you to store the \nfinal result\n for that task\nusing the task_runs 1, 2, 3, 4, 5. Imagine that the five volunteers\nanswered: yes, then as you are the project owner you could update the info field with that value:\n\n\n1\n2\n3\n4\n5\n{\nid\n:\n \n1\n,\n\n \nproject_id\n:\n \n1\n,\n\n \ntask_id\n:\n \n1\n,\n\n \ntask_run_ids\n:\n \n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n],\n\n \ninfo\n:\n \n{\ntriangle\n:\n \nyes\n}}\n\n\n\n\n\n\n\nThe benefit of storing that information is that you can access these\ndata via the PYBOSSA API so you will be able to show the results, in\nyour result project section using the API.\n\n\nThis will allow you to build beautiful visualizations of your results on\nmaps, WebGL, etc.\n\n\nAPI Errors\n\n\nIf something goes wrong, you should get an error message similar to the following one:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n    \nERROR\n:\nroot\n:\npbclient\n.\ncreate_project\n\n    \n{\n\n        \naction\n:\n \nPOST\n,\n\n        \nexception_cls\n:\n \nIntegrityError\n,\n\n        \nexception_msg\n:\n \n(IntegrityError) duplicate key value violates unique constraint \\\nproject_name_key\\\n\\nDETAIL:  Key (name)=(Flickr Person Finder) already exists.\\n\n,\n\n        \nstatus\n:\n \nfailed\n,\n\n        \nstatus_code\n:\n \n415\n,\n\n        \ntarget\n:\n \nproject\n\n    \n}\n\n\n\n\n\n\n\nThe error message will have the information regarding the problems it has found when using the API.\n\n\n\n\nNote\n\n\nSince version 2.0.1 PYBOSSA enforces API Rate Limiting, so you might exceed the number of allowed requests, getting a 429 error. Please see \nrate-limiting section\n.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/build/tutorial/#project-tutorial", 
            "text": "This tutorial uses the demo project  Flickr Person  ( source\ncode ) built by Scifabric for PYBOSSA. This demo is a simple microtasking project where users have to answer the following question:  Do you see a human face in this photo?  The possible answers are:  Yes, No  and  I don t know . In other words, this is an example of a simple crowdsourcing project for image classification.  The demo project Flickr Person has two main components:   A Python script that creates the tasks in\n  PYBOSSA using the Flickr API, and  the task-presenter: an HTML + Javascript structure that will show\n  the tasks to the users and save their answers.   This tutorial uses the PYBOSSA  pbs command line tool  as it will show you how you can handle your project from the command line like a pro.", 
            "title": "Project Tutorial"
        }, 
        {
            "location": "/build/tutorial/#setting-things-up", 
            "text": "To run the tutorial, you will need to create an account in a\nPYBOSSA server. The PYBOSSA server could be running on your computer or in a third party server.  Once you have a PYBOSSA account, you will have access to your profile by clicking on your name, and then on the  My Settings  section. There, you will find your API-KEY.   This  API-KEY  will identify and authenticate you via the PYBOSSA API. It will allow you to create a project, add tasks, update the project, etc. As you will be the owner of the project, only you will be able to perform these actions, but anyone will be able to participate in your project.   Note  This tutorial uses the  pbs command line tool . You need to install it in your system before proceeding. Please, check the  pbs documentation for more information .", 
            "title": "Setting Things Up"
        }, 
        {
            "location": "/build/tutorial/#creating-the-project", 
            "text": "There are two possible methods for creating a project:   web-interface: click on your username, and you will see a section\n  named  projects  list. In that section, you will be able to create a project using the web interface.  API-interface: using the  pbs  command line tool.   For this tutorial, we are going to use the second option. The reason is that via the API you will have more flexibility than via the web interface.  Therefore, for creating the project, you will need two parameters:   the URL of the PYBOSSA server, and  an API-KEY to authenticate yourself in the PYBOSSA server.    Tip  If you are running a PYBOSSA server locally, you can omit the URL parameter as by default it uses the URL  http://localhost:5000 .", 
            "title": "Creating the Project"
        }, 
        {
            "location": "/build/tutorial/#getting-the-projects-source-code", 
            "text": "Now that we know where are we going to create the project (the server URL) and that we have an API key,  we can download the source code of the project. To get the code, we will clone the  Flickr\nPerson Finder Repository . This step will download all the code and scripts to your computer.   To clone the code, we will use Git. Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance.  If you are new to Git, we recommend you to take\nthis  free and on-line course  (it will take you\nonly 15 minutes!) where you will learn the basics, which are the main\nconcepts that you will need for cloning the demo project repository.  If you prefer to skip the course and take it in a later stage, the\ncommands that you need to clone the repository are:  1 git clone git://github.com/Scifabric/app-flickrperson.git   After running that command,  a new folder named  app-flickrperson  will be created from where you run the command.", 
            "title": "Getting the project's source code"
        }, 
        {
            "location": "/build/tutorial/#configuring-the-name-short-name-thumbnail-etc", 
            "text": "The Flickr Person Finder provides a file called  project.json  that has the following content:  1\n2\n3\n4\n5 { \n     name :   Flickr Person Finder , \n     short_name :   flickrperson , \n     description :   Image pattern recognition ,  }    This file, project.json identifies your project. It has its name, as well as a short description about it. As we are creating a new project, please, modify the  name  and  short_name  to make it yours.   Warning  The  name  and  short_name  of the project  must be unique ! Otherwise, you will get an error (IntegrityError) when creating the project.   Description  will be the text shown in the project listing page. It s important that you try to have a short description that explains what your project does.  Now that we have the  project.json  file ready, we can create the\nproject:  1 pbs --server server --api-key key create_project   This command will read the values from the  project.json  file and use them to create a draft project in the PYBOSSA server of your\nchoice.   Note  You can save some typing if you create a config file for pbs. Please,\ncheck the  pbs page  for more details.   If you want to check if the project exists, just open your web browser,\nand type in the following URL http://server/project/short_name  Where  short_name  is the value of the key with the same name in the file:  project.json . You should get a project page. Now, let s add some tasks to the project.", 
            "title": "Configuring the name, short name, thumbnail, etc."
        }, 
        {
            "location": "/build/tutorial/#providing-more-details-about-the-project", 
            "text": "Up to now we have created the project, added some tasks, but the project still lacks a lot of information. For example, a welcome page (or long description) of the project, so the users can know what this project is about.  If you check the source code, you will see that there is a file named long_description.md . This file has a lengthy description of the project, explaining different aspects of it.  This information is not mandatory. However it will be beneficial for\nthe users as they will get a bit more of information about the project\ngoals.  The file can be composed using Markdown or plain text.  The long description will be shown on the project home page:  1 https://yourserver/project/flickrperson   If you want to modify the description you have two options, edit it via the web interface, or change locally the  long_description.md  file and run pbs to update it:  1 pbs update_project", 
            "title": "Providing more details about the project"
        }, 
        {
            "location": "/build/tutorial/#adding-an-icon-to-the-project", 
            "text": "It is possible also to add a nice icon for the project. By default\nPYBOSSA will render a 100x100 pixels empty thumbnail for those projects that do not provide it.  If you want to add an icon you can do it by using the web interface.\nJust go to the  Settings  tab within your project. There, select the\nimage file you want to use and push the  Upload  button. That s all!", 
            "title": "Adding an icon to the project"
        }, 
        {
            "location": "/build/tutorial/#protecting-the-project-with-a-password", 
            "text": "If for any reason, you want to allow only certain people to contribute\nto your project, you can set a password. Thus, every time a user (either anonymous or authenticated) wants to contribute to the project, it will be asked to introduce the password. The user will then be able to contribute to the project for 30 minutes (this is a value by default, can be changed in every PYBOSSA server). After this time, the user will be asked again to introduce the password if the user wants to continue contributing, and so on.", 
            "title": "Protecting the project with a password"
        }, 
        {
            "location": "/build/tutorial/#adding-tasks-to-the-project", 
            "text": "Now that we have the project created, we can add some tasks to it. PYBOSSA will deliver the tasks for the users (authenticated and\nanonymous ones) and store the submitted answers in the PYBOSSA database so that you can process them in a later stage.  A PYBOSSA task is a JSON object with the information that needs to be processed by the volunteers. Usually, it will be a link to a media file (image, video, sound clip, PDF file, etc.) that needs to be processed.  PYBOSSA does not store any data; it only links data in the tasks . This feature is really cool as you will always have control of the data.   While PYBOSSA internally uses JSON for storing the data, you can add  tasks to your project using several formats:   CSV: a comma-separated spreadsheet-  Excel: xlsx from 2010. It imports the first sheet).  JSON: a lightweight data-interchange format.  PO (any po file that you want to translate).  PROPERTIES (any PROPERTIES file that you want to translate).   The demo project comes with a CSV sample file, which has the following structure:     question  url_m  link  url_b      Do you see a human face in this photo?  http://srv/img_m.jpg  http://srv/img  http://srv/img_b.jpg     Additionally there is a script named:  get_images.py  that will\ncontact Flickr, get the latest published photos to this web service, and\nsave them in JSON format as a file (flickr_tasks.json), with the same\nstructure as the CSV file (the keys are the same):  1\n2\n3 {   link :   http://www.flickr.com/photos/teleyinex/2945647308/ , \n   url_m :   http://farm4.staticflickr.com/3208/2945647308_f048cc1633_m.jpg ,  \n   url_b :   http://farm4.staticflickr.com/3208/2945647308_f048cc1633_b.jpg   }     Note  Flickr creates from the original image different cropped versions of the image. It uses a pattern to distinguish them:  _m  for medium size, and  _b  for the big ones. There are more options, so if you need more help in this matter, check the official  Flickr    documentation .   As we have a CSV file with some tasks, let s use it for adding some\ntasks to your project. For adding tasks using the CSV file,  all you have to do is the following:  1 pbs add_tasks --tasks-file flickr_tasks.csv   After running this command, you will see a progress bar that will let\nyou know when all the tasks have been added to your project. This has been really easy, right? As you can see, adding tasks to a project is really straightforward if you have a CSV or Excel file. Each row will become a task in PYBOSSA, and you only have to run one command to get all of them into your project.  As a bonus, let s also add some tasks using the  get_images.py  script. This script will contact Flickr, get the last 20 published photos, and then, save them in JSON format into a file called  flickr_tasks.json .  By doing this, we are showing you how you can easily extract data from third-party services and import them into a PYBOSSA project. Thus, let s start by running the command and getting the tasks:  1 python get_images.py   That command has created the file:  flickr_tasks.json . Now, let s use it to add the pictures to our project:  1 pbs add_tasks --tasks-file flickr_tasks.json   Done! Again, a progress bar will show us how long it takes to add all\nthe tasks. Now that we have all the tasks in the project, we can work on the next step: presenting the tasks to the volunteers.", 
            "title": "Adding tasks to the project"
        }, 
        {
            "location": "/build/tutorial/#tasks-redundancy", 
            "text": "PYBOSSA by default will send a task to different users (authenticated \nand anonymous users) until 30 different task runs are obtained for each task. This is usually known as  redundancy , and we will use it to validate the analysis of the task. The whole aim of this value is to avoid trolls to participate several times in the same task, answering wrong on purpose so that we can have a valid statistical analysis of the submitted contributions by the volunteers.  PYBOSSA does not allow the same user to submit more than one\nanswer (task runs in PYBOSSA lingo) to the same task. PYBOSSA identifies anonymous users via their IP, while registered users via their PYBOSSA id.  Why PYBOSSA uses a default value of 30? Well, because we are getting 30 observations for a task, and if the data is normal, at least 30 samples should be obtained to get that model. In any case, you can easily change this value for each, using the task settings section of your project (or via the API using the  pbs  tool).   If you want to improve the quality of the results for one task and get more confidence in the data when you will analyze it, you can modify the redundancy value with the pbs command. For example, to reduce the number of users that will analyze each task to ten, run the following command:  1 pbs add_tasks --tasks-file file --redundancy  10    In this case, the  n_answers  field will instruct PYBOSSA to send the task to 10 different users.", 
            "title": "Task's redundancy"
        }, 
        {
            "location": "/build/tutorial/#taskss-priority", 
            "text": "Every task can have its own  priority . You can modify it using the web interface, or the API.  A task with a higher priority will be delivered first to the volunteers.\nHence if you have a project where you need to analyze a task first due to an external event (a new data sample has been obtained), then you can modify the priority of the newly created task and deliver it first.  If you have a new batch of tasks, instead of only a task, that needs to be processed before all the available ones, you can do it with pbs as well. Run the following command:  1 pbs add_tasks --tasks-file file --priority  1    The priority is a number between 0.0 and 1.0. The highest priority is\n1.0 and the lowest is 0.0.", 
            "title": "Tasks's priority"
        }, 
        {
            "location": "/build/tutorial/#presenting-the-tasks-to-the-user", 
            "text": "Now that we have the tasks in our project, we have to present them to the user. For achieving this, you will have to create an HTML\ntemplate.  The template is the skeleton that will be used to load the data of the\ntasks: the question, the photos, user progress, input fields   submit\nbuttons to solve the task.  In this tutorial, Flickr Person uses a basic HTML skeleton and the PYBOSSA.JS  library to load the data of the tasks into the HTML template and take actions based on the users  answers.   Note  When an authenticated user submits a task, the task will save the user ID. For anonymous users, the submitted task will only have the user IP address.", 
            "title": "Presenting the Tasks to the user"
        }, 
        {
            "location": "/build/tutorial/#the-html-skeleton", 
            "text": "The  file  template.html  has the skeleton to show the tasks. The file has three sections:   A div for the warnings actions . When the user saves an   answer, a success feedback message is shown to the user. There is\n  also an error one for the failures.  A div for the Flickr image . This div will be populated\n  with the task photo URL and LINK data.  A div for the Questions   Answer buttons . There are\n  three buttons with the possible answers:  Yes ,  No , and  I don t\n  know .   By default, PYBOSSA includes the PYBOSSA.JS\nlibrary, so you don t have to include it in your template.  All you have to do is to add a script section where you will be loading\nthe tasks and saving the answers from the users:  .  This template file will be used by the pbs command line tool to add the task presenter to the project. You can add it running the following command:  1 pbs update_project    Note  You can also edit the HTML skeleton using the web interface. Once the project has been created in PYBOSSA you will see a button that\nallows you to edit the skeleton using a WYSIWYG editor.   In PYBOSSA every project has a  task presenter  endpoint: http://PYBOSSA-SERVER/project/SLUG/newtask   Note  The  slug  is the short name for the project, in this case flickrperson .   Loading the above endpoint will load the skeleton and trigger the\nJavaScript functions to get a task from the PYBOSSA server and populate it in the HTML skeleton.  The header and footer for the presenter are already provided by PYBOSSA, so the template only has to define the structure to present the data from the tasks to the users and the action buttons, input methods, etc. to retrieve and save the answer from the volunteers.", 
            "title": "The HTML Skeleton"
        }, 
        {
            "location": "/build/tutorial/#flickr-person-skeleton", 
            "text": "For this tutorial, we have a very simple DOM. At the\nbeginning you will find a big div that will be used to show some\nmessages to the user about the success of an action, for instance, that an answer has been saved or that a new task is being loaded. Take a look:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28 div   class = row \n   !-- Success and Error Messages for the user --  \n   div   class = span6 offset2   style = height:50px \n     div   id = success   class = alert alert-success   style = display:none; \n       a   class = close \u00d7 / a \n       strong Well done! / strong  Your answer has been saved\n     / div \n     div   id = loading   class = alert alert-info   style = display:none; \n       a   class = close \u00d7 / a \n      Loading next task...\n     / div \n     div   id = taskcompleted   class = alert alert-info   style = display:none; \n       strong The task has been completed! / strong  Thanks a lot!\n     / div \n     div   id = finish   class = alert alert-success   style = display:none; \n       strong Congratulations! / strong  You have participated in all available tasks!\n       br / \n       div   class = alert-actions \n         a   class = btn small   href = / Go back / a \n         a   class = btn small   href = /project or, Check other projects / a \n       / div \n     / div \n     div   id = error   class = alert alert-error   style = display:none; \n       a   class = close \u00d7 / a \n       strong Error! / strong  Something went wrong, please contact the site administrators\n     / div \n   / div   !-- End Success and Error Messages for the user --  / div   !-- End of Row --    Then we have the skeleton where we will be loading the Flickr photos, and the submission buttons for the user.  First, it creates a row that will have two columns (in Bootstrap a row\ncan have 12 columns), so we will populate a structure like this:  1\n2\n3\n4\n5\n6\n7 div   class = row skeleton \n     !-- First column for showing the question, submission buttons and user      progress -- \n     div   class = span6 / div \n     !-- Second column for showing the Flickr photo -- \n     div   class = span6 / div  / div    The content for the first column where we will be showing the question of the task, the submission buttons with the answers: yes, no, and I don t know, and obviously the user progress for the user, so he can know how many tasks he has completed and how many are left. The code is the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 div   class = span6  !-- Start of Question and Submission DIV (column) -- \n     h1   id = question Question / h1   !-- The question will be loaded here -- \n     div   id = answer   !-- Start DIV for the submission buttons -- \n         !-- If the user clicks this button, the saved answer will be value= yes -- \n         button   class = btn btn-success btn-answer   value = Yes i   class = icon icon-white icon-thumbs-up / i  Yes / button \n         !-- If the user clicks this button, the saved answer will be value= no -- \n         button   class = btn btn-danger btn-answer   value = No i   class = icon icon-white icon-thumbs-down / i  No / button \n         !-- If the user clicks this button, the saved answer will be value= NotKnown -- \n         button   class = btn btn-answer   value = NotKnown i   class = icon icon-white icon-question-sign / i  I don t know / button \n     / div !-- End of DIV for the submission buttons -- \n     !-- Feedback items for the user -- \n     p You are working now on task:  span   id = task-id   class = label label-warning # / span / p \n     p You have completed:  span   id = done   class = label label-info / span  tasks from\n     !-- Progress bar for the user -- \n     span   id = total   class = label label-inverse / span / p \n     div   class = progress progress-striped \n         div   id = progress   rel = tooltip   title = #   class = bar   style = width: 0%; / div \n     / div \n     !--           This project uses Disqus to allow users to provide some feedback.          The next section includes a button that when a user clicks on it will          load the comments, if any, for the given task      -- \n     div   id = disqus_show_btn   style = margin-top:5px; \n         button   class = btn btn-primary btn-large btn-disqus   onclick = loadDisqus() i   class = icon-comments / i  Show comments / button \n         button   class = btn btn-large btn-disqus   onclick = loadDisqus()   style = display:none i   class = icon-comments / i  Hide comments / button \n     / div !-- End of Disqus Button section -- \n     !-- Disqus thread for the given task -- \n     div   id = disqus_thread   style = margin-top:5px;display:none / div  / div !-- End of Question and Submission DIV (column) --    Then we will add the code for showing the photos. This second column will be much simpler:  1\n2\n3\n4\n5 div   class = span6 !-- Start of Photo DIV (columnt) -- \n     a   id = photo-link   href = # \n         img   id = photo   src = http://img339.imageshack.us/img339/9017/loadingo.png   style = max-width=100% \n     / a  / div !-- End of Photo DIV (column) --    In the above code, we use a placeholder  loadingo.png  that we have\ncreated previously, so we show an image while the first one from the\ntask is getting loaded.  The second section of the skeleton, if we join the previous snippets of code will be like this:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37 div   class = row skeleton   !-- Start Skeleton Row-- \n     div   class = span6  !-- Start of Question and Submission DIV (column) -- \n         h1   id = question Question / h1   !-- The question will be loaded here -- \n         div   id = answer   !-- Start DIV for the submission buttons -- \n             !-- If the user clicks this button, the saved answer will be value= yes -- \n             button   class = btn btn-success btn-answer   value = Yes i   class = icon icon-white icon-thumbs-up / i  Yes / button \n             !-- If the user clicks this button, the saved answer will be value= no -- \n             button   class = btn btn-danger btn-answer   value = No i   class = icon icon-white icon-thumbs-down / i  No / button \n             !-- If the user clicks this button, the saved answer will be value= NotKnown -- \n             button   class = btn btn-answer   value = NotKnown i   class = icon icon-white icon-question-sign / i  I don t know / button \n         / div !-- End of DIV for the submission buttons -- \n         !-- Feedback items for the user -- \n         p You are working now on task:  span   id = task-id   class = label label-warning # / span / p \n         p You have completed:  span   id = done   class = label label-info / span  tasks from\n         !-- Progress bar for the user -- \n         span   id = total   class = label label-inverse / span / p \n         div   class = progress progress-striped \n             div   id = progress   rel = tooltip   title = #   class = bar   style = width: 0%; / div \n         / div \n         !--               This project uses Disqus to allow users to provide some feedback.              The next section includes a button that when a user clicks on it will              load the comments, if any, for the given task          -- \n         div   id = disqus_show_btn   style = margin-top:5px; \n             button   class = btn btn-primary btn-large btn-disqus   onclick = loadDisqus() i   class = icon-comments / i  Show comments / button \n             button   class = btn btn-large btn-disqus   onclick = loadDisqus()   style = display:none i   class = icon-comments / i  Hide comments / button \n         / div !-- End of Disqus Button section -- \n         !-- Disqus thread for the given task -- \n         div   id = disqus_thread   style = margin-top:5px;display:none / div \n     / div !-- End of Question and Submission DIV (column) -- \n     div   class = span6 !-- Start of Photo DIV (column) -- \n         a   id = photo-link   href = # \n             img   id = photo   src = http://img339.imageshack.us/img339/9017/loadingo.png   style = max-width=100% \n         / a \n     / div !-- End of Photo DIV (columnt) --  / div !-- End of Skeleton Row --", 
            "title": "Flickr Person Skeleton"
        }, 
        {
            "location": "/build/tutorial/#loading-the-task-data", 
            "text": "Now that we have set up the  skeleton  to load the task data, let s see\nthe JavaScript that we have to write to load the pictures from\nFlickr and ask the volunteer an answer about them.  All the action takes place in the  file   template.html  script section.  The script is very simple; it uses the PYBOSSA.JS library to get a new task and to submit and save the answer in the server.  PYBOSSA.JS implements two methods that have to be overridden with some logic, as each project will have a different need, i.e., some projects will be loading another type of data in a different skeleton:   pybossa.taskLoaded(function(task, deferred){});  pybossa.presentTask(function(task, deferred){});   The  pybossa.taskLoaded  method will be in charge of adding new  objects to the DOM once they have been loaded from\nFlickr (the URL is provided by the task object in the field\ntask.info.url_b), and resolve the deferred object, so another task for\nthe current user can be pre-loaded. The code is the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 pybossa . taskLoaded ( function ( task ,   deferred )   { \n     if   (   ! $ . isEmptyObject ( task )   )   { \n         // load image from flickr \n         var   img   =   $ ( img / ); \n         img . load ( function ()   { \n             // continue as soon as the image is loaded \n             deferred . resolve ( task ); \n         }); \n         img . attr ( src ,   task . info . url_b ). css ( height ,   460 ); \n         img . addClass ( img-polaroid ); \n         task . info . image   =   img ; \n     } \n     else   { \n         deferred . resolve ( task ); \n     }  });    The  pybossa.presentTask  method will be called when a task has been obtained from the server:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 {   question :   project . description , \n   task :   {  \n           id :   value , \n           ..., \n           info :   {  \n                   url_m :  \n                   link : \n                  }  \n         }   }    That JSON object will be accessible via the task object passed as an\nargument to the pybossa.presentTask method. First, we will need to check that we are not getting an empty object, as it will mean that there are no more available tasks for the current user. In that case, we should hide the skeleton, and say thanks to the user as he has participated in all the tasks of the project.  If the task object is not empty, then we have a task to load into the skeleton . In this demo project, we will update the\nquestion, adding the photo to the DOM, refreshing the user progress and add some actions to the submission buttons so we can save the answer of the volunteer.  The PYBOSSA.JS library treats the user input as an  async function. \nThis is why the function gets a deferred object, as this object will be resolved  when the user clicks on one of the possible answers. We use this approach to load in the background the next task for the user while the volunteer is solving the current one. Once the answer has been saved in the server, we resolve the deferred:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32 pybossa . presentTask ( function ( task ,   deferred )   { \n     if   (   ! $ . isEmptyObject ( task )   )   { \n         loadUserProgress (); \n         $ ( #photo-link ). html ( ). append ( task . info . image ); \n         $ ( #photo-link ). attr ( href ,   task . info . link ); \n         $ ( #question ). html ( task . info . question ); \n         $ ( #task-id ). html ( task . id ); \n         $ ( .btn-answer ). off ( click ). on ( click ,   function ( evt )   { \n             var   answer   =   $ ( evt . target ). attr ( value ); \n             if   ( typeof   answer   !=   undefined )   { \n                 //console.log(answer); \n                 pybossa . saveTask ( task . id ,   answer ). done ( function ()   { \n                     deferred . resolve (); \n                 }); \n                 $ ( #loading ). fadeIn ( 500 ); \n                 if   ( $ ( #disqus_thread ). is ( :visible ))   { \n                     $ ( #disqus_thread ). toggle (); \n                     $ ( .btn-disqus ). toggle (); \n                 } \n             } \n             else   { \n                 $ ( #error ). show (); \n             } \n         }); \n         $ ( #loading ). hide (); \n     } \n     else   { \n         $ ( .skeleton ). hide (); \n         $ ( #loading ). hide (); \n         $ ( #finish ). fadeIn ( 500 ); \n     }  });    It is important to note that in this method we bind the  on-click \naction for the  Yes ,  No  and  I don t know  buttons to call the above snippet:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 $ ( .btn-answer ). off ( click ). on ( click ,   function ( evt )   { \n     var   answer   =   $ ( evt . target ). attr ( value ); \n     if   ( typeof   answer   !=   undefined )   { \n         //console.log(answer); \n         pybossa . saveTask ( task . id ,   answer ). done ( function ()   { \n             deferred . resolve (); \n         }); \n         $ ( #loading ). fadeIn ( 500 ); \n         if   ( $ ( #disqus_thread ). is ( :visible ))   { \n             $ ( #disqus_thread ). toggle (); \n             $ ( .btn-disqus ). toggle (); \n         } \n     } \n     else   { \n         $ ( #error ). show (); \n     }  });    If your project uses other input methods, you will have to adapt this to fit your project needs.  Finally, the pybossa.presentTask calls a method named loadUserProgress . This method is in charge of getting the user\nthe progress of the user and update the progress bar accordingly:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 function   loadUserProgress ()   { \n     pybossa . userProgress ( flickrperson ). done ( function ( data ){ \n         var   pct   =   Math . round (( data . done * 100 ) / data . total ); \n         $ ( #progress ). css ( width ,   pct . toString ()   + % ); \n         $ ( #progress ). attr ( title ,   pct . toString ()   +   % completed! ); \n         $ ( #progress ). tooltip ({ placement :   left });  \n         $ ( #total ). text ( data . total ); \n         $ ( #done ). text ( data . done ); \n     });  }    You can update the code only to show the number of answers, or remove it entirely. However, the volunteers will benefit from this type of information as they will be able to know how many tasks they have to do, giving an idea of progress while they contribute to the project.  Finally, we only need in our code to tell pybossa.js to run our project:  1 pybossa . run ( flickrperson )", 
            "title": "Loading the Task data"
        }, 
        {
            "location": "/build/tutorial/#saving-the-answer", 
            "text": "Once the task has been presented, users can click on the answer\nbuttons:  Yes ,  No  or  I don t know .  Yes  and  No  save the answer in the DB with information about the task and the answer, while the button  I don t know  loads another task as sometimes the image is not available.  To submit and save the answer from the user, we will use again\nthe PYBOSSA.JS library. In this case:  1 pybossa . saveTask (   taskid ,   answer   )    The  pybossa.saveTask  method saves an answer for a given task. In the previous section, we show that in the pybossa.presentTask method the  task-id  can be obtained, as we will be passing the object to saveTask method.  The method allows us to give a successful pop-up feedback for the user, so you can use the following structure to warn the user and tell him that his answer has been successfully saved:  1\n2\n3\n4\n5\n6\n7\n8 pybossa . saveTask (   taskid ,   answer   ). done ( \n   function (   data   )   { \n       // Show the feedback div \n       $ ( #success ). fadeIn ();  \n       // Fade out the pop-up after a 1000 miliseconds \n       setTimeout ( function ()   {   $ ( #success ). fadeOut ()   },   1000 ); \n   };  );", 
            "title": "Saving the answer"
        }, 
        {
            "location": "/build/tutorial/#keeping-track-of-the-time-spent-by-volunteers-solving-a-task", 
            "text": "Since v1.1.3, PYBOSSA records a timestamp, for every task run, of the contributed task runs. This is stored in the  created  attribute of the Task Runs.  Now, with the  finish_time  attribute, we will be able to know how\nmuch time the volunteer has spent completing the task: (time spent =\nfinish_time - created)   Tip  This information is only shown to the owner of the project.", 
            "title": "Keeping track of the time spent by volunteers solving a task"
        }, 
        {
            "location": "/build/tutorial/#updating-the-template-for-all-the-tasks", 
            "text": "It is possible to update the template of the project without having to re-create the project and its tasks. To update the template,\nyou only have to modify the file  template.html  and run the following command:  1 pbs update_project   You can also use the web interface to do it, and see the changes in real time before saving the results. Check your project page, go to the tasks section, and look for the  Edit the task presenter  button.", 
            "title": "Updating the template for all the tasks"
        }, 
        {
            "location": "/build/tutorial/#testing-the-task-presenter", 
            "text": "To test the project task presenter, go to the following URL     http://PYBOSSA-SERVER/project/SLUG/presenter  The presenter will load one task, and you will be able to submit and\nsave one answer for the current task.", 
            "title": "Testing the task presenter"
        }, 
        {
            "location": "/build/tutorial/#publishing-the-project", 
            "text": "Until now, the project has been in testing mode. This means that you can play with your project as much as you want. You can invite a few friends or colleauges to test it, just to know that everything works.   In this mode PYBOSSA will work as a published project, so you can test it, however, it is not published so it s not visible to users on the server unless you share the link to it.   Once you are happy, you can publish the project. When you publish the project, PYBOSSA will clean your tests and leave it clean for your contributors. Thus, don t be afraid and test as much as you want!", 
            "title": "Publishing the project"
        }, 
        {
            "location": "/build/tutorial/#tutorial", 
            "text": "In general, users will like to have some feedback when accessing for the very first time your project. Usually, the overview page of your project will not be enough, so you can build a tutorial (a web page) that will explain to the volunteer how he can participate in the\nproject.  PYBOSSA will detect if the user is accessing for the very first time\nyour project, so in that case, it will load the  tutorial , if your project has one.  Adding a tutorial is simple: you only have to create a file named tutorial.html  and load the content of the file using pbs:  1 pbs update_project   The tutorial could have whatever you like: videos, nice animations, etc. PYBOSSA will render for you the header and the footer, so you only have to focus on the content. You can copy the template.html file and use it as a draft of your tutorial or just include a video of yourself explaining why your project is important and how, as a volunteer, you can contribute.  If your project has a tutorial, you can access it directly in\nthis endpoint:  1 http://server/project/tutorial", 
            "title": "Tutorial"
        }, 
        {
            "location": "/build/tutorial/#advance-tutorial-helping-materials", 
            "text": "While the previous solution works for most of the projects, your project might need something special: visual clues so users can easily identify sounds, patterns, etc. easily. The default tutorial does not allow you to curate/create a list of helping materials that could be used directly in the presenter to explain how for example you can identify cancer cells, or specific species of animals.  For this reason, PYBOSSA now supports an API endpoint for helping\nmaterials: api/helpingmaterial.  This endpoint allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build an interactive tutorial.  Helping materials allow you to upload images via the endpoint using the multipart/form-data Content-Type.  For example, imagine that you want to add a photo of an animal and it s description, so users can easily identify it (or use it as pre-loaded\nanswer for classifying pictures of animals). In this case, you can do\nthe following (using the popular Python requests library, but you can\nuse any other programming language):   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 import   requests  url   =   https://server/api/helpingpoint?api_key=YOURKEY  # Upload a picture  files   =   { file :   open ( test.jpg ,   rb )}  data   =   { project_id :   YOURPROJECT_ID }  r   =   requests . post ( url ,   data = data ,   files = files )  # Get the created helping material  hp   =   r . json ()  # Add the meta-data of the picture  url   =   https://server/api/helpingpoint/ %s ?api_key=YOURKEY   %   hp [ id ]  info   =   { popular_name :   elephant ,   scientific_name :   loxodonta }  r   =   requests . put ( url ,   json = { info :   info })    You can add as many files as you want. Then, from any place you can\nquery the helping material endpoint to retrieve the example/tutorial\nmaterials for helping your users.   Tip   PBS and helping materials\n     You can use PBS to add helping materials from an Excel or CSV file. Check the  documentation .", 
            "title": "Advance tutorial (helping materials)"
        }, 
        {
            "location": "/build/tutorial/#providing-some-i18n-support", 
            "text": "Sometimes, you may want to provide the task interface in their language. To support this, you can access their locale via Javascript in an effortless way, as we ve placed the user locale in a hidden  div  node:  1 var   userLocale   =   document . getElementById ( PYBOSSA_USER_LOCALE ). textContent . trim ();    The way you use it after that is up to you. But let s see an example of\nhow you can use it to make a tutorial that automatically shows the\nstrings in the locale of the user.   Warning  Anonymous users will be only shown with  en  language by default. This feature only works for authenticated users that choose their locale in their account. You can, however, load the translated strings using the browser preferred language.   First of all, check the  tutorial.html file . You will see it consists on some HTML plus some Javascript inside a script tag to handle the different steps of the tutorial. Here you have a snippet of HTML tutorial file:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32 div   class = row \n     div   class = col-md-12 \n         div   id = modal   class = modal hide fade \n             div   class = modal-header \n                 h3 Flickr Person Finder tutorial / h3 \n             / div \n             div   id = 0   class = modal-body   style = display:none \n                 p strong Hi! / strong  This is a  strong demo project / strong  that shows how you can do pattern recognition on pictures or images using the PYBOSSA framework.\n                / p \n             / div \n             div   id = 1   class = modal-body   style = display:none \n                 p The project is really simple. It loads a photo from  a   href = http://flickr.com Flickr / a  and asks you this question:  strong Do you see a human in this photo? / strong / p \n                 img   src = http://farm7.staticflickr.com/6109/6286728068_2f3c6912b8_q.jpg   class = img-thumbnail / \n                 p You will have 3 possible answers:\n                 ul \n                     li Yes, / li \n                     li No, and / li \n                     li I don t know / li \n                 / ul \n                 / p \n                 p \n                 / p \n                 p All you have to do is to click in one of the three possible answers and you will be done. This demo project could be adapted for more complex pattern recognition problems. / p \n             / div \n             div   class = modal-footer \n                 a   id = prevBtn   href = #   onclick = showStep( prev )   class = btn Previous / a \n                 a   id = nextBtn   href = #   onclick = showStep( next )   class = btn btn-success Next / a \n                 a   id = startContrib   href = ../flickrperson/newtask   class = btn btn-primary   style = display:none i   class = fa fa-thumbs-o-up / i  Try the demo! / a \n             / div \n         / div \n     / div  / div    To add multilingual support, copy and paste it is as many times as\nlanguages you re planning to support.  Then, add to each of them an id in the outermost  div  which\ncorresponds to the name of the locale ( en  for English,  es \nfor Spanish, etc.), and translate the inner text of it, but leave all\nthe HTML the same in every version (tags, ids, classes, etc.) like:  1\n2\n3\n4 div   id = es   class = row \n   Your translated version of the HTML goes here, but only change the text,\n   NOT the HTML tags, IDs or classes. / div    Finally, in the Javascript section of the tutorial, you will need to add some extra code to enable multilingual tutorials. Thus, modify the\njavascript from:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 var   step   =   - 1 ;  function   showStep ( action )   { \n     $ ( #   +   step ). hide (); \n     if   ( action   ==   next )   { \n         step   =   step   +   1 ; \n     } \n     if   ( action   ==   prev )   { \n         step   =   step   -   1 ; \n     } \n     if   ( step   ==   0 )   { \n         $ ( #prevBtn ). hide (); \n     } \n     else   { \n         $ ( #prevBtn ). show (); \n     } \n\n     if   ( step   ==   1   )   { \n         $ ( #nextBtn ). hide (); \n         $ ( #startContrib ). show (); \n     } \n     $ ( #   +   step ). show ();  }  showStep ( next );  $ ( #modal ). modal ( show );    To:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 var   languages   =   [ en ,   es ]  $ ( document ). ready ( function (){ \n     var   userLocale   =   document . getElementById ( PYBOSSA_USER_LOCALE ). textContent . trim (); \n     languages . forEach ( function ( lan ){ \n         if   ( lan   !==   userLocale )   { \n             var   node   =   document . getElementById ( lan ); \n             if   ( node . parentNode )   { \n                 node . parentNode . removeChild ( node ); \n             } \n         } \n     }); \n     var   step   =   - 1 ; \n     function   showStep ( action )   { \n         $ ( #   +   step ). hide (); \n         if   ( action   ==   next )   { \n             step   =   step   +   1 ; \n         } \n         if   ( action   ==   prev )   { \n             step   =   step   -   1 ; \n         } \n         if   ( step   ==   0 )   { \n             $ ( #prevBtn ). hide (); \n         } \n         else   { \n             $ ( #prevBtn ). show (); \n         } \n\n         if   ( step   ==   1   )   { \n             $ ( #nextBtn ). hide (); \n             $ ( #startContrib ). show (); \n         } \n         $ ( #   +   step ). show (); \n     } \n     showStep ( next ); \n     $ ( #modal ). modal ( show );  });    Notice the languages array variable defined at the beginning?. It s\nvital that you place there the IDs you ve given to the different translated versions of your HTML for the tutorial. The rest of the\nscript will only compare the locale of the user that is seeing the\ntutorial and delete all the HTML that is not in his language, so that\nonly the tutorial that fits his locale settings is shown.", 
            "title": "Providing some I18n support"
        }, 
        {
            "location": "/build/tutorial/#another-method-to-support-i18n", 
            "text": "Another option for translating your project to different languages is\nusing a JSON object like this:  1\n2\n3\n4\n5\n6\n7\n8\n9 messages   =   { en :  \n                { welcome :   Hello World!,                   bye :  Good   bye !                 },               es : \n                { welcome :   Hola mundo! , \n                 bye :   Hasta luego! \n                } \n            }    This object can be placed in the  tutorial.html  or  template.html  file to load the proper strings translated to your users.  The logic is very simple. With the following code you grab the language that should be loaded for the current user:  1 var   userLocale   =   document . getElementById ( PYBOSSA_USER_LOCALE ). textContent . trim ();    Now, use userLocale to load the strings. For example, for template.html  and the Flickrperson demo project, you will find the\nfollowing code at the start of the script:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53 // Default language  var   userLocale   =   en ;  // Translations  var   messages   =   { en :   { \n                         i18n_welldone :   Well done! , \n                         i18n_welldone_text :   Your answer has been saved , \n                         i18n_loading_next_task :   Loading next task... , \n                         i18n_task_completed :   The task has been completed! , \n                         i18n_thanks :   Thanks a lot! , \n                         i18n_congratulations :   Congratulations , \n                         i18n_congratulations_text :   You have participated in all available tasks! , \n                         i18n_yes :   Yes , \n                         i18n_no_photo :   No photo , \n                         i18n_i_dont_know :   I don t know , \n                         i18n_working_task :   You are working now on task: , \n                         i18n_tasks_completed :   You have completed: , \n                         i18n_tasks_from :   tasks from , \n                         i18n_show_comments :   Show comments: , \n                         i18n_hide_comments :   Hide comments: , \n                         i18n_question :   Do you see a human face in this photo? , \n                       }, \n                 es :   { \n                         i18n_welldone :   Bien hecho! , \n                         i18n_welldone_text :   Tu respuesta ha sido guardada , \n                         i18n_loading_next_task :   Cargando la siguiente tarea... , \n                         i18n_task_completed :   La tarea ha sido completadas! , \n                         i18n_thanks :   Much\u00edsimas gracias! , \n                         i18n_congratulations :   Enhorabuena , \n                         i18n_congratulations_text :   Has participado en todas las tareas disponibles! , \n                         i18n_yes :   S\u00ed , \n                         i18n_no_photo :   No hay foto , \n                         i18n_i_dont_know :   No lo s\u00e9 , \n                         i18n_working_task :   Est\u00e1s trabajando en la tarea: , \n                         i18n_tasks_completed :   Has completado: , \n                         i18n_tasks_from :   tareas de , \n                         i18n_show_comments :   Mostrar comentarios , \n                         i18n_hide_comments :   Ocultar comentarios , \n                         i18n_question :   \u00bfVes una cara humana en esta foto? , \n                       }, \n                };  // Update userLocale with server side information \n  $ ( document ). ready ( function (){ \n      userLocale   =   document . getElementById ( PYBOSSA_USER_LOCALE ). textContent . trim ();  });  function   i18n_translate ()   { \n     var   ids   =   Object . keys ( messages [ userLocale ]) \n     for   ( i = 0 ;   i ids . length ;   i ++ )   { \n         console . log ( Translating:    +   ids [ i ]); \n         document . getElementById ( ids [ i ]). innerHTML   =   messages [ userLocale ][ ids [ i ]]; \n     }  }    First, we define the default locale,  en  for English. Then, we create a\nmessages dictionary with all the ids that we want to translate. Finally, we add the languages that we want to support.  As you can see, it s quite simple as you can share the messages object with your volunteers so that you can get many more translations for your project smoothly.  Finally, we need actually to load those translated strings into the\ntemplate. For doing this step, all we ve to do is adding the following\ncode to our  template.html  file at the function pybossa.presentTask:  1\n2\n3\n4\n5 pybossa . presentTask ( function ( task ,   deferred )   { \n     if   (   ! $ . isEmptyObject ( task )   )   { \n         loadUserProgress (); \n         i18n_translate (); \n         ...    Done! When the task is loaded, the strings are translated and the\nproject will be shown in the user language.", 
            "title": "Another method to support I18n"
        }, 
        {
            "location": "/build/tutorial/#updating-projects-status", 
            "text": "You can share the progress of the project creating a blog. Every PYBOSSA project includes a blog where you will be able to write about your project regularly.  You can use Markdown or plain text for the content of the posts. And you will also be able to edit them or delete after creation if you want.  To write a post go to the project  Settings  tab and there you\nwill find an option to write, read or delete your blog posts.  You can use the endpoint /api/blogpost to also add blogposts, update\nthem and delete them. The api endpoint allows you as well to upload a picture to your blogpost.  This endpoint allows you to add JSON and media files (images, videos or sounds) that you can use with your blogpost.  You can use this endpoint for uploading images via the endpoint using the multipart/form-data Content-Type.  For example, imagine that you want to add a photo as a cover and then the body of the blogpost. In this case, you can do the following (using the popular Python requests library, but you can use any other\nprogramming language):   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 import   requests  url   =   https://server/api/blogpost?api_key=YOURKEY  # Upload a picture  files   =   { file :   open ( test.jpg ,   rb )}  data   =   { project_id :   YOURPROJECT_ID ,   title = title ,   body = body }  r   =   requests . post ( url ,   data = data ,   files = files )  # Get the created blogpost  bp   =   r . json ()  # Update the body with the meta-data of the picture  url   =   https://server/api/blogpost/ %s ?api_key=YOURKEY   %   bp [ id ]  body   =   hello ![img]( %s )   %   bp [ media_url ]  r   =   requests . put ( url ,   json = { body :   body })", 
            "title": "Updating project's status"
        }, 
        {
            "location": "/build/tutorial/#exporting-the-projects-data", 
            "text": "You can export all the available data  your project in three different ways:   JSON , an open standard designed for human-readable data interchange, or  CSV , a file\n    that stores tabular data (numbers and text) in plain-text form and\n    that can be opened with almost any spreadsheet software, or  CKAN  web server, a powerful data management\n    a system that makes data accessible \u2013by providing tools to streamline publishing, sharing, finding and using data.   For exporting the data, all you have to do is to visit the following URL\nin your web-browser:  1 http://PYBOSSA-SERVER/project/slug/tasks/export   You will find an interface that will allow you to export the Tasks, Task Runs and Results to  JSON  and  CSV  formats:   The previous methods will export all the tasks, results and task runs,  even if they are not completed . When a task has been completed, in other words, when a task has collected the number of answers specified by the task ( n_answers  = 30 by default), a  brown button  with the text  Download results  will pop up, and if you click it all the answers for the given task will be shown in JSON format.  You can check which tasks are completed, in the following URL:  1 http://PYBOSSA-SERVER/project/slug   And clicking on the  Tasks  link in the  left local navigation , and\nthen click in the  Browse  box:   Then you will see which tasks are completed, and which ones you can download in  JSON  format:   You could download the results also using the API. For example, you\ncould write a small script that gets the list of tasks that have been\ncompleted using this URL:  1 GET http://PYBOSSA-SERVER/api/task?state=completed    Note  If your project has more than 20 tasks, then you will need to use the  API pagination , as by default PYBOSSA API only returns the first 20 items.   Once you have obtained the list of completed tasks, your script could\nstart requesting the collected answers for the given tasks:  1 GET http://PYBOSSA-SERVER/api/taskrun?task_id=TASK-ID   That way you will be able to get all the submitted answers by the\nvolunteers for the given task.", 
            "title": "Exporting the project's data"
        }, 
        {
            "location": "/build/tutorial/#exporting-the-task-task-runs-and-results-in-json", 
            "text": "For the  JSON  format, you will get\nall the output as a file that your browser will download, named:\nshort_name_tasks.json for the tasks, and short_name_task_runs.json\nfor the task runs.", 
            "title": "Exporting the task, task runs and results in JSON"
        }, 
        {
            "location": "/build/tutorial/#exporting-the-task-task-runs-and-results-to-a-csv-file", 
            "text": "While for the  CSV  format, you will get a CSV file that will be automatically saved on your computer.", 
            "title": "Exporting the task, task runs and results to a CSV file"
        }, 
        {
            "location": "/build/tutorial/#exporting-the-task-task-runs-and-results-to-a-ckan-server", 
            "text": "If the server has been configured to allow you to export your\nproject s data to a CKAN server, the owner of the project will see another box that will give you the option to export the data to the CKAN server.  To use this method, you will need to add the CKAN API-KEY\nassociated with your account, otherwise, you will not be able to export the data, and a warning message will let you know it.  Adding the CKAN API-KEY is simple. You only need to create an\naccount in the supported CKAN server, check your profile and copy the API-KEY. Then, open your PYBOSSA account page, edit it and paste the key in the section  External Services .   Then, you will be able to export the data to the CKAN server\nand host it there.", 
            "title": "Exporting the task, task runs and results to a CKAN server"
        }, 
        {
            "location": "/build/tutorial/#publishing-results-of-your-project", 
            "text": "Since v1.2.0, PYBOSSA automatically creates  empty  results when a task is completed.  For example, imagine your project is asking the following question in a set of images:  Do you see a triangle in this picture?  The possible\nanswers are: yes and no.  Your project has configured the task redundancy to 5, so five people will answer that question for a given image (or task). When the 5 th  person sends the answer, the server marks the task as completed, and it creates a result for the given task associating the answers, the task and the project:  1\n2\n3\n4\n5 { id :   1 , \n  project_id :   1 , \n  task_id :   1 , \n  task_run_ids :   [ 1 , 2 , 3 , 4 , 5 ], \n  info :   null }    As in other PYBOSSA domain objects, a result has a JSON field named info  that allows you to store the  final result  for that task\nusing the task_runs 1, 2, 3, 4, 5. Imagine that the five volunteers\nanswered: yes, then as you are the project owner you could update the info field with that value:  1\n2\n3\n4\n5 { id :   1 , \n  project_id :   1 , \n  task_id :   1 , \n  task_run_ids :   [ 1 , 2 , 3 , 4 , 5 ], \n  info :   { triangle :   yes }}    The benefit of storing that information is that you can access these\ndata via the PYBOSSA API so you will be able to show the results, in\nyour result project section using the API.  This will allow you to build beautiful visualizations of your results on\nmaps, WebGL, etc.", 
            "title": "Publishing results of your project"
        }, 
        {
            "location": "/build/tutorial/#api-errors", 
            "text": "If something goes wrong, you should get an error message similar to the following one:  1\n2\n3\n4\n5\n6\n7\n8\n9      ERROR : root : pbclient . create_project \n     { \n         action :   POST , \n         exception_cls :   IntegrityError , \n         exception_msg :   (IntegrityError) duplicate key value violates unique constraint \\ project_name_key\\ \\nDETAIL:  Key (name)=(Flickr Person Finder) already exists.\\n , \n         status :   failed , \n         status_code :   415 , \n         target :   project \n     }    The error message will have the information regarding the problems it has found when using the API.   Note  Since version 2.0.1 PYBOSSA enforces API Rate Limiting, so you might exceed the number of allowed requests, getting a 429 error. Please see  rate-limiting section .", 
            "title": "API Errors"
        }, 
        {
            "location": "/build/project_settings/", 
            "text": "Configuring the Project\n\n\nIf you are the owner of a project, you can configure it using the web\ninterface. When you are the owner (or an administrator), a new link in the left local navigation bar of the project will appear with the name \nSettings\n.\n\n\n\n\nThe \nSettings\n page will give you the following options:\n\n\n\n\nProject details\n: here you will be able to change the name of the\n   project, the description, icon, etc.\n\n\nTask settings\n: this button will open the task-settings page where\n   you will be able to configure the tasks\n scheduler, change the tasks\n priority, modify the tasks\n redundancy and delete the tasks and its associated task runs (also known as answers).\n\n\nProject delete\n: if you click this button you will be able to remove the project from the system entirely. A big warning message will be shown before allowing you to delete the project.\n\n\nProject blog\n: if you click this button, you will be able to write a\n   new blog post to be shared with the volunteers.\n\n\n\n\n\n\nOfficial support\n\n\nIf you need help configuring your PYBOSSA server, \ncontact us\n. We offer official support, and we would love to work with your PYBOSSA server.\n\n\n\n\nEdit the project details\n\n\nIn this section you can change the following parameters of your project:\n\n\n\n\nName\n: the full name of your project, i.e., Flickr Person Finder\n\n\nShort name\n: (also known as \nslug\n) the string that will be used\n  to access your project, \nhttp://server/project/short_name\n.\n\n\nDescription\n: A \nshort\n description of the project, e.g., \nImage\n  pattern recognition\n. By default, it will have been autogenerated for you from the \nLong description\n you filled in the previous step (but without the Markdown!).\n\n\nLong Description\n: A \nlong\n description where you can use\n  Markdown to format the description of your project. This field is\n  usually used to provide information about the project, the\n  developer, the researcher group or institutions involved in the\n  project, etc.\n\n\nAllow Anonymous Contributors\n: By default anonymous and\n  authenticated users can participate in all the projects. However, you\n  can change it only to allow authenticated volunteers to participate.\n\n\nPassword\n: If you want to control who can contribute or access to   your project, you can set a password here to share with those you\n  allow to do it. If you leave it blank, then no password will protect your project!\n\n\nCategory\n: Select a category that fits your project. categories\n  are added and managed by the server administrators.\n\n\nWebhook\n: Write here the URL of the server that will handle the \nreal-time data analysis\n of this project\ns tasks.\n\n\nAlso, you will be able to select and upload a \nimage\n from\n  your local computer to set it as the project image throughout the\n  server.\n\n\n\n\n\n\nTask Settings\n\n\nThe \nTask Settings\n is only accessible for the project owner and server administrators. The page can be reached via the \nSettings\n menu, but also from the \nTasks\n link in the left local navigation bar.\n\n\n\n\nThe page shows four different blocks:\n\n\n\n\nTask Scheduler\n: this block allows you to specify how the project should send tasks to the volunteers.\n\n\nTask Priority\n: this block allows you to change the priority of\n   the tasks.\n\n\nTask Redundancy\n: use this block to change the default number of    answers (30 by default) that you want to obtain before marking a\n   task as completed.\n\n\nDelete Tasks\n: this final block allows you to flush all the tasks\n   and its associated task runs (answers).\n\n\n\n\nTask Scheduler\n\n\nPYBOSSA provides different task schedulers that will send tasks to the users in very different ways.\n\n\n\n\nDefault or Depth First\n\n\nThe Default task scheduler (also known as Depth First) has the following features:\n\n\n\n\nIt sends the tasks in the order that were created, first in first\n   out.\n\n\nUsers (anonymous and authenticated) will only be allowed to\n   participate once in the same task. Once a user has submitted a Task\n   Run (or answer) for a given task, the scheduler will never send that\n   task to the same user.\n\n\nIt will send the same task until the task-redundancy is achieved. In\n   other words, if a task has a redundancy value of 3, the task will be\n   always sent until those 3 answers have been submitted. Once the 3\n   answers have been collected, the task will be marked as \ncompleted\n and it will not be sent again.\n\n\nWhen a user has submitted a Task Run for a given task, the scheduler will send to the same user the next task.\n\n\nThis scheduler allows the usage of \norderby\n and \ndesc\n\n   arguments via the \napi/projectID/newtask\n endpoint.\n\n\n\n\nIn summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending the project tasks in the order\nthey were created. If the user tries to reload a task that he or she\nalready participated, the system will detect it, and warn the user\ngiving the option to try with another task (the scheduler will search\nfor the proper task for the given user).\n\n\nFrom the point of view of the project, the scheduler will be trying to\ncomplete (get all the answers requested by the task-redundancy value) all the tasks as soon as possible.\n\n\nDepth First All\n\n\nThe Depth First All scheduler has the following features:\n\n\n\n\nIt sends the tasks in the order that were created, first in first\n   out.\n\n\nUsers (anonymous and authenticated) will only be allowed to\n   participate once in the same task. Once a user has submitted a Task\n   Run (or answer) for a given task, the scheduler will never send that\n   task to the same user.\n\n\nIt does not respect the task state. In other words, if a task has a redundancy value of 3, the task will be always sent even when those 3 answers have been submitted. Once the 3 answers have been collected, the task will be marked as \ncompleted\n and it will be sent again to new users.\n\n\nWhen a user has submitted a Task Run for a given task, the scheduler will send to the same user the next task.\n\n\nThis scheduler allows the usage of \norderby\n and \ndesc\n\n   arguments via the \napi/projectID/newtask\n endpoint.\n\n\n\n\nIn summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending the project tasks in the order\nthey were created. If the user tries to reload a task that he or she\nalready participated, the system will detect it, and warn the user\ngiving the option to try with another task (the scheduler will search\nfor the proper task for the given user).\n\n\nFrom the point of view of the project, the scheduler will be trying to\ncomplete (get all the answers requested by the task-redundancy value) all the tasks as soon as possible allowing new users to participated in completed tasks as well.\n\n\nBreadth First\n\n\nThe Breadth First scheduler has the following features:\n\n\n\n\nIt sends the tasks in the order that were created, first in first\n   out.\n\n\nIt sends always first the task with the least number of task runs in\n   the system.\n\n\n\n\nIn summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending the project\ns tasks that have less answers (in case of not having an answer, the creation time will be used to send them like in a FIFO \nfirst in first out).\n\n\nFrom the point of view of the project, the scheduler will be trying to\nobtain as soon as possible an answer for all the available tasks.\n\n\n\n\nNote\n\n\nIf you use the limit and offset, the tasks will be ordered first by the\nnumber of task runs, returning always first the tasks with less number of task runs for the user.\n\n\n\n\nLock\n\n\nThe Lock scheduler has the following features:\n\n\n\n\nIt sends the tasks in the order that were created, first in first\n   out.\n\n\n\n\nWhen a task has been sent, the task will be locked for the user (anonymous or registered) that requested it for 60 minutes.\n\n\n\n\n\n\nIf another user request a task, it will be sent a different task that has not being locked.\n\n\n\n\n\n\nIn summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending the project\ns tasks in order. She will not find any difference from other schedulers.\n\n\nFrom the point of view of the project, the scheduler will be trying to\nsend different tasks to users, spreading the users within all available tasks of the project.\n\n\n\n\nNote\n\n\nThis scheduler does not allow you to request more than 2 tasks at a time to avoid people locking many tasks at once.\n\n\n\n\n\n\nNote\n\n\nThis scheduler could be interesting when you hold a workshop and you want everyone participating in a different task\nat the same time.\n\n\n\n\nTask Priority\n\n\nPYBOSSA allows you to prioritize the tasks, or in other words, which\ntasks should be delivered first to the volunteers.\n\n\n\n\n\n\nWarning\n\n\nTask Priority is only respected by the default scheduler.\n\n\n\n\nThe page shows you two input boxes:\n\n\n\n\nTask IDs\n: comma separated Task IDs of your project tasks. Note:\n   not spaces between the values or commas.\n\n\nPriority\n: the priority that you want to set for the Task IDs.\n   This must be a value between 0.0 and 1.0.\n\n\n\n\nA task with a priority 1.0 will be the first Task to be delivered to a\ngiven user. In case that two or more tasks have the same priority value, the first task that will be delivered will be the one with the lower Task.ID value.\n\n\nTask Redundancy\n\n\nThe Task Redundancy is a feature that will allow you to analyze\nstatistically, the results that your project are getting for each of its\ntasks.\n\n\nPYBOSSA by default assigns a value of 30 task runs \nanswers\n per task, as this value is commonly used for analyzing the population\nstatistically.\n\n\nThis page will allow you to change the default value, 30, to whatever\nyou like between a minimum of 1 or a maximum of 10000 answers per task. We recommend to have at use at least three answers per task. Otherwise, you will not be able to run a proper analysis on a given task if two users answer differently.\n\n\n\n\nFor example, imagine that the goal of the task is to answer if you see a human in a picture, and the available answers are Yes and No. If you set up the redundancy value to 2, and two different users answer\nrespectively Yes, and No, you will not know the correct answer for the task. By increasing the redundancy value to 5 (or even bigger), you will be able to run a statistical analysis more accurately.\n\n\nDelete Tasks\n\n\nThis section will allow you to complete remove all the Tasks and\nassociated Task Runs (answers) of your project.\n\n\n\n\n\n\nNote\n\n\nThis step cannot be undone, once you delete all the tasks and associated task runs they will be lost forever.\n\n\n\n\n\n\nWarning\n\n\nOnly tasks not associated with a result can be deleted.\n\n\n\n\nThis feature is useful when you are testing your project, and you are\ndeciding the structure that you are going to build in your answers.\n\n\nImport tasks automatically\n\n\nBoth pro users and server administrators can have access to this\nfeature, which allows to schedule a background job that will\nautomatically import tasks every 24 hours. This option is accessible\nfrom the \nTasks\n link in the left local navigation bar:\n\n\n\n\nTasks can be imported using any of the PYBOSSA built-in importers, such as csv-import and epicollect-import. To set up an autoimporter, please refer to the instructions for \nCSV importer\n, \nEpiCollect+ importer\n, as the procedure is the same.\n\n\nThe only difference is that the tasks won\nt be imported only once, but regularly, as explained. However, the same behavior should be expected, so auto-importing a CSV file that does not change will result in no new tasks being imported.\n\n\n\n\nNote\n\n\nThe Dropbox, Amazon S3 and Youtube importers are not available for being used as an auto importer.\n\n\n\n\nOnce an auto importer has been set up, it can also be canceled anytime. Just delete it. And a new one can then be created.\n\n\nDelete the project\n\n\nIn case that you want to remove the project and all its tasks, results and task runs, use this section to delete the project.\n\n\n\n\n\n\nWarning\n\n\nThis action cannot be undone. Be sure before proceeding.\n\n\n\n\n\n\nInfo\n\n\nOnly projects without results can be deleted.\n\n\n\n\nAdding co-owners to your project\n\n\nJob creators have the ability to add co-owners to jobs that they create. The co-owner will be able to view/edit the task presenter code on a job, as well as change the task settings and upload tasks. To do this, go to\nsettings -\n  manage co-owners\n\n\nOnce there, you are able to type in the username of the person that you want to add as a co-owner, click on Search, and then click on \u201cAdd Co-Owner\u201d.\n\n\n\n\nThe new co-owner will appear in the project co-owners list. Project co-owners (with the exception of the original project creator) can also be removed from here.\n\n\n\n\nTransfer project ownership\n\n\nYou can transfer the project ownership to another user in the PYBOSSA server.\n\n\nFor changing the ownership, just add the email of the user that you want to make the new owner.\n\n\n\n\nNote\n\n\nIf you are not an admin of PYBOSSA, you cannot undo this action, and you will not be able to modify/change settings of the project as you will not be the owner anymore. Admins, however, can change the ownership always.\n\n\n\n\nGenerate project report\n\n\nYou can generate project report in csv form that provides consolidated status of your project. This report has project and user statistics sections. Project section lists information on project id, project short name, total tasks in project, time when first and last task was submitted and average time spent on each task in minutes. User statistics section lists information on contributors id, name, full name, total tasks completed, percentage of tasks completed and time when first and last task submission were submitted by the contributor.\n\n\nThe report can be generated from \nExport Project Report\n option under project settings page.", 
            "title": "Configuring the project"
        }, 
        {
            "location": "/build/project_settings/#configuring-the-project", 
            "text": "If you are the owner of a project, you can configure it using the web\ninterface. When you are the owner (or an administrator), a new link in the left local navigation bar of the project will appear with the name  Settings .   The  Settings  page will give you the following options:   Project details : here you will be able to change the name of the\n   project, the description, icon, etc.  Task settings : this button will open the task-settings page where\n   you will be able to configure the tasks  scheduler, change the tasks  priority, modify the tasks  redundancy and delete the tasks and its associated task runs (also known as answers).  Project delete : if you click this button you will be able to remove the project from the system entirely. A big warning message will be shown before allowing you to delete the project.  Project blog : if you click this button, you will be able to write a\n   new blog post to be shared with the volunteers.    Official support  If you need help configuring your PYBOSSA server,  contact us . We offer official support, and we would love to work with your PYBOSSA server.", 
            "title": "Configuring the Project"
        }, 
        {
            "location": "/build/project_settings/#edit-the-project-details", 
            "text": "In this section you can change the following parameters of your project:   Name : the full name of your project, i.e., Flickr Person Finder  Short name : (also known as  slug ) the string that will be used\n  to access your project,  http://server/project/short_name .  Description : A  short  description of the project, e.g.,  Image\n  pattern recognition . By default, it will have been autogenerated for you from the  Long description  you filled in the previous step (but without the Markdown!).  Long Description : A  long  description where you can use\n  Markdown to format the description of your project. This field is\n  usually used to provide information about the project, the\n  developer, the researcher group or institutions involved in the\n  project, etc.  Allow Anonymous Contributors : By default anonymous and\n  authenticated users can participate in all the projects. However, you\n  can change it only to allow authenticated volunteers to participate.  Password : If you want to control who can contribute or access to   your project, you can set a password here to share with those you\n  allow to do it. If you leave it blank, then no password will protect your project!  Category : Select a category that fits your project. categories\n  are added and managed by the server administrators.  Webhook : Write here the URL of the server that will handle the  real-time data analysis  of this project s tasks.  Also, you will be able to select and upload a  image  from\n  your local computer to set it as the project image throughout the\n  server.", 
            "title": "Edit the project details"
        }, 
        {
            "location": "/build/project_settings/#task-settings", 
            "text": "The  Task Settings  is only accessible for the project owner and server administrators. The page can be reached via the  Settings  menu, but also from the  Tasks  link in the left local navigation bar.   The page shows four different blocks:   Task Scheduler : this block allows you to specify how the project should send tasks to the volunteers.  Task Priority : this block allows you to change the priority of\n   the tasks.  Task Redundancy : use this block to change the default number of    answers (30 by default) that you want to obtain before marking a\n   task as completed.  Delete Tasks : this final block allows you to flush all the tasks\n   and its associated task runs (answers).", 
            "title": "Task Settings"
        }, 
        {
            "location": "/build/project_settings/#task-scheduler", 
            "text": "PYBOSSA provides different task schedulers that will send tasks to the users in very different ways.", 
            "title": "Task Scheduler"
        }, 
        {
            "location": "/build/project_settings/#default-or-depth-first", 
            "text": "The Default task scheduler (also known as Depth First) has the following features:   It sends the tasks in the order that were created, first in first\n   out.  Users (anonymous and authenticated) will only be allowed to\n   participate once in the same task. Once a user has submitted a Task\n   Run (or answer) for a given task, the scheduler will never send that\n   task to the same user.  It will send the same task until the task-redundancy is achieved. In\n   other words, if a task has a redundancy value of 3, the task will be\n   always sent until those 3 answers have been submitted. Once the 3\n   answers have been collected, the task will be marked as  completed  and it will not be sent again.  When a user has submitted a Task Run for a given task, the scheduler will send to the same user the next task.  This scheduler allows the usage of  orderby  and  desc \n   arguments via the  api/projectID/newtask  endpoint.   In summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending the project tasks in the order\nthey were created. If the user tries to reload a task that he or she\nalready participated, the system will detect it, and warn the user\ngiving the option to try with another task (the scheduler will search\nfor the proper task for the given user).  From the point of view of the project, the scheduler will be trying to\ncomplete (get all the answers requested by the task-redundancy value) all the tasks as soon as possible.", 
            "title": "Default or Depth First"
        }, 
        {
            "location": "/build/project_settings/#depth-first-all", 
            "text": "The Depth First All scheduler has the following features:   It sends the tasks in the order that were created, first in first\n   out.  Users (anonymous and authenticated) will only be allowed to\n   participate once in the same task. Once a user has submitted a Task\n   Run (or answer) for a given task, the scheduler will never send that\n   task to the same user.  It does not respect the task state. In other words, if a task has a redundancy value of 3, the task will be always sent even when those 3 answers have been submitted. Once the 3 answers have been collected, the task will be marked as  completed  and it will be sent again to new users.  When a user has submitted a Task Run for a given task, the scheduler will send to the same user the next task.  This scheduler allows the usage of  orderby  and  desc \n   arguments via the  api/projectID/newtask  endpoint.   In summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending the project tasks in the order\nthey were created. If the user tries to reload a task that he or she\nalready participated, the system will detect it, and warn the user\ngiving the option to try with another task (the scheduler will search\nfor the proper task for the given user).  From the point of view of the project, the scheduler will be trying to\ncomplete (get all the answers requested by the task-redundancy value) all the tasks as soon as possible allowing new users to participated in completed tasks as well.", 
            "title": "Depth First All"
        }, 
        {
            "location": "/build/project_settings/#breadth-first", 
            "text": "The Breadth First scheduler has the following features:   It sends the tasks in the order that were created, first in first\n   out.  It sends always first the task with the least number of task runs in\n   the system.   In summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending the project s tasks that have less answers (in case of not having an answer, the creation time will be used to send them like in a FIFO  first in first out).  From the point of view of the project, the scheduler will be trying to\nobtain as soon as possible an answer for all the available tasks.   Note  If you use the limit and offset, the tasks will be ordered first by the\nnumber of task runs, returning always first the tasks with less number of task runs for the user.", 
            "title": "Breadth First"
        }, 
        {
            "location": "/build/project_settings/#lock", 
            "text": "The Lock scheduler has the following features:   It sends the tasks in the order that were created, first in first\n   out.   When a task has been sent, the task will be locked for the user (anonymous or registered) that requested it for 60 minutes.    If another user request a task, it will be sent a different task that has not being locked.    In summary, from the point of view of a user (authenticated or\nanonymous) the system will be sending the project s tasks in order. She will not find any difference from other schedulers.  From the point of view of the project, the scheduler will be trying to\nsend different tasks to users, spreading the users within all available tasks of the project.   Note  This scheduler does not allow you to request more than 2 tasks at a time to avoid people locking many tasks at once.    Note  This scheduler could be interesting when you hold a workshop and you want everyone participating in a different task\nat the same time.", 
            "title": "Lock"
        }, 
        {
            "location": "/build/project_settings/#task-priority", 
            "text": "PYBOSSA allows you to prioritize the tasks, or in other words, which\ntasks should be delivered first to the volunteers.    Warning  Task Priority is only respected by the default scheduler.   The page shows you two input boxes:   Task IDs : comma separated Task IDs of your project tasks. Note:\n   not spaces between the values or commas.  Priority : the priority that you want to set for the Task IDs.\n   This must be a value between 0.0 and 1.0.   A task with a priority 1.0 will be the first Task to be delivered to a\ngiven user. In case that two or more tasks have the same priority value, the first task that will be delivered will be the one with the lower Task.ID value.", 
            "title": "Task Priority"
        }, 
        {
            "location": "/build/project_settings/#task-redundancy", 
            "text": "The Task Redundancy is a feature that will allow you to analyze\nstatistically, the results that your project are getting for each of its\ntasks.  PYBOSSA by default assigns a value of 30 task runs  answers  per task, as this value is commonly used for analyzing the population\nstatistically.  This page will allow you to change the default value, 30, to whatever\nyou like between a minimum of 1 or a maximum of 10000 answers per task. We recommend to have at use at least three answers per task. Otherwise, you will not be able to run a proper analysis on a given task if two users answer differently.   For example, imagine that the goal of the task is to answer if you see a human in a picture, and the available answers are Yes and No. If you set up the redundancy value to 2, and two different users answer\nrespectively Yes, and No, you will not know the correct answer for the task. By increasing the redundancy value to 5 (or even bigger), you will be able to run a statistical analysis more accurately.", 
            "title": "Task Redundancy"
        }, 
        {
            "location": "/build/project_settings/#delete-tasks", 
            "text": "This section will allow you to complete remove all the Tasks and\nassociated Task Runs (answers) of your project.    Note  This step cannot be undone, once you delete all the tasks and associated task runs they will be lost forever.    Warning  Only tasks not associated with a result can be deleted.   This feature is useful when you are testing your project, and you are\ndeciding the structure that you are going to build in your answers.", 
            "title": "Delete Tasks"
        }, 
        {
            "location": "/build/project_settings/#import-tasks-automatically", 
            "text": "Both pro users and server administrators can have access to this\nfeature, which allows to schedule a background job that will\nautomatically import tasks every 24 hours. This option is accessible\nfrom the  Tasks  link in the left local navigation bar:   Tasks can be imported using any of the PYBOSSA built-in importers, such as csv-import and epicollect-import. To set up an autoimporter, please refer to the instructions for  CSV importer ,  EpiCollect+ importer , as the procedure is the same.  The only difference is that the tasks won t be imported only once, but regularly, as explained. However, the same behavior should be expected, so auto-importing a CSV file that does not change will result in no new tasks being imported.   Note  The Dropbox, Amazon S3 and Youtube importers are not available for being used as an auto importer.   Once an auto importer has been set up, it can also be canceled anytime. Just delete it. And a new one can then be created.", 
            "title": "Import tasks automatically"
        }, 
        {
            "location": "/build/project_settings/#delete-the-project", 
            "text": "In case that you want to remove the project and all its tasks, results and task runs, use this section to delete the project.    Warning  This action cannot be undone. Be sure before proceeding.    Info  Only projects without results can be deleted.", 
            "title": "Delete the project"
        }, 
        {
            "location": "/build/project_settings/#adding-co-owners-to-your-project", 
            "text": "Job creators have the ability to add co-owners to jobs that they create. The co-owner will be able to view/edit the task presenter code on a job, as well as change the task settings and upload tasks. To do this, go to\nsettings -   manage co-owners  Once there, you are able to type in the username of the person that you want to add as a co-owner, click on Search, and then click on \u201cAdd Co-Owner\u201d.   The new co-owner will appear in the project co-owners list. Project co-owners (with the exception of the original project creator) can also be removed from here.", 
            "title": "Adding co-owners to your project"
        }, 
        {
            "location": "/build/project_settings/#transfer-project-ownership", 
            "text": "You can transfer the project ownership to another user in the PYBOSSA server.  For changing the ownership, just add the email of the user that you want to make the new owner.   Note  If you are not an admin of PYBOSSA, you cannot undo this action, and you will not be able to modify/change settings of the project as you will not be the owner anymore. Admins, however, can change the ownership always.", 
            "title": "Transfer project ownership"
        }, 
        {
            "location": "/build/project_settings/#generate-project-report", 
            "text": "You can generate project report in csv form that provides consolidated status of your project. This report has project and user statistics sections. Project section lists information on project id, project short name, total tasks in project, time when first and last task was submitted and average time spent on each task in minutes. User statistics section lists information on contributors id, name, full name, total tasks completed, percentage of tasks completed and time when first and last task submission were submitted by the contributor.  The report can be generated from  Export Project Report  option under project settings page.", 
            "title": "Generate project report"
        }, 
        {
            "location": "/build/webhooks/", 
            "text": "Analyzing your project in real-time\n\n\nWhen you have your project running, you will want to analyze the contributions sent by the\nvolunteers. For doing this task, you can do it offline, with our \nEnki\n software, or take advantage\nof the PYBOSSA webhooks feature.\n\n\nPYBOSSA webhooks is a notification system, that will send an HTTP POST request to another server of your\nchoice, sending the following data:\n\n\n1\n2\n3\n4\n5\n6\n{\nfired_at\n:,\n\n \nproject_short_name\n:\n \nproject-slug\n,\n\n \nproject_id\n:\n \n1,\n\n \ntask_id\n:\n \n1,\n\n \nresult_id\n:\n \n1,\n\n \nevent\n:\n \ntask_completed\n}\n \n\n\n\n\n\n\nAs you can see, the data specifies which task has been completed, when, and which \nempty\n result has been\ncreated for you. In this way, you can ask Enki to download the task, its associated task runs and do the statistical\nanalysis in real time. Moreover, as PYBOSSA creates an empty result for you, you can use again enki to POST the\nstatistical analysis back to PYBOSSA, so you can then search through the API for example for all the pictures classified\nas red.\n\n\nIn order to simplify your workflow, we have created a small microservice named \nwebhooks\n, that gives you the basics to start.\n\n\nWhile the main purpose of this microservice is to do the analysis of the results,\nyou can customize and fork it to do other things like:\n\n\n\n\nPost to Twitter that your project has completed a task.\n\n\nUpload the results to your DropBox folder by writing the results in a file.\n\n\nCreate a new task in another project, because the statistics met a given criteria.\n\n\nSend an email with the result as an attachment, and in the body of the email the statistical analysis.\n\n\nGive badges to users that correctly answered the task.\n\n\netc.\n\n\n\n\nThe template that we provide, only shows how you can easily \nget the most voted option for an image pattern recognition project.\n\n\nInstallation\n\n\nTo install the microservice all you need is to run the following command (we recommend\nyou to use a virtual environment):\n\n\n1\npip install -r requirements.txt\n\n\n\n\n\n\n\n\nNote\n\n\nClone or \ndownload\n the software before proceed.\n\n\n\n\nNow, copy the settings.py.template file to: \nsettings.py\n and fill in the\ninformation. Once you are done with this file, you\nll be ready to run the\nserver.\n\n\n\n\nNote\n\n\nBe sure to have a PYBOSSA API-KEY as the analysis will be stored in the \nPYBOSSA results table.\n\n\n\n\n\n\nNote\n\n\nIt requires a PYBOSSA server \n= 1.2.0.\n\n\n\n\nRunning the microservice\n\n\nNow that you\nve the required libraries installed, running the server is as\nsimple as this:\n\n\n1\npython app.py\n\n\n\n\n\n\nThen, copy the domain or IP and port where it\ns running and save that address in your\nproject\ns settings page, in the webhooks field. PYBOSSA will check if the webhooks server\nis running. If it is not, it will fail and it will not allow you to save the URL.\n\n\nConfiguring background jobs\n\n\nBy default, this project has disabled the creation of queues in your system. If\nyou expect to have lots of contributions in your project, we recommend you to\nenable them.\n\n\nTo support queues you will need to install in your machine a Redis server.\nThen, change the flag: \nenable_background_jobs\n to True in your settings.py\nfile, and restart the server. \n\n\n\n\nNote\n\n\nIf you are already running a Redis server and queues, you can customize\nthe name of your queue in the settings file. Check out the config variable:\n\nqueue_name\n.\n\n\n\n\nRunning the background jobs\n\n\nNow that you have the project running background jobs, you need to process\nthem. This is very simple, in another terminal run the following command:\n\n\n1\nrqworker mywebhooks\n\n\n\n\n\n\n\n\nNote\n\n\nIf you\nve changed the name of the queue, please, update the previous\ncommand with your new queue name. That\ns all! Enjoy!!!\n\n\n\n\nDebugging your analysis\n\n\nWhile you are developing the analysis module for your project, you will want to test it.\nFor this reason, PYBOSSA provides a way of re-running all the created webhooks, one specific, or\nall the failed ones. In this way, you will be able to fix your code, without having to stop your project.\n\n\nGo to your webhooks project section, and check the available options.\n\n\n\n\nNote\n\n\nPYBOSSA sends you a \nrerun\n argument when doing the POST if you use any of the previous options,\nso you can handle that specific case in your code. All you have to do is check for that argument in\nthe POST.\n\n\n\n\nCreating missing webhooks\n\n\nSometimes, you might start your project without the webhooks solution in mind. This will lead to a project\nwhere you have several completed tasks, without any associated webhooks. This is because you didn\nt enabled the\nwebhooks solution, and therefore PYBOSSA didn\nt created it for you.\n\n\nFor those cases, you can use the cli.py script. It has a specific command that will allow you to create all\nthe missing webhooks in one row. For doing it, all you need is your project ID and then run the following command:\n\n\n1\npython cli.py create_webhooks projectID\n\n\n\n\n\n\nThen, from your project, enable the webhooks server, and you will only have to hit the button re-run all webhooks.\nThis action, will enqueue all the webhooks and you will get your data analysis done!", 
            "title": "Real time data analysis"
        }, 
        {
            "location": "/build/webhooks/#analyzing-your-project-in-real-time", 
            "text": "When you have your project running, you will want to analyze the contributions sent by the\nvolunteers. For doing this task, you can do it offline, with our  Enki  software, or take advantage\nof the PYBOSSA webhooks feature.  PYBOSSA webhooks is a notification system, that will send an HTTP POST request to another server of your\nchoice, sending the following data:  1\n2\n3\n4\n5\n6 { fired_at :, \n  project_short_name :   project-slug , \n  project_id :   1, \n  task_id :   1, \n  result_id :   1, \n  event :   task_completed }     As you can see, the data specifies which task has been completed, when, and which  empty  result has been\ncreated for you. In this way, you can ask Enki to download the task, its associated task runs and do the statistical\nanalysis in real time. Moreover, as PYBOSSA creates an empty result for you, you can use again enki to POST the\nstatistical analysis back to PYBOSSA, so you can then search through the API for example for all the pictures classified\nas red.  In order to simplify your workflow, we have created a small microservice named  webhooks , that gives you the basics to start.  While the main purpose of this microservice is to do the analysis of the results,\nyou can customize and fork it to do other things like:   Post to Twitter that your project has completed a task.  Upload the results to your DropBox folder by writing the results in a file.  Create a new task in another project, because the statistics met a given criteria.  Send an email with the result as an attachment, and in the body of the email the statistical analysis.  Give badges to users that correctly answered the task.  etc.   The template that we provide, only shows how you can easily \nget the most voted option for an image pattern recognition project.", 
            "title": "Analyzing your project in real-time"
        }, 
        {
            "location": "/build/webhooks/#installation", 
            "text": "To install the microservice all you need is to run the following command (we recommend\nyou to use a virtual environment):  1 pip install -r requirements.txt    Note  Clone or  download  the software before proceed.   Now, copy the settings.py.template file to:  settings.py  and fill in the\ninformation. Once you are done with this file, you ll be ready to run the\nserver.   Note  Be sure to have a PYBOSSA API-KEY as the analysis will be stored in the \nPYBOSSA results table.    Note  It requires a PYBOSSA server  = 1.2.0.", 
            "title": "Installation"
        }, 
        {
            "location": "/build/webhooks/#running-the-microservice", 
            "text": "Now that you ve the required libraries installed, running the server is as\nsimple as this:  1 python app.py   Then, copy the domain or IP and port where it s running and save that address in your\nproject s settings page, in the webhooks field. PYBOSSA will check if the webhooks server\nis running. If it is not, it will fail and it will not allow you to save the URL.", 
            "title": "Running the microservice"
        }, 
        {
            "location": "/build/webhooks/#configuring-background-jobs", 
            "text": "By default, this project has disabled the creation of queues in your system. If\nyou expect to have lots of contributions in your project, we recommend you to\nenable them.  To support queues you will need to install in your machine a Redis server.\nThen, change the flag:  enable_background_jobs  to True in your settings.py\nfile, and restart the server.    Note  If you are already running a Redis server and queues, you can customize\nthe name of your queue in the settings file. Check out the config variable: queue_name .", 
            "title": "Configuring background jobs"
        }, 
        {
            "location": "/build/webhooks/#running-the-background-jobs", 
            "text": "Now that you have the project running background jobs, you need to process\nthem. This is very simple, in another terminal run the following command:  1 rqworker mywebhooks    Note  If you ve changed the name of the queue, please, update the previous\ncommand with your new queue name. That s all! Enjoy!!!", 
            "title": "Running the background jobs"
        }, 
        {
            "location": "/build/webhooks/#debugging-your-analysis", 
            "text": "While you are developing the analysis module for your project, you will want to test it.\nFor this reason, PYBOSSA provides a way of re-running all the created webhooks, one specific, or\nall the failed ones. In this way, you will be able to fix your code, without having to stop your project.  Go to your webhooks project section, and check the available options.   Note  PYBOSSA sends you a  rerun  argument when doing the POST if you use any of the previous options,\nso you can handle that specific case in your code. All you have to do is check for that argument in\nthe POST.", 
            "title": "Debugging your analysis"
        }, 
        {
            "location": "/build/webhooks/#creating-missing-webhooks", 
            "text": "Sometimes, you might start your project without the webhooks solution in mind. This will lead to a project\nwhere you have several completed tasks, without any associated webhooks. This is because you didn t enabled the\nwebhooks solution, and therefore PYBOSSA didn t created it for you.  For those cases, you can use the cli.py script. It has a specific command that will allow you to create all\nthe missing webhooks in one row. For doing it, all you need is your project ID and then run the following command:  1 python cli.py create_webhooks projectID   Then, from your project, enable the webhooks server, and you will only have to hit the button re-run all webhooks.\nThis action, will enqueue all the webhooks and you will get your data analysis done!", 
            "title": "Creating missing webhooks"
        }, 
        {
            "location": "/build/capture/", 
            "text": "Capture data with PYBOSSA\n\n\nSince version 2.10.0 PYBOSSA allows you to capture data with the crowd.\n\n\nThis basically means that you don\nt need anymore the EpiCollect+ integration (unless you want to keep using it, of course).\n\n\nWith PYBOSA 2.10.0 you can ask the crowd to submit any type of data via the API\n\n\nConfiguring data capturing\n\n\nPYBOSSA has this feature enabled by default for the following extensions:\n\n\n1\n[\njs\n,\n \ncss\n,\n \npng\n,\n \njpg\n,\n \njpeg\n,\n \ngif\n,\n \nzip\n]\n\n\n\n\n\n\n\nYou can simply force a different set of extensions by using this config variable:\n\n\n1\nALLOWED_EXTENSIONS\n \n=\n \n[\nmp4\n,\n \nwav\n]\n\n\n\n\n\n\n\nSending files within the taskrun\n\n\nYou can create a TaskRun with an image, video, PDF, audio (or any file) by doing a POST\nrequest with the following Content-Type: multipart/form-data.\n\n\nFor example, in Python you could do it like this:\n\n\n1\n2\n3\n4\n5\n6\n7\nimport\n \nrequests\n\n\nimport\n \njson\n\n\nurl\n \n=\n \nhttps://server/api/taskrun?api_key=YOURKEY\n\n\n# Upload a picture\n\n\nfiles\n \n=\n \n{\nfile\n:\n \nopen\n(\ntest.jpg\n,\n \nrb\n)}\n\n\ndata\n \n=\n \n{\nproject_id\n:\n \nYOURPROJECT_ID\n,\n \ntask_id\n:\n \nTASK_ID\n,\n \ninfo\n:\n \njson\n.\ndumps\n(\ndict\n(\nfoo\n=\nbar\n))}\n\n\nr\n \n=\n \nrequests\n.\npost\n(\nurl\n,\n \ndata\n=\ndata\n,\n \nfiles\n=\nfiles\n)\n\n\n\n\n\nAs you can see, you can submit in one HTTP request not only the file but also some extra\ninfo. The only requirement is to escape it, so PYBOSSA can parse it later on when the file\nhas been succesfully uploaded.\n\n\nThis feature is pretty handy if you need to send the latitude and longitude of a picture taken\nby a phone. You will be able to upload the file, but also its coordinates at once.", 
            "title": "Data capturing: image, video or audio"
        }, 
        {
            "location": "/build/capture/#capture-data-with-pybossa", 
            "text": "Since version 2.10.0 PYBOSSA allows you to capture data with the crowd.  This basically means that you don t need anymore the EpiCollect+ integration (unless you want to keep using it, of course).  With PYBOSA 2.10.0 you can ask the crowd to submit any type of data via the API", 
            "title": "Capture data with PYBOSSA"
        }, 
        {
            "location": "/build/capture/#configuring-data-capturing", 
            "text": "PYBOSSA has this feature enabled by default for the following extensions:  1 [ js ,   css ,   png ,   jpg ,   jpeg ,   gif ,   zip ]    You can simply force a different set of extensions by using this config variable:  1 ALLOWED_EXTENSIONS   =   [ mp4 ,   wav ]", 
            "title": "Configuring data capturing"
        }, 
        {
            "location": "/build/capture/#sending-files-within-the-taskrun", 
            "text": "You can create a TaskRun with an image, video, PDF, audio (or any file) by doing a POST\nrequest with the following Content-Type: multipart/form-data.  For example, in Python you could do it like this:  1\n2\n3\n4\n5\n6\n7 import   requests  import   json  url   =   https://server/api/taskrun?api_key=YOURKEY  # Upload a picture  files   =   { file :   open ( test.jpg ,   rb )}  data   =   { project_id :   YOURPROJECT_ID ,   task_id :   TASK_ID ,   info :   json . dumps ( dict ( foo = bar ))}  r   =   requests . post ( url ,   data = data ,   files = files )   \nAs you can see, you can submit in one HTTP request not only the file but also some extra\ninfo. The only requirement is to escape it, so PYBOSSA can parse it later on when the file\nhas been succesfully uploaded.  This feature is pretty handy if you need to send the latitude and longitude of a picture taken\nby a phone. You will be able to upload the file, but also its coordinates at once.", 
            "title": "Sending files within the taskrun"
        }, 
        {
            "location": "/build/model/", 
            "text": "Domain Model\n\n\nThis section introduces the main domain objects present in the PYBOSSA\nsystem (see the api section for details about how you can access some of\nthe objects using the API).\n\n\nOverview\n\n\nPYBOSSA has 5 main domain objects:\n\n\n\n\n\n\nProject\n: the overall Project to which Tasks are associated.\n\n\n\n\nHasA: Category\n\n\nHasMany: Tasks\n\n\n\n\n\n\n\n\nTask\n: an individual Task which can be performed by a user. A\n  Task is associated to a project.\n\n\n\n\nHasA: Project\n\n\nHasA: Result\n\n\nHasMany: TaskRuns\n\n\n\n\n\n\nTaskRun\n: the answers of a specific User performing a specific\n  task\n\n\nHasA: Task\n\n\nHasA: User\n\n\n\n\n\n\nResult\n: the statistical result of analyzing the task runs for a given task in a project\n\n\nHasA: Task\n\n\nHasMany: TaskRuns\n\n\n\n\n\n\nHelpingMaterial\n: media files for building advance tutorials\n\n\nHasA: Project\n\n\n\n\n\n\nPage\n: page layouts for building advance SPAs or Jamstack solutions\n\n\nHasA: Project\n\n\n\n\n\n\nUser\n: a user account\n\n\nCategory\n: a project category\n\n\nHasMany: Projects\n\n\n\n\n\n\n\n\nThere are some attributes common across most of the domain objects\nnotably:\n\n\n\n\ncreate_time\n: the Datetime (as an integer) when object was\n  created.\n\n\ninfo\n: a \nblob-style\n attribute into which one can store\n  arbitrary JSON. This attribute is use to any additional\n  information one wants (e.g. Task configuration or Task results on\n  TaskRun)\n\n\n\n\nFor more detailed information about the model, \ncheck the source code\n.", 
            "title": "Domain model"
        }, 
        {
            "location": "/build/model/#domain-model", 
            "text": "This section introduces the main domain objects present in the PYBOSSA\nsystem (see the api section for details about how you can access some of\nthe objects using the API).", 
            "title": "Domain Model"
        }, 
        {
            "location": "/build/model/#overview", 
            "text": "PYBOSSA has 5 main domain objects:    Project : the overall Project to which Tasks are associated.   HasA: Category  HasMany: Tasks     Task : an individual Task which can be performed by a user. A\n  Task is associated to a project.   HasA: Project  HasA: Result  HasMany: TaskRuns    TaskRun : the answers of a specific User performing a specific\n  task  HasA: Task  HasA: User    Result : the statistical result of analyzing the task runs for a given task in a project  HasA: Task  HasMany: TaskRuns    HelpingMaterial : media files for building advance tutorials  HasA: Project    Page : page layouts for building advance SPAs or Jamstack solutions  HasA: Project    User : a user account  Category : a project category  HasMany: Projects     There are some attributes common across most of the domain objects\nnotably:   create_time : the Datetime (as an integer) when object was\n  created.  info : a  blob-style  attribute into which one can store\n  arbitrary JSON. This attribute is use to any additional\n  information one wants (e.g. Task configuration or Task results on\n  TaskRun)   For more detailed information about the model,  check the source code .", 
            "title": "Overview"
        }, 
        {
            "location": "/api/intro/", 
            "text": "PYBOSSA provides two main api endpoints:\n\n\n\n\nthe RESTful API located at http://server/api and,\n\n\nthe rest of the endpoints of the server\n\n\n\n\nThe RESTful API\n\n\nThese endpoints use the PYBOSSA domain objects. It has the following structure:\n\n\n1\nhttp://server/api/{domainobject}[?arg1=value1\narg2=value2...]\n\n\n\n\n\n\nA domain object can be:\n\n\n\n\nProject,\n\n\nTask,\n\n\nTaskRun,\n\n\nResult,\n\n\nBlog post,\n\n\nAnnouncement,\n\n\nHelpingmaterial,\n\n\nUser, and\n\n\nCategory.\n\n\n\n\nYou can then access any of those items via the API, using its name in the {domainobject} section and querying its attributes. All these endpoints expect and return JSON.\n\n\nThe RESTful API is located at:\n\n\n1\nhttp://{pybossa-site-url}/api\n\n\n\n\n\n\nIt expects and returns JSON.\n\n\nSome requests will need a \nAPI-KEY\n to authenticate \n authorize the operation. You can get your API-KEY in your \nprofile\n account.\n\n\nThe returned objects will have a \nlinks\n and \nlink\n fields, not\nincluded in the model to support \nHypermedia as the Engine of\nApplication State\n (also known as HATEOAS), so you can understand which are the relations between objects.\n\n\nAll objects will return a field \nlink\n which will be the absolute URL for that specific object within the API. If the object has some parents, you will find the relations in the \nlinks\n list. For example, for a Task Run you will get something like this:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n{\n\n\ninfo\n:\n \n65\n,\n\n\nuser_id\n:\n \nnull\n,\n\n\nlinks\n:\n \n[\n\n    \nlink rel=\nparent\n title=\nproject\n href=\nhttp://localhost:5000/api/project/90\n/\n,\n\n    \nlink rel=\nparent\n title=\ntask\n href=\nhttp://localhost:5000/api/task/5894\n/\n\n\n],\n\n\ntask_id\n:\n \n5894\n,\n\n\ncreated\n:\n \n2012-07-07T17:23:45.714184\n,\n\n\nfinish_time\n:\n \n2012-07-07T17:23:45.714210\n,\n\n\ncalibration\n:\n \nnull\n,\n\n\nproject_id\n:\n \n90\n,\n\n\nuser_ip\n:\n \nX.X.X.X\n,\n\n\nlink\n:\n \nlink rel=\nself\n title=\ntaskrun\n href=\nhttp://localhost:5000/api/taskrun/8969\n/\n,\n\n\ntimeout\n:\n \nnull\n,\n\n\nid\n:\n \n8969\n\n\n}\n\n\n\n\n\n\n\nThe object link will have a tag \nrel\n equal to \nself\n, while the\nparent objects will be tagged with \nparent\n. The \ntitle\n field is\nused to specify the type of the object: task, task run or project.\n\n\nProjects will not have a \nlinks\n field because these objects do not\nhave parents.\n\n\nTasks will have only one parent: the associated project.\n\n\nTask Runs will have only two parents: the associated task and associated project.\n\n\nResults will have two parents: the associated project and task.\n\n\nHelping materials will have only one parent: the project.\n\n\nBlog posts will have only one parent: the project.\n\n\nAnnouncements will not have any parent.\n\n\nRate Limiting\n\n\nRate Limiting has been enabled for all the API endpoints (since PYBOSSA v2.0.1). The rate-limiting gives any user, using the IP, \na window of 15 minutes to do at most 300 requests per endpoint\n.\n\n\nThis feature adds to the request headers the following values:\n\n\n\n\nX-RateLimit-Limit\n: the rate limit ceiling for that given request\n\n\nX-RateLimit-Remaining\n: the number of requests left for the 15\n    minute window\n\n\nX-RateLimit-Reset\n: the remaining window before the rate limit\n    resets in UTC epoch seconds\n\n\n\n\nWe recommend using the Python package \nrequests\n for interacting with PYBOSSA, as it is straightforward to check those values:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nimport\n \nrequests\n\n\nimport\n \ntime\n\n\n\nres\n \n=\n \nrequests\n.\nget\n(\nhttp://SERVER/api/project\n)\n\n\nif\n \nint\n(\nres\n.\nheaders\n[\nX-RateLimit-Remaining\n])\n \n \n10\n:\n\n    \ntime\n.\nsleep\n(\n300\n)\n \n# Sleep for 5 minutes\n\n\nelse\n:\n\n    \npass\n \n# Do your stuff\n\n\n\n\n\n\n\nCommand line Example Usage of the API\n\n\nCreate a Project object:\n\n\n1\ncurl -X POST -H \nContent-Type:application/json\n -s -d \n{\nname\n:\nmyproject\n, \ninfo\n:{\nxyz\n:1}}\n \nhttp://localhost:5000/api/project?api_key=API-KEY\n\n\n\n\n\n\n\nPYBOSSA endpoints\n\n\nThese are the endpoints that you usually visit using the pybossa-default-theme or in other words, the routes that are defined in PYBOSSA for the user.\n\n\nFor example, while you can get information about a project using the  RESTful API: \n  http://server/api/project?short_name=foo\n\n\nYou can also get information about the project using the following URL:\n\n\nhttp://server/project/foo/\n\n\nThat URL by default it will return HTML, but you can ask the server to return it in JSON format. While the RESTful API only returns the objects as they are in the database, these other endpoints can return more data, like for example the list of projects a user has participated.\n\n\nThe next sections show how these endpoints can be used, and what they return so that you can build your own Single Page Application or frontend project without any problems.\n\n\n\n\nSingle Page Applications (SPA)\n\n\nIf you want to build a SPA, when you create the routes, please, re-use the PYBOSSA ones as it will be easier for you to follow redirects. Also, this is important for other parts, like validation of emails, etc. Otherwise, you will have to handle those redirections in your web server.", 
            "title": "Introduction"
        }, 
        {
            "location": "/api/intro/#the-restful-api", 
            "text": "These endpoints use the PYBOSSA domain objects. It has the following structure:  1 http://server/api/{domainobject}[?arg1=value1 arg2=value2...]   A domain object can be:   Project,  Task,  TaskRun,  Result,  Blog post,  Announcement,  Helpingmaterial,  User, and  Category.   You can then access any of those items via the API, using its name in the {domainobject} section and querying its attributes. All these endpoints expect and return JSON.  The RESTful API is located at:  1 http://{pybossa-site-url}/api   It expects and returns JSON.  Some requests will need a  API-KEY  to authenticate   authorize the operation. You can get your API-KEY in your  profile  account.  The returned objects will have a  links  and  link  fields, not\nincluded in the model to support  Hypermedia as the Engine of\nApplication State  (also known as HATEOAS), so you can understand which are the relations between objects.  All objects will return a field  link  which will be the absolute URL for that specific object within the API. If the object has some parents, you will find the relations in the  links  list. For example, for a Task Run you will get something like this:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 {  info :   65 ,  user_id :   null ,  links :   [ \n     link rel= parent  title= project  href= http://localhost:5000/api/project/90 / , \n     link rel= parent  title= task  href= http://localhost:5000/api/task/5894 /  ],  task_id :   5894 ,  created :   2012-07-07T17:23:45.714184 ,  finish_time :   2012-07-07T17:23:45.714210 ,  calibration :   null ,  project_id :   90 ,  user_ip :   X.X.X.X ,  link :   link rel= self  title= taskrun  href= http://localhost:5000/api/taskrun/8969 / ,  timeout :   null ,  id :   8969  }    The object link will have a tag  rel  equal to  self , while the\nparent objects will be tagged with  parent . The  title  field is\nused to specify the type of the object: task, task run or project.  Projects will not have a  links  field because these objects do not\nhave parents.  Tasks will have only one parent: the associated project.  Task Runs will have only two parents: the associated task and associated project.  Results will have two parents: the associated project and task.  Helping materials will have only one parent: the project.  Blog posts will have only one parent: the project.  Announcements will not have any parent.", 
            "title": "The RESTful API"
        }, 
        {
            "location": "/api/intro/#rate-limiting", 
            "text": "Rate Limiting has been enabled for all the API endpoints (since PYBOSSA v2.0.1). The rate-limiting gives any user, using the IP,  a window of 15 minutes to do at most 300 requests per endpoint .  This feature adds to the request headers the following values:   X-RateLimit-Limit : the rate limit ceiling for that given request  X-RateLimit-Remaining : the number of requests left for the 15\n    minute window  X-RateLimit-Reset : the remaining window before the rate limit\n    resets in UTC epoch seconds   We recommend using the Python package  requests  for interacting with PYBOSSA, as it is straightforward to check those values:  1\n2\n3\n4\n5\n6\n7\n8 import   requests  import   time  res   =   requests . get ( http://SERVER/api/project )  if   int ( res . headers [ X-RateLimit-Remaining ])     10 : \n     time . sleep ( 300 )   # Sleep for 5 minutes  else : \n     pass   # Do your stuff", 
            "title": "Rate Limiting"
        }, 
        {
            "location": "/api/intro/#command-line-example-usage-of-the-api", 
            "text": "Create a Project object:  1 curl -X POST -H  Content-Type:application/json  -s -d  { name : myproject ,  info :{ xyz :1}}   http://localhost:5000/api/project?api_key=API-KEY", 
            "title": "Command line Example Usage of the API"
        }, 
        {
            "location": "/api/intro/#pybossa-endpoints", 
            "text": "These are the endpoints that you usually visit using the pybossa-default-theme or in other words, the routes that are defined in PYBOSSA for the user.  For example, while you can get information about a project using the  RESTful API: \n  http://server/api/project?short_name=foo  You can also get information about the project using the following URL:  http://server/project/foo/  That URL by default it will return HTML, but you can ask the server to return it in JSON format. While the RESTful API only returns the objects as they are in the database, these other endpoints can return more data, like for example the list of projects a user has participated.  The next sections show how these endpoints can be used, and what they return so that you can build your own Single Page Application or frontend project without any problems.   Single Page Applications (SPA)  If you want to build a SPA, when you create the routes, please, re-use the PYBOSSA ones as it will be easier for you to follow redirects. Also, this is important for other parts, like validation of emails, etc. Otherwise, you will have to handle those redirections in your web server.", 
            "title": "PYBOSSA endpoints"
        }, 
        {
            "location": "/api/jamstack/", 
            "text": "Jamstack for PYBOSSA\n\n\nIf you want to use a frontend server like NuxtJS or Next, you will have to configure PYBOSSA properly to run within your frontend framework.\n\n\nAuthentication\n\n\nPYBOSSA uses signed cookies to authenticate the users and keep their sessions. As we use cookies, we will have to tell PYBOSSA how to configure them to work with you.\n\n\nCookies configuration\n\n\nIn your settings_local.py file add the following:\n\n\n1\n2\n3\nREMEMBER_COOKIE_DOMAIN\n \n=\n \nyourdomain.com\n\n\nSESSION_COOKIE_DOMAIN\n \n=\n \nyourdomain.com\n\n\nSESSION_COOKIE_SAMESITE\n \n=\n \nNone\n\n\n\n\n\n\n\nThis will ensure that the cookie will be set for your session from the frontend site, and will be sent back to the backend for authenticating the user.\n\n\nNuxtJS configuration\n\n\nIf you are using NuxtJS with Axios, you will have to configure first Axios like this in the nuxt.config.js file:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n  \naxios:\n \n{\n\n    \nbaseURL:\n \nhttps://yourpybossaserver.com/\n,\n\n    \ncredentials:\n \ntrue,\n\n    \nproxyHeaders:\n \ntrue,\n\n    \nheaders:\n \n{\n\n      \nContent-Type\n:\n \napplication/json\n,\n\n    \n}\n,\n\n  \n},\n\n\n\n\n\n\n\nThen be sure to make a first request from the client side to get the cookie and get it stored on the browser. Then you can authenticate the user:\n\n\n\n\nFirst use axios to get the login page: this.\n\\(axios.\\)\nget(\n/account/signin?response_format=json\n)\n\n\nThis request will return the CSRF token that you will need to send as a header (check the API section for more details)\n\n\nThen do a post with the user login credentials: this.\n\\(axios.\\)\npost(\n/account/siginin?response_format=json\n)\n\n\n\n\nThant\ns all. Be sure to have the domain set it up properly, as any typo will make things harder to debug.\n\n\n\n\nNote\n\n\nIf you are not setting the cookie properly you will get a CSRF token error, as it is not validated properly.\n\n\n\n\n\n\nNote\n\n\nIf you want to develop in your own machine, be sure to set up in your /etc/hosts a subdomain from your server so you can run the NuxtJS server from there. This will ensure that you can test the cookis without having to deploy it.\n\n\n\n\nProject publication\n\n\nAs you will not need a task template, you can disable it in the config of PYBOSSA:\n\n\n1\nDISABLE_TASK_PRESENTER = True", 
            "title": "Jamstack"
        }, 
        {
            "location": "/api/jamstack/#jamstack-for-pybossa", 
            "text": "If you want to use a frontend server like NuxtJS or Next, you will have to configure PYBOSSA properly to run within your frontend framework.", 
            "title": "Jamstack for PYBOSSA"
        }, 
        {
            "location": "/api/jamstack/#authentication", 
            "text": "PYBOSSA uses signed cookies to authenticate the users and keep their sessions. As we use cookies, we will have to tell PYBOSSA how to configure them to work with you.", 
            "title": "Authentication"
        }, 
        {
            "location": "/api/jamstack/#cookies-configuration", 
            "text": "In your settings_local.py file add the following:  1\n2\n3 REMEMBER_COOKIE_DOMAIN   =   yourdomain.com  SESSION_COOKIE_DOMAIN   =   yourdomain.com  SESSION_COOKIE_SAMESITE   =   None    This will ensure that the cookie will be set for your session from the frontend site, and will be sent back to the backend for authenticating the user.", 
            "title": "Cookies configuration"
        }, 
        {
            "location": "/api/jamstack/#nuxtjs-configuration", 
            "text": "If you are using NuxtJS with Axios, you will have to configure first Axios like this in the nuxt.config.js file:  1\n2\n3\n4\n5\n6\n7\n8    axios:   { \n     baseURL:   https://yourpybossaserver.com/ , \n     credentials:   true, \n     proxyHeaders:   true, \n     headers:   { \n       Content-Type :   application/json , \n     } , \n   },    Then be sure to make a first request from the client side to get the cookie and get it stored on the browser. Then you can authenticate the user:   First use axios to get the login page: this. \\(axios.\\) get( /account/signin?response_format=json )  This request will return the CSRF token that you will need to send as a header (check the API section for more details)  Then do a post with the user login credentials: this. \\(axios.\\) post( /account/siginin?response_format=json )   Thant s all. Be sure to have the domain set it up properly, as any typo will make things harder to debug.   Note  If you are not setting the cookie properly you will get a CSRF token error, as it is not validated properly.    Note  If you want to develop in your own machine, be sure to set up in your /etc/hosts a subdomain from your server so you can run the NuxtJS server from there. This will ensure that you can test the cookis without having to deploy it.", 
            "title": "NuxtJS configuration"
        }, 
        {
            "location": "/api/jamstack/#project-publication", 
            "text": "As you will not need a task template, you can disable it in the config of PYBOSSA:  1 DISABLE_TASK_PRESENTER = True", 
            "title": "Project publication"
        }, 
        {
            "location": "/api/crud/", 
            "text": "Introduction\n\n\nThis section shows the CRUD methods (Create, Read, Update and Delete) that you can use using the RESTful API. These methods will not work with the rest of the PYBOSSA endpoints, as that only support GET and POST actions.\n\n\nGetting data\n\n\nYou can get a specific domain object by its id (by default any GET action will return only 20 objects, you can get more or fewer objects using the \nlimit\n option):\n\n\n1\nGET http://{pybossa-site-url}/api/{domain-object}/{id}[?api_key=API-KEY]\n\n\n\n\n\n\n\n\nNote\n\n\nSome GET actions may require to authenticate \n authorize the request. Use the \n?api_key\n argument to pass the \nAPI-KEY\n.\n\n\n\n\nIf the object is not found you will get a JSON object like this:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n{\n\n    \nstatus\n:\n \nfailed\n,\n\n    \naction\n:\n \nGET\n,\n\n    \ntarget\n:\n \nproject\n,\n\n    \nexception_msg\n:\n \n404 Not Found\n,\n\n    \nstatus_code\n:\n \n404\n,\n\n    \nexception_cls\n:\n \nNotFound\n\n\n}\n\n\n\n\n\n\n\nAny other error will return the same object but with the proper status code and error message.\n\n\nFiltering the data\n\n\nYou can get a list of domain objects by its fields. You will use the objects attributes to filter the query, as it will return only objects matching it:\n\n\n1\nGET http://pybossa-site-url/api/{domain-object}[?domain-object-field=value]\n\n\n\n\n\n\nMultiple fields can be used separated by the \n symbol:\n\n\n1\nGET http://pybossa-site-url/api/{domain-object}[?field1=value\nfield2=value2]\n\n\n\n\n\n\nIt is possible to limit the number of returned objects:\n\n\n1\nGET http://{pybossa-site-url}/api/{domain-object}[?field1=value\nlimit=20]\n\n\n\n\n\n\nFiltering info keys for PYBOSSA versions up to v2.8.X\n\n\nIt is possible to access first level JSON keys within the \ninfo\n field\nof Categories, Projects, Tasks, Task Runs and Results:\n\n\n1\nGET http://{pybossa-site-url}/api/{domain-object}[?field1=value\ninfo=foo::bar\nlimit=20]\n\n\n\n\n\n\nTo search within the first level (nested keys are not supported), you\nhave to use the following format:\n\n\n1\ninfo=key::value\n\n\n\n\n\n\nFor adding more keys:\n\n\n1\ninfo=key1::value1|key2::value2|keyN::valueN\n\n\n\n\n\n\nThese parameters will be ANDs, so, it will return objects that have\nthose keys with and \nand\n operator.\n\n\nFiltering info keys for PYBOSSA \n= 2.9.1 (or master branch)\n\n\nSince version v2.9.0, PYBOSSA stores JSON data as JSONB within the database.\n\n\nThis feature allows us to use new queries, like path searching via the API.\n\n\nYou can now search like this:\n\n\n1\n2\ninfo={\nkey1\n: value}\ninfo={\nkey1\n: [{\nkey2\n: value}]}\n\n\n\n\n\n\nYou specify the JSON path and the values, and the system will return those that meet\nthat criteria. This new feature allows you to filter nested data without any problems.\n\n\nIf you are not storing a dictionary, {}, in the info field, you will need to quote your\nstring, so the sytem can handle it properly. If you are storing a number, instead of a\nstring, then you should use \n9\n double quotes. This applies to integers and floats.\n\n\nYour data first\n\n\nThe API understands who is requesting the data. When you are using your API key to authenticate your calls, the system will return only your data. For instance, if you request all the projects, you will only get \nyour projects\n and the rest (owned by other users will be hidden).  You can get access to all the projects, tasks, and task runs (the whole database) using the parameter: \nall=1\n.\n\n\nFor example, if an anonymous user accesses the generic API endpoints like:\n\n\n1\nGET http://{pybossa-site-url}/api/project\n\n\n\n\n\n\nIt will return all the projects from the DB, ordering them by ID. If you\naccess it like authenticating yourself:\n\n\n1\nGET http://{pybossa-site-url}/api/project?api_key=YOURKEY\n\n\n\n\n\n\nThen, you will get your projects. In other words, the\nprojects that you own. If you don\nt have a project, but you want to\nexplore the API then you can use the \nall=1\n argument:\n\n\n1\nGET http://{pybossa-site-url}/api/project?api_key=YOURKEY\nall=1\n\n\n\n\n\n\nThis call will return all the projects from the DB ordering by ID.\n\n\nFor example, you can get a list of your Projects like this:\n\n\n1\n2\n3\nGET http://{pybossa-site-url}/api/project\nGET http://{pybossa-site-url}/api/project?api_key=YOURKEY\nGET http://{pybossa-site-url}/api/project?api_key=YOURKEY\nall=1\n\n\n\n\n\n\nOr a list of available Categories:\n\n\n1\nGET http://{pybossa-site-url}/api/category\n\n\n\n\n\n\nOr a list of Tasks:\n\n\n1\n2\n3\nGET http://{pybossa-site-url}/api/task\nGET http://{pybossa-site-url}/api/task?api_key=YOURKEY\nGET http://{pybossa-site-url}/api/task?api_key=YOURKEY\nall=1\n\n\n\n\n\n\nFor a list of TaskRuns use:\n\n\n1\n2\n3\nGET http://{pybossa-site-url}/api/taskrun\nGET http://{pybossa-site-url}/api/taskrun?api_key=YOURKEY\nGET http://{pybossa-site-url}/api/taskrun?api_key=YOURKEY\nall=1\n\n\n\n\n\n\nUsing date ranges\n\n\nIf you want, you can use the domain attribute \ncreated\n to get items from the DB. You can specify a year, year-month, year-month-day to get all the values for those ranges. For example, if you want all the tasks that have been created in 2015, just use:\n\n\n1\nGET http://{pybossa-site-url}/api/task?created=2015\nall=1\n\n\n\n\n\n\nIf you want all the task runs from 2015-05:\n\n\n1\nGET http://{pybossa-site-url}/api/taskrun?created=2015-05\nall=1\n\n\n\n\n\n\nYou can, for example, get all the task runs that a user has submitted on a given day like this:\n\n\n1\nGET http://{pybossa-site-url}/api/taskrun?created=2015-05-03\nuser_id=3\n\n\n\n\n\n\nThis filter works for any object that has the \ncreated\n attribute.\n\n\nOrder by\n\n\nAny query can be ordered by an attribute of the domain object that you are querying. For example, you can get a list of tasks ordered by ID:\n\n\n1\nGET http://{pybossa-site-url}/api/task?orderby=id\n\n\n\n\n\n\nIf you want, you can order them in descending order:\n\n\n1\nGET http://{pybossa-site-url}/api/task?orderby=id\ndesc=true\n\n\n\n\n\n\nCheck all the attributes that you can use to order by in the \nDomain\nObject section\n.\n\n\n\n\nNote\n\n\nPlease, notice that to keep users privacy, only their locale and nickname will be shared by default. Optionally, users can disable privacy mode in their settings. By doing so, also their full name and account creation date will be visible for everyone through the API.\n\n\n\n\nLimit\n\n\nBy default, PYBOSSA limits the list of items to 20. If you want to get more items, use the keyword \nlimit=N\n with \nN\n being a number to get that amount. There is a maximum of 100 to the \nlimit\n keyword, so if you try to get more items at once, it won\nt work.\n\n\nPagination\n\n\nYou can paginate the results of any GET query using the last ID of the domain object that you have received and the parameter:     \nlast_id\n. For example, to get the next 20 items after the last   project ID that you\nve received, you will write the query like this:\n\n\n1\n`GET /api/project?last_id=N.\n\n\n\n\n\n\n\n\nPagination with offset and limit\n\n\nDEPRECATED (see next Note for a better and faster solution)\n  You can use the keyword \noffset=N\n in any \nGET\n query to skip that many rows before beginning to get rows. If both \noffset\n and \nlimit\n appear, then \noffset\n rows are skipped before starting to count the \nlimit\n rows that are returned.\n\n\n\n\nRelated data\n\n\nFor Tasks, TaskRuns, and Results you can get the associated data using the argument: \nrelated=True\n.\n\n\nThis flag will allow you to get in one call all the TaskRuns and Result\nfor a given task. You can do the same for a TaskRun getting the Task and associated Result, and for a Result getting all the TaskRuns and\nassociated Task.\n\n\nProjects do not have this feature, as it will be too expensive for the\nAPI.\n\n\nProject stats\n\n\nFor Projects, you can get the associated statistics using the argument: \nstats=True\n.\n\n\nThis will add the statistics, such as overall progress, number of tasks etc.,\nagainst the \nstats\n key for each project.\n\n\nCreate\n\n\nCreate a domain object. Returns created domain object.:\n\n\n1\nPOST http://{pybossa-site-url}/api/{domain-object}[?api_key=API-KEY]\n\n\n\n\n\n\n\n\nNote\n\n\nSome POST actions may require to authenticate \n authorize the request. Use the\n\n?api_key\n argument to pass the \nAPI-KEY\n.\n\n\n\n\nIf an error occurs, the action will return a JSON object like this:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n{\n\n    \nstatus\n:\n \nfailed\n,\n\n    \naction\n:\n \nPOST\n,\n\n    \ntarget\n:\n \nproject\n,\n\n    \nexception_msg\n:\n \ntype object \nProject\n has no attribute \nshort_ame\n,\n\n    \nstatus_code\n:\n \n415\n,\n\n    \nexception_cls\n:\n \nAttributeError\n\n\n}\n\n\n\n\n\n\n\nWhere \ntarget\n will refer to a Project, Task or TaskRun object.\n\n\nUpdate\n\n\nUpdate a domain object:\n\n\n1\nPUT http://{pybossa-site-url}/api/{domain-object}/{id}[?api_key=API-KEY]\n\n\n\n\n\n\n\n\nNote\n\n\nSome PUT actions may require to authenticate \n authorize the request. Use the\n?api_key argument to pass the \nAPI-KEY\n.\n\n\n\n\nIf an error occurs, the action will return a JSON object like this:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n{\n\n    \nstatus\n:\n \nfailed\n,\n\n    \naction\n:\n \nPUT\n,\n\n    \ntarget\n:\n \nproject\n,\n\n    \nexception_msg\n:\n \ntype object \nProject\n has no attribute \nshort_ame\n,\n\n    \nstatus_code\n:\n \n415\n,\n\n    \nexception_cls\n:\n \nAttributeError\n\n\n}\n\n\n\n\n\n\n\nWhere \ntarget\n will refer to a project, Task or TaskRun object.\n\n\nDelete\n\n\nDelete a domain object:\n\n\n1\nDELETE http://{pybossa-site-url}/api/{domain-object}/{id}[?api_key=API-KEY]\n\n\n\n\n\n\n\n\nNote\n\n\nSome DELETE actions may require to authenticate \n authorize the request. Use the\n\n?api_key\n argument to pass the \nAPI-KEY\n.\n\n\n\n\nIf an error occurs, the action will return a JSON object like this:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n{\n\n    \nstatus\n:\n \nfailed\n,\n\n    \naction\n:\n \nDELETE\n,\n\n    \ntarget\n:\n \nproject\n,\n\n    \nexception_msg\n:\n \ntype object \nProject\n has no attribute \nshort_ame\n,\n\n    \nstatus_code\n:\n \n415\n,\n\n    \nexception_cls\n:\n \nAttributeError\n\n\n}\n\n\n\n\n\n\n\nWhere \ntarget\n will refer to a Project, Task or TaskRun object.", 
            "title": "CRUD"
        }, 
        {
            "location": "/api/crud/#introduction", 
            "text": "This section shows the CRUD methods (Create, Read, Update and Delete) that you can use using the RESTful API. These methods will not work with the rest of the PYBOSSA endpoints, as that only support GET and POST actions.", 
            "title": "Introduction"
        }, 
        {
            "location": "/api/crud/#getting-data", 
            "text": "You can get a specific domain object by its id (by default any GET action will return only 20 objects, you can get more or fewer objects using the  limit  option):  1 GET http://{pybossa-site-url}/api/{domain-object}/{id}[?api_key=API-KEY]    Note  Some GET actions may require to authenticate   authorize the request. Use the  ?api_key  argument to pass the  API-KEY .   If the object is not found you will get a JSON object like this:  1\n2\n3\n4\n5\n6\n7\n8 { \n     status :   failed , \n     action :   GET , \n     target :   project , \n     exception_msg :   404 Not Found , \n     status_code :   404 , \n     exception_cls :   NotFound  }    Any other error will return the same object but with the proper status code and error message.", 
            "title": "Getting data"
        }, 
        {
            "location": "/api/crud/#filtering-the-data", 
            "text": "You can get a list of domain objects by its fields. You will use the objects attributes to filter the query, as it will return only objects matching it:  1 GET http://pybossa-site-url/api/{domain-object}[?domain-object-field=value]   Multiple fields can be used separated by the   symbol:  1 GET http://pybossa-site-url/api/{domain-object}[?field1=value field2=value2]   It is possible to limit the number of returned objects:  1 GET http://{pybossa-site-url}/api/{domain-object}[?field1=value limit=20]", 
            "title": "Filtering the data"
        }, 
        {
            "location": "/api/crud/#filtering-info-keys-for-pybossa-versions-up-to-v28x", 
            "text": "It is possible to access first level JSON keys within the  info  field\nof Categories, Projects, Tasks, Task Runs and Results:  1 GET http://{pybossa-site-url}/api/{domain-object}[?field1=value info=foo::bar limit=20]   To search within the first level (nested keys are not supported), you\nhave to use the following format:  1 info=key::value   For adding more keys:  1 info=key1::value1|key2::value2|keyN::valueN   These parameters will be ANDs, so, it will return objects that have\nthose keys with and  and  operator.", 
            "title": "Filtering info keys for PYBOSSA versions up to v2.8.X"
        }, 
        {
            "location": "/api/crud/#filtering-info-keys-for-pybossa-291-or-master-branch", 
            "text": "Since version v2.9.0, PYBOSSA stores JSON data as JSONB within the database.  This feature allows us to use new queries, like path searching via the API.  You can now search like this:  1\n2 info={ key1 : value}\ninfo={ key1 : [{ key2 : value}]}   You specify the JSON path and the values, and the system will return those that meet\nthat criteria. This new feature allows you to filter nested data without any problems.  If you are not storing a dictionary, {}, in the info field, you will need to quote your\nstring, so the sytem can handle it properly. If you are storing a number, instead of a\nstring, then you should use  9  double quotes. This applies to integers and floats.", 
            "title": "Filtering info keys for PYBOSSA &gt;= 2.9.1 (or master branch)"
        }, 
        {
            "location": "/api/crud/#your-data-first", 
            "text": "The API understands who is requesting the data. When you are using your API key to authenticate your calls, the system will return only your data. For instance, if you request all the projects, you will only get  your projects  and the rest (owned by other users will be hidden).  You can get access to all the projects, tasks, and task runs (the whole database) using the parameter:  all=1 .  For example, if an anonymous user accesses the generic API endpoints like:  1 GET http://{pybossa-site-url}/api/project   It will return all the projects from the DB, ordering them by ID. If you\naccess it like authenticating yourself:  1 GET http://{pybossa-site-url}/api/project?api_key=YOURKEY   Then, you will get your projects. In other words, the\nprojects that you own. If you don t have a project, but you want to\nexplore the API then you can use the  all=1  argument:  1 GET http://{pybossa-site-url}/api/project?api_key=YOURKEY all=1   This call will return all the projects from the DB ordering by ID.  For example, you can get a list of your Projects like this:  1\n2\n3 GET http://{pybossa-site-url}/api/project\nGET http://{pybossa-site-url}/api/project?api_key=YOURKEY\nGET http://{pybossa-site-url}/api/project?api_key=YOURKEY all=1   Or a list of available Categories:  1 GET http://{pybossa-site-url}/api/category   Or a list of Tasks:  1\n2\n3 GET http://{pybossa-site-url}/api/task\nGET http://{pybossa-site-url}/api/task?api_key=YOURKEY\nGET http://{pybossa-site-url}/api/task?api_key=YOURKEY all=1   For a list of TaskRuns use:  1\n2\n3 GET http://{pybossa-site-url}/api/taskrun\nGET http://{pybossa-site-url}/api/taskrun?api_key=YOURKEY\nGET http://{pybossa-site-url}/api/taskrun?api_key=YOURKEY all=1", 
            "title": "Your data first"
        }, 
        {
            "location": "/api/crud/#using-date-ranges", 
            "text": "If you want, you can use the domain attribute  created  to get items from the DB. You can specify a year, year-month, year-month-day to get all the values for those ranges. For example, if you want all the tasks that have been created in 2015, just use:  1 GET http://{pybossa-site-url}/api/task?created=2015 all=1   If you want all the task runs from 2015-05:  1 GET http://{pybossa-site-url}/api/taskrun?created=2015-05 all=1   You can, for example, get all the task runs that a user has submitted on a given day like this:  1 GET http://{pybossa-site-url}/api/taskrun?created=2015-05-03 user_id=3   This filter works for any object that has the  created  attribute.", 
            "title": "Using date ranges"
        }, 
        {
            "location": "/api/crud/#order-by", 
            "text": "Any query can be ordered by an attribute of the domain object that you are querying. For example, you can get a list of tasks ordered by ID:  1 GET http://{pybossa-site-url}/api/task?orderby=id   If you want, you can order them in descending order:  1 GET http://{pybossa-site-url}/api/task?orderby=id desc=true   Check all the attributes that you can use to order by in the  Domain\nObject section .   Note  Please, notice that to keep users privacy, only their locale and nickname will be shared by default. Optionally, users can disable privacy mode in their settings. By doing so, also their full name and account creation date will be visible for everyone through the API.", 
            "title": "Order by"
        }, 
        {
            "location": "/api/crud/#limit", 
            "text": "By default, PYBOSSA limits the list of items to 20. If you want to get more items, use the keyword  limit=N  with  N  being a number to get that amount. There is a maximum of 100 to the  limit  keyword, so if you try to get more items at once, it won t work.", 
            "title": "Limit"
        }, 
        {
            "location": "/api/crud/#pagination", 
            "text": "You can paginate the results of any GET query using the last ID of the domain object that you have received and the parameter:      last_id . For example, to get the next 20 items after the last   project ID that you ve received, you will write the query like this:  1 `GET /api/project?last_id=N.    Pagination with offset and limit  DEPRECATED (see next Note for a better and faster solution)   You can use the keyword  offset=N  in any  GET  query to skip that many rows before beginning to get rows. If both  offset  and  limit  appear, then  offset  rows are skipped before starting to count the  limit  rows that are returned.", 
            "title": "Pagination"
        }, 
        {
            "location": "/api/crud/#related-data", 
            "text": "For Tasks, TaskRuns, and Results you can get the associated data using the argument:  related=True .  This flag will allow you to get in one call all the TaskRuns and Result\nfor a given task. You can do the same for a TaskRun getting the Task and associated Result, and for a Result getting all the TaskRuns and\nassociated Task.  Projects do not have this feature, as it will be too expensive for the\nAPI.", 
            "title": "Related data"
        }, 
        {
            "location": "/api/crud/#project-stats", 
            "text": "For Projects, you can get the associated statistics using the argument:  stats=True .  This will add the statistics, such as overall progress, number of tasks etc.,\nagainst the  stats  key for each project.", 
            "title": "Project stats"
        }, 
        {
            "location": "/api/crud/#create", 
            "text": "Create a domain object. Returns created domain object.:  1 POST http://{pybossa-site-url}/api/{domain-object}[?api_key=API-KEY]    Note  Some POST actions may require to authenticate   authorize the request. Use the ?api_key  argument to pass the  API-KEY .   If an error occurs, the action will return a JSON object like this:  1\n2\n3\n4\n5\n6\n7\n8 { \n     status :   failed , \n     action :   POST , \n     target :   project , \n     exception_msg :   type object  Project  has no attribute  short_ame , \n     status_code :   415 , \n     exception_cls :   AttributeError  }    Where  target  will refer to a Project, Task or TaskRun object.", 
            "title": "Create"
        }, 
        {
            "location": "/api/crud/#update", 
            "text": "Update a domain object:  1 PUT http://{pybossa-site-url}/api/{domain-object}/{id}[?api_key=API-KEY]    Note  Some PUT actions may require to authenticate   authorize the request. Use the\n?api_key argument to pass the  API-KEY .   If an error occurs, the action will return a JSON object like this:  1\n2\n3\n4\n5\n6\n7\n8 { \n     status :   failed , \n     action :   PUT , \n     target :   project , \n     exception_msg :   type object  Project  has no attribute  short_ame , \n     status_code :   415 , \n     exception_cls :   AttributeError  }    Where  target  will refer to a project, Task or TaskRun object.", 
            "title": "Update"
        }, 
        {
            "location": "/api/crud/#delete", 
            "text": "Delete a domain object:  1 DELETE http://{pybossa-site-url}/api/{domain-object}/{id}[?api_key=API-KEY]    Note  Some DELETE actions may require to authenticate   authorize the request. Use the ?api_key  argument to pass the  API-KEY .   If an error occurs, the action will return a JSON object like this:  1\n2\n3\n4\n5\n6\n7\n8 { \n     status :   failed , \n     action :   DELETE , \n     target :   project , \n     exception_msg :   type object  Project  has no attribute  short_ame , \n     status_code :   415 , \n     exception_cls :   AttributeError  }    Where  target  will refer to a Project, Task or TaskRun object.", 
            "title": "Delete"
        }, 
        {
            "location": "/api/fulltextsearch/", 
            "text": "You can use the full-text search engine of PYBOSSA using the RESTful API. This feature is available for the \ninfo\n fields of the domain objects, as that\ns where you will be storing the information.\n\n\nPYBOSSA only searches within the first level keys (as seen before) of the JSON data stored in the info field. \n\n\nFull-text search is amazing because it means that the server will understand verbs, plurals, singulars, etc. By default, PYBOSSA uses English for the searches. You can customize this behavior using any of the supported languages by PostgreSQL changing the settings_local.py config variable: \n\n\n1\n   \nFULLTEXTSEARCH_LANGUAGE\n \n=\n \nspanish\n.\n\n\n\n\n\n\n\nIf you want to search using this method, just add the following argument:\n\n\n1\ninfo=key1::value1\nfulltextsearch=1\n\n\n\n\n\n\nThat will return every object in the DB that has a key equal to key1 and contains he value the word value1.\n\n\nAnother option could be the following:\n\n\n1\ninfo=key1::value1|key2:word1%26word2\nfulltextsearch=1\n\n\n\n\n\n\nThis second query will return objects that have the words word1 and\nword2. It\ns important to escape the \n operator with %26 to use the and operator.\n\n\nWhen you use the fulltextsearch argument, the API will return the\nobjects enriched with the following two fields:\n\n\n\n\nheadline\n: The matched words of the key1::value1 found, with\n    \nb\n/b\n items to highlight them.\n\n\nrank\n: The ranking returned by the database. Ranking attempts  to measure how relevant documents are to a particular query, so that when there are many matches the most relevant ones can be shown first.\n\n\n\n\nHere you have an example of the expected output for an api call like\nthis:\n\n\n1\n/api/task?project_id=1\ninfo=name::ipsum%26bravo\nfulltextsearch=1\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n[\n\n  \n{\n\n    \ninfo\n:\n \n{\n\n      \nurl\n:\n \nhttps://domain.com/img.png\n,\n\n      \nname\n:\n \nLore ipsum delta bravo\n,\n\n    \n},\n\n    \nn_answers\n:\n \n1\n,\n\n    \nquorum\n:\n \n0\n,\n\n    \nlinks\n:\n \n[\n\n      \nlink rel=\nparent\n title=\nproject\n href=\nhttp://localhost:5000/api/project/1\n/\n\n    \n],\n\n    \ncalibration\n:\n \n0\n,\n\n    \nheadline\n:\n \nLore \nb\nipsum\n/b\n delta \nb\nbravo\n/b\n,\n\n    \ncreated\n:\n \n2016-05-10T11:20:45.005725\n,\n\n    \nrank\n:\n \n0.05\n,\n\n    \nstate\n:\n \ncompleted\n,\n\n    \nlink\n:\n \nlink rel=\nself\n title=\ntask\n href=\nhttp://localhost:5001/api/task/1\n/\n,\n\n    \nproject_id\n:\n \n1\n,\n\n    \nid\n:\n \n1\n,\n\n    \npriority_0\n:\n \n0\n\n  \n},\n\n\n]\n\n\n\n\n\n\n\n\n\nNote\n\n\nWhen you use the fulltextsearch API, the results are always sorted by rank, showing first the most relevant ones to your query.\n\n\n\n\n\n\nNote\n\n\nWe use PostgreSQL ts_rank_cd with the following configuration:\nts_rank_cd(textsearch, query, 4). For more details check the official\ndocumentation of PostgreSQL.\n\n\n\n\nIf the search does not find anything, the server will return an empty JSON list []", 
            "title": "Full text search"
        }, 
        {
            "location": "/api/sso/", 
            "text": "Disqus Single Sign-On (SSO)\n\n\nIf the PYBOSSA server is configured with Disqus SSO keys (see \ndocumentation\n), then you can get the authentication parameters in this endpoint: \napi/disqus/sso\n.\n\n\nThe endpoint will return a JSON object with two keys: \napi_key\n and \nremote_auth_s3\n. Use those values to authenticate the user in Disqus. Check their official \ndocumentation\n.", 
            "title": "Disqus Single Sign On"
        }, 
        {
            "location": "/api/sso/#disqus-single-sign-on-sso", 
            "text": "If the PYBOSSA server is configured with Disqus SSO keys (see  documentation ), then you can get the authentication parameters in this endpoint:  api/disqus/sso .  The endpoint will return a JSON object with two keys:  api_key  and  remote_auth_s3 . Use those values to authenticate the user in Disqus. Check their official  documentation .", 
            "title": "Disqus Single Sign-On (SSO)"
        }, 
        {
            "location": "/api/project/filtering/", 
            "text": "In PYBOSSA most of the domain objects are related to a project.\nTherefore, you can query (or filter) a list of project IDs directly via\nthe API to reduce the number of queries that you need to do. This is\nespecially useful for Single Page Applications that only use the PYBOSSA JSON endpoints.\n\n\nFor example, you can get all the tasks for a list of projects like this:\n\n\n1\nGET http://{pybossa-site-url}/api/task?project_id=[1,2,3]\n\n\n\n\n\n\nThat filter will return tasks for project IDs 1, 2 and 3. The same can\nbe done for task runs and blog posts.", 
            "title": "Filtering data to several project IDs"
        }, 
        {
            "location": "/api/project/statistics/", 
            "text": "You can list project statistics, such as number of tasks, volunteers and overall progress via:\n\n\n1\nGET /api/projectstats\n\n\n\n\n\n\n\nTo filter this list, for example, by project ID:\n\n\n1\nGET /api/projectstats?project_id=[1,2,3]\n\n\n\n\n\n\n\nTo include additional hour stats, day stats and user stats for the past 2 weeks, append \nfull=1\n to the query, for example:\n\n\n1\nGET /api/projectstats?full=1\n\n\n\n\n\n\n\nThese additional statistics will be included in the \ninfo\n field of each object returned.\n\n\n\n\nTip\n\n\nThese statistics can also be retrieved by adding the argument \nstats=True\n\nto requests made to the \n/api/project\n endpoint. In this case they will be\nadded against a \nstats\n key returned with each Project.\n\n\n\n\nUser progress\n\n\nYou can know how many tasks a user has completed for a given project by accessing\nthe following endpoint:\n\n\n1\nhttp://server.com/api/project/\nid\n/userprogress\n\n\n\n\n\n\nor\n\n\n1\nhttp://server.com/api/project/\nshort_name\n/userprogress\n\n\n\n\n\n\nThe user needs to be authenticated to get the value, otherwise it will use the anonymous IP to get the value.\n\n\nIf you are using \nexternal_uid\n for sending task runs, you can get the progress using the following parameter:\n\n\n1\nhttp://server.com/api/project/\nid\n/userprogress?external_uid=EXTERNAL_UID", 
            "title": "Statistics"
        }, 
        {
            "location": "/api/project/statistics/#user-progress", 
            "text": "You can know how many tasks a user has completed for a given project by accessing\nthe following endpoint:  1 http://server.com/api/project/ id /userprogress   or  1 http://server.com/api/project/ short_name /userprogress   The user needs to be authenticated to get the value, otherwise it will use the anonymous IP to get the value.  If you are using  external_uid  for sending task runs, you can get the progress using the following parameter:  1 http://server.com/api/project/ id /userprogress?external_uid=EXTERNAL_UID", 
            "title": "User progress"
        }, 
        {
            "location": "/api/project/project/", 
            "text": "Project creation\n\n\nEndpoint: /project/new\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nGives you the list of required fields in the form to create a project.\n\n\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: the title for the endpoint.\n\n\nform\n: The form fields that need to be sent for creating the\n    project. It contains the CSRF token for validating the POST, as well\n    as an errors field in case that something is wrong.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n{\n\n  \nerrors\n:\n \nfalse\n,\n\n  \nform\n:\n \n{\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \ndescription\n:\n \nnull\n,\n\n    \nerrors\n:\n \n{},\n\n    \nlong_description\n:\n \nnull\n,\n\n    \nname\n:\n \nnull\n,\n\n    \nshort_name\n:\n \nnull\n\n  \n},\n\n  \ntemplate\n:\n \nprojects/new.html\n,\n\n  \ntitle\n:\n \nCreate a Project\n\n\n}\n\n\n\n\n\n\n\nProject blog list\n\n\nEndpoint: /project/\nshort_name\n/blog\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the list of posted blogs by the given project short name.\n\n\n\n\nblogposts\n: All the blog posts for the given project.\n\n\nproject\n: Info about the project.\n\n\n\n\nThe project and owner fields will have more information if the owner of\nthe project does the request, providing its private information like\napi_key, password keys, etc. Otherwise, it will be removed and only show\npublic info.\n\n\nExample public output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n{\n\n  \nblogposts\n:\n \n[\n\n    \n{\n\n      \nbody\n:\n \nPlease, e-mail us to alejasan 4t ucm dot es if you find any bug. Thanks.\n,\n\n      \ncreated\n:\n \n2014-05-14T14:25:04.899079\n,\n\n      \nid\n:\n \n1\n,\n\n      \nproject_id\n:\n \n1377\n,\n\n      \ntitle\n:\n \nWe are working on the Alpha version.\n,\n\n      \nuser_id\n:\n \n3927\n\n    \n},\n\n  \n],\n\n  \nn_completed_tasks\n:\n \n137051\n,\n\n  \nn_task_runs\n:\n \n1070561\n,\n\n  \nn_tasks\n:\n \n169671\n,\n\n  \nn_volunteers\n:\n \n17499\n,\n\n  \noverall_progress\n:\n \n80\n,\n\n  \nowner\n:\n \n{\n\n    \ncreated\n:\n \n2014-02-13T15:28:08.420187\n,\n\n    \nfullname\n:\n \nJohn Doe\n,\n\n    \ninfo\n:\n \n{\n\n      \navatar\n:\n \navatar.png\n,\n\n      \ncontainer\n:\n \ncontainer\n\n    \n},\n\n    \nn_answers\n:\n \n32814\n,\n\n    \nname\n:\n \njohndoe\n,\n\n    \nrank\n:\n \n4\n,\n\n    \nregistered_ago\n:\n \n3 years ago\n,\n\n    \nscore\n:\n \n32814\n\n  \n},\n\n  \npro_features\n:\n \n{\n\n    \nauditlog_enabled\n:\n \nfalse\n,\n\n    \nautoimporter_enabled\n:\n \nfalse\n,\n\n    \nwebhooks_enabled\n:\n \nfalse\n\n  \n},\n\n  \nproject\n:\n \n{\n\n    \ncreated\n:\n \n2014-02-22T15:09:23.691811\n,\n\n    \ndescription\n:\n \nImage pattern recognition\n,\n\n    \nfeatured\n:\n \ntrue\n,\n\n    \nid\n:\n \n1\n,\n\n    \ninfo\n:\n \n{\n\n      \ncontainer\n:\n \ncontainer\n,\n\n      \nthumbnail\n:\n \n58.png\n\n    \n},\n\n    \nlast_activity\n:\n \nnull\n,\n\n    \nlast_activity_raw\n:\n \nnull\n,\n\n    \nn_tasks\n:\n \nnull\n,\n\n    \nn_volunteers\n:\n \nnull\n,\n\n    \nname\n:\n \nDark Skies ISS\n,\n\n    \noverall_progress\n:\n \nnull\n,\n\n    \nowner\n:\n \nnull\n,\n\n    \nshort_name\n:\n \ndarkskies\n,\n\n    \nupdated\n:\n \n2017-01-31T09:18:28.491496\n\n  \n},\n\n  \ntemplate\n:\n \nprojects/blog.html\n\n\n}\n\n\n\n\n\n\n\nProject task presenter editor\n\n\nEndpoint: /project/\nshort_name\n/tasks/taskpresentereditor\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nThis endpoint allows you to get the list of available templates for the\ncurrent project. This will only happen when the project has an empty template, otherwise, it will load the template for you.\n\n\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: the title for the endpoint.\n\n\npresenters\n: List of available templates (in HTML format). The\n    name of them without the \n.html\n will be the argument for the endpoint.\n\n\nlast_activit\n: last activity of the project.\n\n\nn_task_runs\n: number of task runs.\n\n\nn_tasks\n: number of tasks.\n\n\nn_volunteers\n: number of volunteers.\n\n\nowner\n: information about the owner.\n\n\npro_features\n: which pro features are enabled.\n\n\npro_features\n: which pro features are enabled.\n\n\nproject\n: info about the project.\n\n\nstatus\n: status of the flash message.\n\n\nflash\n: flash message.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n{\n\n \nflash\n:\n \nstrong\nNote\n/strong\n You will need to upload the tasks using the\na href=\\\n/project/asdf123/tasks/import\\\n CSV importer\n/a\n or download the project bundle and run the \nstrong\ncreateTasks.py\n/strong\n script in your computer\n,\n\n \nlast_activity\n:\n \nnull\n,\n\n \nn_completed_tasks\n:\n \n0\n,\n\n \nn_task_runs\n:\n \n0\n,\n\n \nn_tasks\n:\n \n0\n,\n\n \nn_volunteers\n:\n \n0\n,\n\n \noverall_progress\n:\n \n0\n,\n\n \nowner\n:\n \n{\n\n   \nadmin\n:\n \nfalse\n,\n\n   \napi_key\n:\n \nkey\n,\n\n   \nconfirmation_email_sent\n:\n \nfalse\n,\n\n   \ncreated\n:\n \n2016-09-15T11:30:42.660450\n,\n\n   \nemail_addr\n:\n \nprueba@prueba.com\n,\n\n   \nfullname\n:\n \nprueba de json\n,\n\n   \nid\n:\n \n12030\n,\n\n   \ninfo\n:\n \n{\n\n     \navatar\n:\n \navatar.png\n,\n\n     \ncontainer\n:\n \nuser\n\n   \n},\n\n   \nn_answers\n:\n \n5\n,\n\n   \nname\n:\n \npruebaadfadfa\n,\n\n   \nrank\n:\n \n4411\n,\n\n   \nregistered_ago\n:\n \n6 months ago\n,\n\n   \nscore\n:\n \n5\n,\n\n   \ntotal\n:\n \n11134\n,\n\n   \nvalid_email\n:\n \ntrue\n\n \n},\n\n \npresenters\n:\n \n[\n\n   \nprojects/presenters/basic.html\n,\n\n   \nprojects/presenters/image.html\n,\n\n   \nprojects/presenters/sound.html\n,\n\n   \nprojects/presenters/video.html\n,\n\n   \nprojects/presenters/map.html\n,\n\n   \nprojects/presenters/pdf.html\n\n \n],\n\n \npro_features\n:\n \n{\n\n   \nauditlog_enabled\n:\n \nfalse\n,\n\n   \nautoimporter_enabled\n:\n \nfalse\n,\n\n   \nwebhooks_enabled\n:\n \nfalse\n\n \n},\n\n \nproject\n:\n \n{\n\n   \nallow_anonymous_contributors\n:\n \ntrue\n,\n\n   \ncategory_id\n:\n \n4\n,\n\n   \ncontacted\n:\n \nfalse\n,\n\n   \ncontrib_button\n:\n \ndraft\n,\n\n   \ncreated\n:\n \n2017-01-11T09:37:43.613007\n,\n\n   \ndescription\n:\n \nadsf\n,\n\n   \nfeatured\n:\n \nfalse\n,\n\n   \nid\n:\n \n3\n,\n\n   \ninfo\n:\n \n{\n\n     \npasswd_hash\n:\n \nnull\n,\n\n     \ntask_presenter\n:\n \n\n   \n},\n\n   \nlong_description\n:\n \nadsf\n,\n\n   \nn_blogposts\n:\n \n0\n,\n\n   \nn_results\n:\n \n0\n,\n\n   \nname\n:\n \nasdf1324\n,\n\n   \nowner_id\n:\n \n12030\n,\n\n   \npublished\n:\n \nfalse\n,\n\n   \nsecret_key\n:\n \n73aee9df-be47-4e4c-8192-3a8bf0ab5161\n,\n\n   \nshort_name\n:\n \nasdf123\n,\n\n   \nupdated\n:\n \n2017-03-15T13:20:48.022328\n,\n\n   \nwebhook\n:\n \n\n \n},\n\n \nstatus\n:\n \ninfo\n,\n\n \ntemplate\n:\n \nprojects/task_presenter_options.html\n,\n\n \ntitle\n:\n \nProject: asdf1324 \nmiddot; Task Presenter Editor\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\nIf you want to preload the template from one of the available prenters, you have to pass the following argument: \n?template=basic\n for the basic or \n?template=iamge\n for the image template.\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n{\n\n \nerrors\n:\n \nfalse\n,\n\n \nflash\n:\n \nYour code will be \nem\nautomagically\n/em\n rendered in                       the \nstrong\npreview section\n/strong\n. Click in the                       preview button!\n,\n\n \nform\n:\n \n{\n\n   \ncsrf\n:\n \ntoken\n,\n\n   \neditor\n:\n \ndiv class=\\\nrow\\\n\\n    \ndiv class=\\\ncol-md-12\\\n\\n        \nh1\nWrite here your HTML Task Presenter\n/h1\n\\n    \n/div\n\\n\n/div\n\\n\nscript type=\\\ntext/javascript\\\n\\n(function() {\\n    // Your JavaScript code\\n    pybossa.taskLoaded(function(task, deferred){\\n        // When the task is loaded, do....\\n    });\\n\\n    pybossa.presentTask(function(task, deferred){\\n        // Present the current task to the user\\n        // Load the task data into the HTML DOM\\n    });\\n\\n    pybossa.run(\nasdf123\n);\\n})();\\n\n/script\n,\n\n   \nerrors\n:\n \n{},\n\n   \nid\n:\n \n3\n\n \n},\n\n \nlast_activity\n:\n \nnull\n,\n\n \nn_completed_tasks\n:\n \n0\n,\n\n \nn_task_runs\n:\n \n0\n,\n\n \nn_tasks\n:\n \n0\n,\n\n \nn_volunteers\n:\n \n0\n,\n\n \noverall_progress\n:\n \n0\n,\n\n \nowner\n:\n \n{\n\n   \nadmin\n:\n \nfalse\n,\n\n   \napi_key\n:\n \nkey\n,\n\n   \nconfirmation_email_sent\n:\n \nfalse\n,\n\n   \ncreated\n:\n \n2016-09-15T11:30:42.660450\n,\n\n   \nemail_addr\n:\n \nprueba@prueba.com\n,\n\n   \nfullname\n:\n \nprueba de json\n,\n\n   \nid\n:\n \n0\n,\n\n   \ninfo\n:\n \n{\n\n     \navatar\n:\n \navatar.png\n,\n\n     \ncontainer\n:\n \nuser\n\n   \n},\n\n   \nn_answers\n:\n \n5\n,\n\n   \nname\n:\n \npruebaadfadfa\n,\n\n   \nrank\n:\n \n4411\n,\n\n   \nregistered_ago\n:\n \n6 months ago\n,\n\n   \nscore\n:\n \n5\n,\n\n   \ntotal\n:\n \n11134\n,\n\n   \nvalid_email\n:\n \ntrue\n\n \n},\n\n \npro_features\n:\n \n{\n\n   \nauditlog_enabled\n:\n \nfalse\n,\n\n   \nautoimporter_enabled\n:\n \nfalse\n,\n\n   \nwebhooks_enabled\n:\n \nfalse\n\n \n},\n\n \nproject\n:\n \n{\n\n   \nallow_anonymous_contributors\n:\n \ntrue\n,\n\n   \ncategory_id\n:\n \n4\n,\n\n   \ncontacted\n:\n \nfalse\n,\n\n   \ncontrib_button\n:\n \ndraft\n,\n\n   \ncreated\n:\n \n2017-01-11T09:37:43.613007\n,\n\n   \ndescription\n:\n \nadsf\n,\n\n   \nfeatured\n:\n \nfalse\n,\n\n   \nid\n:\n \n3\n,\n\n   \ninfo\n:\n \n{\n\n     \npasswd_hash\n:\n \nnull\n,\n\n     \ntask_presenter\n:\n \n\n   \n},\n\n   \nlong_description\n:\n \nadsf\n,\n\n   \nn_blogposts\n:\n \n0\n,\n\n   \nn_results\n:\n \n0\n,\n\n   \nname\n:\n \nasdf1324\n,\n\n   \nowner_id\n:\n \n0\n,\n\n   \npublished\n:\n \nfalse\n,\n\n   \nsecret_key\n:\n \n73aee9df-be47-4e4c-8192-3a8bf0ab5161\n,\n\n   \nshort_name\n:\n \nasdf123\n,\n\n   \nupdated\n:\n \n2017-03-15T13:20:48.022328\n,\n\n   \nwebhook\n:\n \n\n \n},\n\n \nstatus\n:\n \ninfo\n,\n\n \ntemplate\n:\n \nprojects/task_presenter_editor.html\n,\n\n \ntitle\n:\n \nProject: asdf1324 \nmiddot; Task Presenter Editor\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\nThen, you can use that template, or if you prefer you can do a POST\ndirectly without that information. As in any other request involving a POST you will need the CSRFToken to validate it.\n\n\nPOST\n\n\nTo send a valid POST request, you need to pass the \ncsrf token\n in the headers. Use the following header: \nX-CSRFToken\n. You will have to POST the data fields found in the previous example, as it contains the information about the fields: specifically \neditor\n with the\nHTML/CSS/JS that you want to provide.\n\n\nIf the post is successful, you will get the following output:\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \nflash\n:\n \ni class=\\\nicon-ok\\\n/i\n Task presenter added!\n,\n\n  \nnext\n:\n \n/project/asdf123/tasks/\n,\n\n  \nstatus\n:\n \nsuccess\n\n\n}\n\n\n\n\n\n\n\nProject delete\n\n\nEndpoint: /project/\nshort_name\n/delete\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nThe GET endpoint allows you to get all the info about the project (see\nthe Project endpoint as well) as well as the csrf token. As this\nendpoint does not have any form, the csrf token is not inside the form\nfield.\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n{\n\n  \ncsrf\n:\n \ntoken\n,\n\n  \nlast_activity\n:\n \nnull\n,\n\n  \nn_tasks\n:\n \n0\n,\n\n  \noverall_progress\n:\n \n0\n,\n\n  \nowner\n:\n \n{\n\n    \nadmin\n:\n \nfalse\n,\n\n    \napi_key\n:\n \nkey\n,\n\n    \nconfirmation_email_sent\n:\n \nfalse\n,\n\n    \ncreated\n:\n \n2016-09-15T11:30:42.660450\n,\n\n    \nemail_addr\n:\n \nprueba@prueba.com\n,\n\n    \nfullname\n:\n \nprueba de json\n,\n\n    \nid\n:\n \n0\n,\n\n    \ninfo\n:\n \n{\n\n      \navatar\n:\n \navatar.png\n,\n\n      \ncontainer\n:\n \n0\n\n    \n},\n\n    \nn_answers\n:\n \n5\n,\n\n    \nname\n:\n \npruebaadfadfa\n,\n\n    \nrank\n:\n \n4411\n,\n\n    \nregistered_ago\n:\n \n6 months ago\n,\n\n    \nscore\n:\n \n5\n,\n\n    \ntotal\n:\n \n11134\n,\n\n    \nvalid_email\n:\n \ntrue\n\n  \n},\n\n  \npro_features\n:\n \n{\n\n    \nauditlog_enabled\n:\n \nfalse\n,\n\n    \nautoimporter_enabled\n:\n \nfalse\n,\n\n    \nwebhooks_enabled\n:\n \nfalse\n\n  \n},\n\n  \nproject\n:\n \n{\n\n    \nallow_anonymous_contributors\n:\n \ntrue\n,\n\n    \ncategory_id\n:\n \n2\n,\n\n    \ncontacted\n:\n \nfalse\n,\n\n    \ncreated\n:\n \n2017-03-15T15:02:12.160810\n,\n\n    \ndescription\n:\n \nasdf\n,\n\n    \nfeatured\n:\n \nfalse\n,\n\n    \nid\n:\n \n3\n,\n\n    \ninfo\n:\n \n{},\n\n    \nlong_description\n:\n \nasdf\n,\n\n    \nname\n:\n \nalgo\n,\n\n    \nowner_id\n:\n \n12030\n,\n\n    \npublished\n:\n \nfalse\n,\n\n    \nsecret_key\n:\n \nc5a77943-f5a4-484a-86bb-d69559e80357\n,\n\n    \nshort_name\n:\n \nalgo\n,\n\n    \nupdated\n:\n \n2017-03-15T15:02:12.160823\n,\n\n    \nwebhook\n:\n \nnull\n\n  \n},\n\n  \ntemplate\n:\n \n/projects/delete.html\n,\n\n  \ntitle\n:\n \nProject: algo \nmiddot; Delete\n\n\n}\n\n\n\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \nflash\n:\n \nProject deleted!\n,\n\n  \nnext\n:\n \n/account/pruebaadfadfa/\n,\n\n  \nstatus\n:\n \nsuccess\n\n\n}\n\n\n\n\n\n\n\nProject update\n\n\nEndpoint: /project/\nshort_name\n/update\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nform\n: the form fields that need to be sent for updating the\n    project. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong.\n\n\nupload_form\n: the form fields that need to be sent for updating\n    the project\ns avatar. It contains the csrf token for validating the\n    post, as well as an errors field in case that something is wrong.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: The title for the view.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n{\n\n  \nform\n:\n \n{\n\n    \nallow_anonymous_contributors\n:\n \nfalse\n,\n\n    \ncategory_id\n:\n \n2\n,\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \ndescription\n:\n \ndescription\n,\n\n    \nerrors\n:\n \n{},\n\n    \nid\n:\n \n3117\n,\n\n    \nlong_description\n:\n \nlong description\n,\n\n    \nname\n:\n \nname\n,\n\n    \npassword\n:\n \nnull\n,\n\n    \nprotect\n:\n \nfalse\n,\n\n    \nshort_name\n:\n \nslug\n,\n\n    \nwebhook\n:\n \nnull\n\n  \n},\n\n  \nlast_activity\n:\n \nnull\n,\n\n  \nn_completed_tasks\n:\n \n0\n,\n\n  \nn_task_runs\n:\n \n0\n,\n\n  \nn_tasks\n:\n \n2\n,\n\n  \nn_volunteers\n:\n \n0\n,\n\n  \noverall_progress\n:\n \n0\n,\n\n  \nowner\n:\n \n{\n\n    \nadmin\n:\n \nfalse\n,\n\n    \napi_key\n:\n \nkey\n,\n\n    \nconfirmation_email_sent\n:\n \nfalse\n,\n\n    \ncreated\n:\n \n2012-06-06T06:27:18.760254\n,\n\n    \nemail_addr\n:\n \nemail.com\n,\n\n    \nfullname\n:\n \nJohn Doe\n,\n\n    \nid\n:\n \n0\n,\n\n    \ninfo\n:\n \n{\n\n      \navatar\n:\n \navatar.png\n,\n\n      \ncontainer\n:\n \nuser\n,\n\n    \n},\n\n    \nn_answers\n:\n \n2414\n,\n\n    \nname\n:\n \njohndoe\n,\n\n    \nrank\n:\n \n69\n,\n\n    \nregistered_ago\n:\n \n4 years ago\n,\n\n    \nscore\n:\n \n2414\n,\n\n    \ntotal\n:\n \n11134\n,\n\n    \nvalid_email\n:\n \nfalse\n\n  \n},\n\n  \npro_features\n:\n \n{\n\n    \nauditlog_enabled\n:\n \ntrue\n,\n\n    \nautoimporter_enabled\n:\n \ntrue\n,\n\n    \nwebhooks_enabled\n:\n \ntrue\n\n  \n},\n\n  \nproject\n:\n \n{\n\n    \nallow_anonymous_contributors\n:\n \nfalse\n,\n\n    \ncategory_id\n:\n \n2\n,\n\n    \ncontacted\n:\n \nfalse\n,\n\n    \ncontrib_button\n:\n \ncan_contribute\n,\n\n    \ncreated\n:\n \n2015-06-29T08:23:14.201331\n,\n\n    \ndescription\n:\n \ndescription\n,\n\n    \nfeatured\n:\n \nfalse\n,\n\n    \nid\n:\n \n0\n,\n\n    \ninfo\n:\n \n{\n\n      \ncontainer\n:\n \nuser\n,\n\n      \npasswd_hash\n:\n \nnull\n,\n\n      \ntask_presenter\n:\n \nHTML+CSS+JS,\n\n\n      \nthumbnail\n: \nthumbnail.png\n\n\n    },\n\n\n    \nlong_description\n: \nlong\n \ndescription\n,\n\n\n    \nn_blogposts\n: 0,\n\n\n    \nn_results\n: 0,\n\n\n    \nname\n: \nname\n,\n\n\n    \nowner_id\n: 0,\n\n\n    \npublished\n: true,\n\n\n    \nsecret_key\n: \nkey\n,\n\n\n    \nshort_name\n: \nslug\n,\n\n\n    \nupdated\n: \n2017-03-16\nT\n14\n:\n50\n:\n45.055331\n,\n\n\n    \nwebhook\n: null\n\n\n  },\n\n\n  \ntemplate\n: \n/projects/update.html\n,\n\n\n  \ntitle\n: \nProject\n:\n \nname\n \nmiddot;\n \nUpdate\n,\n\n\n  \nupload_form\n: {\n\n\n    \navatar\n: null,\n\n\n    \ncsrf\n: \ntoken\n,\n\n\n    \nerrors\n: {},\n\n\n    \nid\n: null,\n\n\n    \nx\n1\n: 0,\n\n\n    \nx\n2\n: 0,\n\n\n    \ny\n1\n: 0,\n\n\n    \ny\n2\n:\n \n0\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nPOST\n\n\nTo send a valid POST request, you need to pass the \ncsrf token\n in the headers. Use the following header: \nX-CSRFToken.\n\n\nAs this endpoint supports \ntwo\n different forms, you must specify\nwhich form are you targeting adding an extra key: \nbtn\n. The options\nfor this key are:\n\n\n\n\nUpload\n: to update the \nupload_form\n.\n\n\n\n\nThe other one does not need this extra key.\n\n\n\n\nNote\n\n\nBe sure to respect the Uppercase in the first letter. Otherwise, it will fail.\n\n\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nflash\n: A success message, or error indicating if the request was\n    successful.\n\n\nform\n: the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in    the case that something is wrong.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \nflash\n:\n \nYour profile has been updated!\n,\n\n  \nnext\n:\n \n/account/pruebaadfadfa/update\n,\n\n  \nstatus\n:\n \nsuccess\n\n\n}\n\n\n\n\n\n\n\nIf there\ns an error in the form fields, you will get them in the\nform.errors\n key:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n{\n\n  \nflash\n:\n \nPlease correct the errors\n,\n\n  \nform\n:\n \n{\n\n    \nallow_anonymous_contributors\n:\n \nfalse\n,\n\n    \ncategory_id\n:\n \n2\n,\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \ndescription\n:\n \ndescription\n,\n\n    \nerrors\n:\n \n{\n\n      \nshort_name\n:\n \n[\n\n        \nThis field is required.\n\n      \n]\n\n    \n},\n\n    \nid\n:\n \n3117\n,\n\n    \nlong_description\n:\n \nnew description\n,\n\n    \nname\n:\n \nnew name\n,\n\n    \npassword\n:\n \nnull\n,\n\n    \nprotect\n:\n \ntrue\n,\n\n    \nshort_name\n:\n \n,\n\n    \nwebhook\n:\n \nnull\n\n  \n},\n\n  \n...\n\n\n}\n\n\n\n\n\n\n\n\n\nNote\n\n\nFor updating the avatar is very important to not set the \nContent-Type\n. If\nyou  are using jQuery, set it to False, so the file is handled properly.\nTo still recieve a JSON response you can add the response_format=json query\nparamater to your request.\n\n\nThe (x1,x2,y1,y2) are the coordinates for cutting the image and create\nthe avatar.\n\n\n(x1,y1) are the offset left of the cropped area and the offset top of the cropped area respectively; and (x2,y2) are the width and height of the crop. And don\nt forget to add an extra key to the form-data: \nbtn\n with a value Upload to select this form.\n\n\n\n\nProject reset secret key\n\n\nEndpoint: /project/\nshort_name\n/resetsecretkey\n\n\nAllowed methods\n: \nPOST\n\n\nResets the secret key of a project.\n\n\nTo send a valid POST request, you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n retrieved from the GET\nendpoint \n/project/\nshort_name\n/update\n.\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \nflash\n:\n \nNew secret key generated\n,\n\n  \nnext\n:\n \n/project/flickrproject2/update\n,\n\n  \nstatus\n:\n \nsuccess\n\n\n}\n\n\n\n\n\n\n\nProject tasks browse\n\n\nEndpoint: /project/\nshort_name\n/tasks/browse/\n \nEndpoint:\n/project/\nshort_name\n/tasks/browse/\nint:page\n\n\nAllowed methods\n: \nGET\n\n\n\n\nn_completed_tasks\n: number of completed tasks\n\n\nn_tasks\n: number of tasks\n\n\nn_volunteers\n: number of volunteers\n\n\noverall_progress\n: overall progress\n\n\nowner\n: project owner\n\n\npagination\n: pagination information\n\n\npro_features\n: pro features enabled or not\n\n\nproject\n: project information\n\n\ntasks\n: tasks, paginated\n\n\ntemplate\n: the Jinja2 template that should be rendered in case of\n    text/html.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n{\n\n  \nn_completed_tasks\n:\n \n0\n,\n\n  \nn_tasks\n:\n \n1\n,\n\n  \nn_volunteers\n:\n \n0\n,\n\n  \noverall_progress\n:\n \n0\n,\n\n  \nowner\n:\n \n{\n\n    \ncreated\n:\n \n2017-04-17T23:56:22.892222\n,\n\n    \nfullname\n:\n \nJohn Doe\n,\n\n    \ninfo\n:\n \n{},\n\n    \nlocale\n:\n \nnull\n,\n\n    \nn_answers\n:\n \n0\n,\n\n    \nname\n:\n \njohndoe\n,\n\n    \nrank\n:\n \nnull\n,\n\n    \nregistered_ago\n:\n \n3 hours ago\n,\n\n    \nscore\n:\n \nnull\n\n  \n},\n\n  \npagination\n:\n \n{\n\n    \nnext\n:\n \nfalse\n,\n\n    \npage\n:\n \n1\n,\n\n    \nper_page\n:\n \n10\n,\n\n    \nprev\n:\n \nfalse\n,\n\n    \ntotal\n:\n \n1\n\n  \n},\n\n  \npro_features\n:\n \n{\n\n    \nauditlog_enabled\n:\n \nfalse\n,\n\n    \nautoimporter_enabled\n:\n \nfalse\n,\n\n    \nwebhooks_enabled\n:\n \nfalse\n\n  \n},\n\n  \nproject\n:\n \n{\n\n    \ncreated\n:\n \n2017-04-17T23:56:23.416754\n,\n\n    \ndescription\n:\n \nDescription\n,\n\n    \nfeatured\n:\n \nfalse\n,\n\n    \nid\n:\n \n1\n,\n\n    \ninfo\n:\n \n{},\n\n    \nlast_activity\n:\n \nnull\n,\n\n    \nlast_activity_raw\n:\n \nnull\n,\n\n    \nn_tasks\n:\n \nnull\n,\n\n    \nn_volunteers\n:\n \nnull\n,\n\n    \nname\n:\n \nSample Project\n,\n\n    \noverall_progress\n:\n \nnull\n,\n\n    \nowner\n:\n \nnull\n,\n\n    \nshort_name\n:\n \nsampleapp\n,\n\n    \nupdated\n:\n \n2017-04-17T23:56:23.589652\n\n  \n},\n\n  \ntasks\n:\n \n[\n\n    \n{\n\n      \nid\n:\n \n1\n,\n\n      \nn_answers\n:\n \n10\n,\n\n      \nn_task_runs\n:\n \n0\n,\n\n      \npct_status\n:\n \n0.0\n\n    \n}\n\n  \n],\n\n  \ntemplate\n:\n \n/projects/tasks_browse.html\n,\n\n  \ntitle\n:\n \nProject: Sample Project \nmiddot; Tasks\n\n\n}\n\n\n\n\n\n\n\nProject tasks import\n\n\nEndpoint: /project/\nshort_name\n/tasks/import\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\navailable_importers\n: A list of available importers for the\n    server. To use one of the items, you have to add to the endpoint the\n    following argument: \n?type=name\n where the name is the string that you will find in the list of importers in the format:\n    \nprojects/tasks/name.html\n.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: The title for the view.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n{\n\n  \navailable_importers\n:\n \n[\n\n    \nprojects/tasks/epicollect.html\n,\n\n    \nprojects/tasks/csv.html\n,\n\n    \nprojects/tasks/s3.html\n,\n\n    \nprojects/tasks/youtube.html\n,\n\n    \nprojects/tasks/gdocs.html\n,\n\n    \nprojects/tasks/dropbox.html\n,\n\n    \nprojects/tasks/iiif.html\n\n  \n],\n\n  \nform\n:\n \nnull\n,\n\n  \nloading_text\n:\n \nImporting tasks, this may take a while, wait...\n,\n\n  \nn_completed_tasks\n:\n \n0\n,\n\n  \nn_tasks\n:\n \n5\n,\n\n  \nn_volunteers\n:\n \n0\n,\n\n  \noverall_progress\n:\n \n0\n,\n\n  \nowner\n:\n \n{\n\n    \nadmin\n:\n \nfalse\n,\n\n    \napi_key\n:\n \nkey\n,\n\n    \nconfirmation_email_sent\n:\n \nfalse\n,\n\n    \ncreated\n:\n \n2012-06-06T06:27:18.760254\n,\n\n    \nemail_addr\n:\n \njohndoe@gmail.com\n,\n\n    \nfullname\n:\n \nJohn Doe\n,\n\n    \nid\n:\n \n0\n,\n\n    \ninfo\n:\n \n{\n\n      \navatar\n:\n \navatar.png\n,\n\n      \ncontainer\n:\n \nuser\n,\n\n    \n},\n\n    \nn_answers\n:\n \n2414\n,\n\n    \nname\n:\n \njohndoe\n,\n\n    \nrank\n:\n \n69\n,\n\n    \nregistered_ago\n:\n \n4 years ago\n,\n\n    \nscore\n:\n \n2414\n,\n\n    \ntotal\n:\n \n11134\n,\n\n    \nvalid_email\n:\n \nfalse\n\n  \n},\n\n  \npro_features\n:\n \n{\n\n    \nauditlog_enabled\n:\n \ntrue\n,\n\n    \nautoimporter_enabled\n:\n \ntrue\n,\n\n    \nwebhooks_enabled\n:\n \ntrue\n\n  \n},\n\n  \nproject\n:\n \n{\n\n    \nallow_anonymous_contributors\n:\n \nfalse\n,\n\n    \ncategory_id\n:\n \n2\n,\n\n    \ncontacted\n:\n \nfalse\n,\n\n    \ncontrib_button\n:\n \ncan_contribute\n,\n\n    \ncreated\n:\n \n2015-06-29T08:23:14.201331\n,\n\n    \ndescription\n:\n \nold\n,\n\n    \nfeatured\n:\n \nfalse\n,\n\n    \nid\n:\n \n3117\n,\n\n    \ninfo\n:\n \n{\n\n      \ncontainer\n:\n \nuser\n,\n\n      \npasswd_hash\n:\n \nnull\n,\n\n      \ntask_presenter\n:\n \nHTML+CSS+JS\n\n      \nthumbnail\n:\n \navatar.png\n\n    \n},\n\n    \nlong_description\n:\n \nalgo\n,\n\n    \nn_blogposts\n:\n \n0\n,\n\n    \nn_results\n:\n \n0\n,\n\n    \nname\n:\n \nname\n,\n\n    \nowner_id\n:\n \n3\n,\n\n    \npublished\n:\n \ntrue\n,\n\n    \nsecret_key\n:\n \nf\n,\n\n    \nshort_name\n:\n \nname\n,\n\n    \nupdated\n:\n \n2017-03-17T09:15:46.867215\n,\n\n    \nwebhook\n:\n \nnull\n\n  \n},\n\n  \ntarget\n:\n \nproject.import_task\n,\n\n  \ntask_tmpls\n:\n \n[\n\n    \nprojects/tasks/gdocs-sound.html\n,\n\n    \nprojects/tasks/gdocs-map.html\n,\n\n    \nprojects/tasks/gdocs-image.html\n,\n\n    \nprojects/tasks/gdocs-video.html\n,\n\n    \nprojects/tasks/gdocs-pdf.html\n\n  \n],\n\n  \ntemplate\n:\n \n/projects/task_import_options.html\n,\n\n  \ntitle\n:\n \nProject: bevan \nmiddot; Import Tasks\n\n\n}\n\n\n\n\n\n\n\nTherefore, if you want to import tasks from a CSV link, you will have to\ndo the following GET:\n\n\n1\nGET server/project/\nshort_name\n/tasks/import?type=csv\n\n\n\n\n\n\nThat query will return the same output as before, but instead of the\navailable_importers, you will get the the form fields and CSRF token\nfor that importer.\n\n\nPOST\n\n\nTo send a valid POST request, you need to pass the \ncsrf token\n in the headers. Use the following header: \nX-CSRFToken.\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nflash\n: A success message, or error indicating if the request was\n    successful.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \nflash\n:\n \nTasks imported\n,\n\n  \nnext\n:\n \n/project/\nshort_name\n/tasks/\n,\n\n  \nstatus\n:\n \nsuccess\n\n\n}\n\n\n\n\n\n\n\nProject tutorial\n\n\nEndpoint: /project/\nshort_name\n/tutorial\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nowner\n: owner information\n\n\nproject\n: project information\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: The title for the view.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n{\n\n  \nowner\n:\n \n{\n\n    \ncreated\n:\n \n2014-02-13T15:28:08.420187\n,\n\n    \nfullname\n:\n \nJohn Doe\n,\n\n    \ninfo\n:\n \n{\n\n      \navatar\n:\n \n1410769844.15_avatar.png\n,\n\n      \navatar_url\n:\n \nnull\n,\n\n      \ncontainer\n:\n \nuser_3927\n,\n\n      \nextra\n:\n \nnull\n\n    \n},\n\n    \nlocale\n:\n \nnull\n,\n\n    \nn_answers\n:\n \n43565\n,\n\n    \nname\n:\n \njdoe\n,\n\n    \nrank\n:\n \n3\n,\n\n    \nregistered_ago\n:\n \n3 years ago\n,\n\n    \nscore\n:\n \n43565\n\n  \n},\n\n  \nproject\n:\n \n{\n\n    \ncreated\n:\n \n2014-02-22T15:09:23.691811\n,\n\n    \ndescription\n:\n \nImage pattern recognition\n,\n\n    \nfeatured\n:\n \ntrue\n,\n\n    \nid\n:\n \n1377\n,\n\n    \ninfo\n:\n \n{\n\n      \ncontainer\n:\n \nuser_3927\n,\n\n      \nthumbnail\n:\n \napp_1377_thumbnail_1410772569.58.png\n,\n\n      \nthumbnail_url\n:\n \nnull\n\n    \n},\n\n    \nlast_activity\n:\n \nnull\n,\n\n    \nlast_activity_raw\n:\n \nnull\n,\n\n    \nn_tasks\n:\n \nnull\n,\n\n    \nn_volunteers\n:\n \nnull\n,\n\n    \nname\n:\n \nmyproject\n,\n\n    \noverall_progress\n:\n \nnull\n,\n\n    \nowner\n:\n \nnull\n,\n\n    \nshort_name\n:\n \njohndoeproject\n,\n\n    \nupdated\n:\n \n2017-03-02T21:00:33.965587\n\n  \n},\n\n  \ntemplate\n:\n \n/projects/tutorial.html\n,\n\n  \ntitle\n:\n \nProject: myproject\n\n\n}\n\n\n\n\n\n\n\nProject shortname\n\n\nEndpoint: /project/\nshort_name\n/\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nShows project information and owner information.\n\n\nIf you are not the owner of the project or anonymous, then you will get only available public information for the owner and the project itself.\n\n\n\n\nlast_activity\n: Last activity on the project.\n\n\nn_completed_tasks\n: Number of completed tasks.\n\n\nn_task_runs\n: Number of task runs.\n\n\nn_tasks\n: Number of tasks.\n\n\nn_volunteers\n: Number of volunteers.\n\n\noverall_progress\n: Overall progress.\n\n\nowner\n: Owner user information.\n\n\npro_features\n: Enabled pro features for the project.\n\n\nproject\n: Project information\n\n\ntemplate\n: Jinja2 template.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\nfor logged in user JohnDoe:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n{\n\n  \nlast_activity\n:\n \n2015-01-21T12:01:41.209270\n,\n\n  \nn_completed_tasks\n:\n \n0\n,\n\n  \nn_task_runs\n:\n \n3\n,\n\n  \nn_tasks\n:\n \n8\n,\n\n  \nn_volunteers\n:\n \n1\n,\n\n  \noverall_progress\n:\n \n0\n,\n\n  \nowner\n:\n \n{\n\n    \nadmin\n:\n \nfalse\n,\n\n    \napi_key\n:\n \nakjhfd85-8afd6-48af-f7afg-kjhsfdlkjhf1\n,\n\n    \nconfirmation_email_sent\n:\n \nfalse\n,\n\n    \ncreated\n:\n \n2014-08-11T08:59:32.079599\n,\n\n    \nemail_addr\n:\n \njohndoe@johndoe.com\n,\n\n    \nfullname\n:\n \nJohn Doe\n,\n\n    \nid\n:\n \n1234\n,\n\n    \ninfo\n:\n \n{\n\n      \ncontainer\n:\n \nuser_1234\n\n    \n},\n\n    \nn_answers\n:\n \n56\n,\n\n    \nname\n:\n \nJohnDoe\n,\n\n    \nrank\n:\n \n1813\n,\n\n    \nregistered_ago\n:\n \n2 years ago\n,\n\n    \nscore\n:\n \n56\n,\n\n    \ntotal\n:\n \n11093\n,\n\n    \nvalid_email\n:\n \ntrue\n\n  \n},\n\n  \npro_features\n:\n \n{\n\n    \nauditlog_enabled\n:\n \ntrue\n,\n\n    \nautoimporter_enabled\n:\n \ntrue\n,\n\n    \nwebhooks_enabled\n:\n \ntrue\n\n  \n},\n\n  \nproject\n:\n \n{\n\n    \nallow_anonymous_contributors\n:\n \ntrue\n,\n\n    \ncategory_id\n:\n \n2\n,\n\n    \ncontacted\n:\n \ntrue\n,\n\n    \ncontrib_button\n:\n \ncan_contribute\n,\n\n    \ncreated\n:\n \n2015-01-21T11:59:36.519541\n,\n\n    \ndescription\n:\n \nflickr678\n,\n\n    \nfeatured\n:\n \nfalse\n,\n\n    \nid\n:\n \n4567\n,\n\n    \ninfo\n:\n \n{\n\n      \ntask_presenter\n:\n \ndiv\n .... \n\n    \n},\n\n    \nlong_description\n:\n \nflickr678\\r\\n\n,\n\n    \nn_blogposts\n:\n \n0\n,\n\n    \nn_results\n:\n \n0\n,\n\n    \nname\n:\n \nflickr678\n,\n\n    \nowner_id\n:\n \n9876\n,\n\n    \npublished\n:\n \ntrue\n,\n\n    \nsecret_key\n:\n \nveryverysecretkey\n,\n\n    \nshort_name\n:\n \nflickr678\n,\n\n    \nupdated\n:\n \n2016-04-13T08:07:38.897626\n,\n\n    \nwebhook\n:\n \nnull\n\n  \n},\n\n  \ntemplate\n:\n \n/projects/project.html\n,\n\n  \ntitle\n:\n \nProject: flickr678\n\n\n}\n\n\n\n\n\n\n\nAnonymous and other user output:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n{\n\n  \nlast_activity\n:\n \n2015-01-21T12:01:41.209270\n,\n\n  \nn_completed_tasks\n:\n \n0\n,\n\n  \nn_task_runs\n:\n \n3\n,\n\n  \nn_tasks\n:\n \n8\n,\n\n  \nn_volunteers\n:\n \n1\n,\n\n  \noverall_progress\n:\n \n0\n,\n\n  \nowner\n:\n \n{\n\n    \ncreated\n:\n \n2014-08-11T08:59:32.079599\n,\n\n    \nfullname\n:\n \nJohn Doe\n,\n\n    \ninfo\n:\n \n{\n\n      \navatar\n:\n \nnull\n,\n\n      \ncontainer\n:\n \nuser_4953\n\n    \n},\n\n    \nn_answers\n:\n \n56\n,\n\n    \nname\n:\n \nJohnDoe\n,\n\n    \nrank\n:\n \n1813\n,\n\n    \nregistered_ago\n:\n \n2 years ago\n,\n\n    \nscore\n:\n \n56\n\n  \n},\n\n  \npro_features\n:\n \n{\n\n    \nauditlog_enabled\n:\n \nfalse\n,\n\n    \nautoimporter_enabled\n:\n \nfalse\n,\n\n    \nwebhooks_enabled\n:\n \nfalse\n\n  \n},\n\n  \nproject\n:\n \n{\n\n    \ncreated\n:\n \n2015-01-21T11:59:36.519541\n,\n\n    \ndescription\n:\n \nflickr678\n,\n\n    \nid\n:\n \n4567\n,\n\n    \ninfo\n:\n \n{\n\n      \ncontainer\n:\n \nnull\n,\n\n      \nthumbnail\n:\n \nnull\n\n    \n},\n\n    \nlast_activity\n:\n \nnull\n,\n\n    \nlast_activity_raw\n:\n \nnull\n,\n\n    \nn_tasks\n:\n \nnull\n,\n\n    \nn_volunteers\n:\n \nnull\n,\n\n    \nname\n:\n \nflickr678\n,\n\n    \noverall_progress\n:\n \nnull\n,\n\n    \nowner\n:\n \nnull\n,\n\n    \nshort_name\n:\n \nflickr678\n,\n\n    \nupdated\n:\n \n2016-04-13T08:07:38.897626\n\n  \n},\n\n  \ntemplate\n:\n \n/projects/project.html\n,\n\n  \ntitle\n:\n \nProject: flickr678\n\n\n}\n\n\n\n\n\n\n\nProject settings\n\n\nEndpoint: /project/\nshort_name\n/settings\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nShows project information and owner information. Only works for\nauthenticated users for their projects (or admins). Anonymous users\nwill get a 302 to the login page. Logged in users with access rights will get a 403 when it\ns not their project.\n\n\n\n\nlast_activity\n: Last activity on the project.\n\n\nn_completed_tasks\n: Number of completed tasks.\n\n\nn_task_runs\n: Number of task runs.\n\n\nn_tasks\n: Number of tasks.\n\n\nn_volunteers\n: Number of volunteers.\n\n\noverall_progress\n: Overall progress.\n\n\nowner\n: Owner user information.\n\n\npro_features\n: Enabled pro features for the project.\n\n\nproject\n: Project information\n\n\ntemplate\n: Jinja2 template.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nThe example output matches \n/project/\nshort_name\n/\n\n\nProject results\n\n\nEndpoint: /project/\nshort_name\n/results\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nShows information about a project results template. If the logged in\nuser is the owner of the project you will get a more detailed owner\ninformation and project information.\n\n\n\n\nlast_activity\n: Last activity on the project.\n\n\nn_completed_tasks\n: Number of completed tasks.\n\n\nn_results\n: Number of results\n\n\nn_task_runs\n: Number of task runs.\n\n\nn_tasks\n: Number of tasks.\n\n\nn_volunteers\n: Number of volunteers.\n\n\noverall_progress\n: Overall progress.\n\n\nowner\n: Owner user information.\n\n\npro_features\n: Enabled pro features for the project.\n\n\nproject\n: Project information\n\n\ntemplate\n: Jinja2 template for results\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\nFor an anonymous user or when you are not the project owner:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n{\n\n  \nlast_activity\n:\n \n2015-01-21T12:01:41.209270\n,\n\n  \nn_completed_tasks\n:\n \n0\n,\n\n  \nn_results\n:\n \n0\n,\n\n  \nn_task_runs\n:\n \n3\n,\n\n  \nn_tasks\n:\n \n8\n,\n\n  \nn_volunteers\n:\n \n1\n,\n\n  \noverall_progress\n:\n \n0\n,\n\n  \nowner\n:\n \n{\n\n    \ncreated\n:\n \n2014-08-11T08:59:32.079599\n,\n\n    \nfullname\n:\n \nJohn\n,\n\n    \ninfo\n:\n \n{\n\n      \navatar\n:\n \nnull\n,\n\n      \ncontainer\n:\n \nuser_4953\n\n    \n},\n\n    \nn_answers\n:\n \n56\n,\n\n    \nname\n:\n \nJohnDoe\n,\n\n    \nrank\n:\n \n1813\n,\n\n    \nregistered_ago\n:\n \n2 years ago\n,\n\n    \nscore\n:\n \n56\n\n  \n},\n\n  \npro_features\n:\n \n{\n\n    \nauditlog_enabled\n:\n \nfalse\n,\n\n    \nautoimporter_enabled\n:\n \nfalse\n,\n\n    \nwebhooks_enabled\n:\n \nfalse\n\n  \n},\n\n  \nproject\n:\n \n{\n\n    \ncreated\n:\n \n2015-01-21T11:59:36.519541\n,\n\n    \ndescription\n:\n \nflickr678\n,\n\n    \nfeatured\n:\n \nfalse\n,\n\n    \nid\n:\n \n2417\n,\n\n    \ninfo\n:\n \n{\n\n      \ncontainer\n:\n \nnull\n,\n\n      \nthumbnail\n:\n \nnull\n\n    \n},\n\n    \nlast_activity\n:\n \nnull\n,\n\n    \nlast_activity_raw\n:\n \nnull\n,\n\n    \nn_tasks\n:\n \nnull\n,\n\n    \nn_volunteers\n:\n \nnull\n,\n\n    \nname\n:\n \nflickr678\n,\n\n    \noverall_progress\n:\n \nnull\n,\n\n    \nowner\n:\n \nnull\n,\n\n    \nshort_name\n:\n \nflickr678\n,\n\n    \nupdated\n:\n \n2016-04-13T08:07:38.897626\n\n  \n},\n\n  \ntemplate\n:\n \n/projects/results.html\n,\n\n  \ntitle\n:\n \nProject: flickr678\n\n\n}\n\n\n\n\n\n\n\nProject stats\n\n\nEndpoint: /project/\nshort_name\n/stats\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nShows project statistics if available.\n\n\nIf you are not the owner of the project or anonymous, then you will get only available public information for the owner and the project itself.\n\n\n\n\navg_contrib_time\n: Average contribution time (NOT existing when\n    no statistics there!).\n\n\nprojectStats\n: Project statistics (NOT existing when no\n    statistics there!).\n\n\nuserStats\n: User statistics (NOT existing when no statistics\n    there!).\n\n\nn_completed_tasks\n: Number of completed tasks.\n\n\nn_tasks\n: Number of tasks.\n\n\nn_volunteers\n: Number of volunteers.\n\n\noverall_progress\n: Progress (0..100).\n\n\nowner\n: Owner user information\n\n\npro_features\n: Enabled pro features for the project.\n\n\nproject\n: Project information\n\n\ntemplate\n: Jinja2 template.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n Statistics are existing in this output:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n{\n\n  \navg_contrib_time\n:\n \n0\n,\n\n  \nn_completed_tasks\n:\n \n2\n,\n\n  \nn_tasks\n:\n \n2\n,\n\n  \nn_volunteers\n:\n \n59\n,\n\n  \noverall_progress\n:\n \n100\n,\n\n  \nowner\n:\n \n{\n\n    \ncreated\n:\n \n2012-06-06T06:27:18.760254\n,\n\n    \nfullname\n:\n \nDaniel Lombra\u00f1a Gonz\u00e1lez\n,\n\n    \ninfo\n:\n \n{\n\n      \navatar\n:\n \n1422360933.8_avatar.png\n,\n\n      \ncontainer\n:\n \nuser_3\n\n    \n},\n\n    \nn_answers\n:\n \n2998\n,\n\n    \nname\n:\n \nteleyinex\n,\n\n    \nrank\n:\n \n66\n,\n\n    \nregistered_ago\n:\n \n4 years ago\n,\n\n    \nscore\n:\n \n2998\n\n  \n},\n\n  \npro_features\n:\n \n{\n\n    \nauditlog_enabled\n:\n \nfalse\n,\n\n    \nautoimporter_enabled\n:\n \nfalse\n,\n\n    \nbetter_stats_enabled\n:\n \ntrue\n,\n\n    \nwebhooks_enabled\n:\n \nfalse\n\n  \n},\n\n  \nproject\n:\n \n{\n\n    \ncreated\n:\n \n2013-01-10T19:58:55.454015\n,\n\n    \ndescription\n:\n \nFacial expressions that convey feelings\n,\n\n    \nfeatured\n:\n \ntrue\n,\n\n    \nid\n:\n \n253\n,\n\n    \ninfo\n:\n \n{\n\n      \ncontainer\n:\n \nuser_3\n,\n\n      \nthumbnail\n:\n \nproject_253_thumbnail_1460620575.png\n\n    \n},\n\n    \nlast_activity\n:\n \nnull\n,\n\n    \nlast_activity_raw\n:\n \nnull\n,\n\n    \nn_tasks\n:\n \nnull\n,\n\n    \nn_volunteers\n:\n \nnull\n,\n\n    \nname\n:\n \nThe Face We Make\n,\n\n    \noverall_progress\n:\n \nnull\n,\n\n    \nowner\n:\n \nnull\n,\n\n    \nshort_name\n:\n \nthefacewemake\n,\n\n    \nupdated\n:\n \n2016-04-14T07:56:16.114006\n\n  \n},\n\n  \nprojectStats\n:\n \n{\\\nuserAuthStats\\\n: {\\\ntop5\\\n: [], \\\nvalues\\\n: [], \\\nlabel\\\n: \\\nAuthenticated Users\\\n} ...\n,\n\n  \ntemplate\n:\n \n/projects/stats.html\n,\n\n  \ntitle\n:\n \nProject: The Face We Make \nmiddot; Statistics\n,\n\n  \nuserStats\n:\n \n{\n\n    \nanonymous\n:\n \n{\n\n      \npct_taskruns\n:\n \n0\n,\n\n      \ntaskruns\n:\n \n0\n,\n\n      \ntop5\n:\n \n[],\n\n      \nusers\n:\n \n0\n\n    \n},\n\n    \nauthenticated\n:\n \n{\n\n      \npct_taskruns\n:\n \n0\n,\n\n      \ntaskruns\n:\n \n0\n,\n\n      \ntop5\n:\n \n[],\n\n      \nusers\n:\n \n0\n\n    \n},\n\n    \ngeo\n:\n \nfalse\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nProject tasks\n\n\nEndpoint: /project/\nshort_name\n/tasks\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nShows project tasks.\n\n\nIf you are not the owner of the project or anonymous, then you will get\nonly available public information for the owner and the project itself.\n\n\n\n\nautoimporter_enabled\n: If autoimporter is enabled.\n\n\nlast_activity\n: Last activity.\n\n\nn_completed_tasks\n: Number of completed tasks.\n\n\nn_task_runs\n: Number of task runs.\n\n\nn_tasks\n: Number of tasks.\n\n\nn_volunteers\n: Number of volunteers.\n\n\noverall_progress\n: Progress (0..100).\n\n\nowner\n: Owner user information\n\n\npro_features\n: Enabled pro features for the project.\n\n\nproject\n: Project information.\n\n\ntemplate\n: Jinja2 template.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\nfor another project where you are not the owner:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n{\n\n  \nautoimporter_enabled\n:\n \ntrue\n,\n\n  \nlast_activity\n:\n \n2017-03-02T21:00:33.627277\n,\n\n  \nn_completed_tasks\n:\n \n184839\n,\n\n  \nn_task_runs\n:\n \n1282945\n,\n\n  \nn_tasks\n:\n \n193090\n,\n\n  \nn_volunteers\n:\n \n20016\n,\n\n  \noverall_progress\n:\n \n95\n,\n\n  \nowner\n:\n \n{\n\n    \ncreated\n:\n \n2014-02-13T15:28:08.420187\n,\n\n    \nfullname\n:\n \nJohn Smith\n,\n\n    \ninfo\n:\n \n{\n\n      \navatar\n:\n \n1410769844.15_avatar.png\n,\n\n      \ncontainer\n:\n \nuser_3927\n,\n\n      \nextra\n:\n \nnull\n\n    \n},\n\n    \nlocale\n:\n \nnull\n,\n\n    \nn_answers\n:\n \n43565\n,\n\n    \nname\n:\n \npmisson\n,\n\n    \nrank\n:\n \n3\n,\n\n    \nregistered_ago\n:\n \n3 years ago\n,\n\n    \nscore\n:\n \n43565\n\n  \n},\n\n  \npro_features\n:\n \n{\n\n    \nauditlog_enabled\n:\n \ntrue\n,\n\n    \nautoimporter_enabled\n:\n \ntrue\n,\n\n    \nwebhooks_enabled\n:\n \ntrue\n\n  \n},\n\n  \nproject\n:\n \n{\n\n    \ncreated\n:\n \n2014-02-22T15:09:23.691811\n,\n\n    \ndescription\n:\n \nImage pattern recognition\n,\n\n    \nfeatured\n:\n \ntrue\n,\n\n    \nid\n:\n \n1377\n,\n\n    \ninfo\n:\n \n{\n\n      \ncontainer\n:\n \nuser_3927\n,\n\n      \nthumbnail\n:\n \napp_1377_thumbnail_1410772569.58.png\n\n    \n},\n\n    \nlast_activity\n:\n \nnull\n,\n\n    \nlast_activity_raw\n:\n \nnull\n,\n\n    \nn_tasks\n:\n \nnull\n,\n\n    \nn_volunteers\n:\n \nnull\n,\n\n    \nname\n:\n \nCool Project\n,\n\n    \noverall_progress\n:\n \nnull\n,\n\n    \nowner\n:\n \nnull\n,\n\n    \nshort_name\n:\n \ncoolproject\n,\n\n    \nupdated\n:\n \n2017-03-02T21:00:33.965587\n\n  \n},\n\n  \ntemplate\n:\n \n/projects/tasks.html\n,\n\n  \ntitle\n:\n \nProject: Cool project\n\n\n}\n\n\n\n\n\n\n\nProject task id\n\n\nEndpoint: /project/\nshort_name\n/task/\nint:task_id\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nShows a project task based on id.\n\n\nIf you are not the owner of the project or anonymous, then you will get\nonly available public information for the owner and the project itself.\n\n\n\n\nowner\n: Owner user information\n\n\nproject\n: Project information.\n\n\ntemplate\n: Jinja2 template of the task HTML template.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\nfor another project where you are not the owner:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n{\n\n  \nowner\n:\n \n{\n\n    \ncreated\n:\n \n2014-08-11T08:59:32.079599\n,\n\n    \nfullname\n:\n \nJohn Doe\n,\n\n    \ninfo\n:\n \n{\n\n      \navatar\n:\n \n1458638093.9_avatar.png\n,\n\n      \ncontainer\n:\n \nuser_4953\n,\n\n      \nextra\n:\n \nnull\n\n    \n},\n\n    \nlocale\n:\n \nnull\n,\n\n    \nn_answers\n:\n \n257\n,\n\n    \nname\n:\n \nJohnD\n,\n\n    \nrank\n:\n \n840\n,\n\n    \nregistered_ago\n:\n \n2 years ago\n,\n\n    \nscore\n:\n \n257\n\n  \n},\n\n  \nproject\n:\n \n{\n\n    \ncreated\n:\n \n2015-01-21T11:59:36.519541\n,\n\n    \ndescription\n:\n \nflickr678\n,\n\n    \nfeatured\n:\n \nfalse\n,\n\n    \nid\n:\n \n2417\n,\n\n    \ninfo\n:\n \n{\n\n      \ncontainer\n:\n \nnull\n,\n\n      \nthumbnail\n:\n \nnull\n\n    \n},\n\n    \nlast_activity\n:\n \nnull\n,\n\n    \nlast_activity_raw\n:\n \nnull\n,\n\n    \nn_tasks\n:\n \nnull\n,\n\n    \nn_volunteers\n:\n \nnull\n,\n\n    \nname\n:\n \nflickr678\n,\n\n    \noverall_progress\n:\n \nnull\n,\n\n    \nowner\n:\n \nnull\n,\n\n    \nshort_name\n:\n \nflickr678\n,\n\n    \nupdated\n:\n \n2017-03-22T13:03:55.496660\n\n  \n},\n\n  \ntemplate\n:\n \n/projects/presenter.html\n,\n\n  \ntitle\n:\n \nProject: flickr678 \nmiddot; Contribute\n\n\n}\n\n\n\n\n\n\n\nProject Category\n\n\nEndpoint: /project/category/\nshort_name\n/\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the list of projects in a category.\n\n\n\n\npagination\n: A pagination object for getting projects from this\n    category.\n\n\nactive_cat\n: Active category.\n\n\nprojects\n: List of projects belonging to this category.\n\n\ncategories\n: List of available categories in this server.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n{\n\n  \nactive_cat\n:\n \n{\n\n    \ncreated\n:\n \nnull\n,\n\n    \ndescription\n:\n \nSocial projects\n,\n\n    \nid\n:\n \n2\n,\n\n    \nname\n:\n \nSocial\n,\n\n    \nshort_name\n:\n \nsocial\n\n  \n},\n\n  \ncategories\n:\n \n[\n\n    \n{\n\n      \ncreated\n:\n \nnull\n,\n\n      \ndescription\n:\n \nFeatured projects\n,\n\n      \nid\n:\n \nnull\n,\n\n      \nname\n:\n \nFeatured\n,\n\n      \nshort_name\n:\n \nfeatured\n\n    \n},\n\n    \n{\n\n      \ncreated\n:\n \nnull\n,\n\n      \ndescription\n:\n \nSocial projects\n,\n\n      \nid\n:\n \n2\n,\n\n      \nname\n:\n \nSocial\n,\n\n      \nshort_name\n:\n \nsocial\n\n    \n},\n\n    \n{\n\n      \ncreated\n:\n \n2013-06-18T11:13:44.789149\n,\n\n      \ndescription\n:\n \nArt projects\n,\n\n      \nid\n:\n \n3\n,\n\n      \nname\n:\n \nArt\n,\n\n      \nshort_name\n:\n \nart\n\n    \n},\n\n  \n],\n\n  \npagination\n:\n \n{\n\n    \nnext\n:\n \nfalse\n,\n\n    \npage\n:\n \n1\n,\n\n    \nper_page\n:\n \n20\n,\n\n    \nprev\n:\n \nfalse\n,\n\n    \ntotal\n:\n \n1\n\n  \n},\n\n  \nprojects\n:\n \n[\n\n    \n{\n\n      \ncreated\n:\n \n2014-02-22T15:09:23.691811\n,\n\n      \ndescription\n:\n \nImage pattern recognition\n,\n\n      \nid\n:\n \n1377\n,\n\n      \ninfo\n:\n \n{\n\n        \ncontainer\n:\n \n7\n,\n\n        \nthumbnail\n:\n \n58.png\n\n      \n},\n\n      \nlast_activity\n:\n \n2 weeks ago\n,\n\n      \nlast_activity_raw\n:\n \n2017-01-31T09:18:28.450391\n,\n\n      \nn_tasks\n:\n \n169671\n,\n\n      \nn_volunteers\n:\n \n17499\n,\n\n      \nname\n:\n \nName\n,\n\n      \noverall_progress\n:\n \n80\n,\n\n      \nowner\n:\n \nJohn Doe\n,\n\n      \nshort_name\n:\n \nname\n,\n\n      \nupdated\n:\n \n2017-01-31T09:18:28.491496\n\n    \n},\n\n  \n],\n\n  \ntemplate\n:\n \n/projects/index.html\n,\n\n  \ntitle\n:\n \nProjects\n\n\n}\n\n\n\n\n\n\n\n\n\nNote\n\n\nTo override the default ranking you pass the \norderby\n query parameter to sort projects by any of the attributes listed above, such as  \nn_volunteers\n or \nn_tasks\n. The \ndesc\n query parameter can also be added to sort in descending order. For example: GET\n/project/category/\nshort_name\n/?orderby=n_tasks\ndesc=True\n\n\n\n\nProject Category Featured\n\n\nEndpoint: /project/category/featured/\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the list of featured projects.\n\n\n\n\npagination\n: A pagination object for getting new featured\n    projects from this category.\n\n\nactive_cat\n: Active category.\n\n\nprojects\n: List of projects belonging to this category.\n\n\ncategories\n: List of available categories in this server.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n{\n\n  \nactive_cat\n:\n \n{\n\n    \ncreated\n:\n \nnull\n,\n\n    \ndescription\n:\n \nFeatured projects\n,\n\n    \nid\n:\n \nnull\n,\n\n    \nname\n:\n \nFeatured\n,\n\n    \nshort_name\n:\n \nfeatured\n\n  \n},\n\n  \ncategories\n:\n \n[\n\n    \n{\n\n      \ncreated\n:\n \nnull\n,\n\n      \ndescription\n:\n \nFeatured projects\n,\n\n      \nid\n:\n \nnull\n,\n\n      \nname\n:\n \nFeatured\n,\n\n      \nshort_name\n:\n \nfeatured\n\n    \n},\n\n    \n{\n\n      \ncreated\n:\n \nnull\n,\n\n      \ndescription\n:\n \nSocial projects\n,\n\n      \nid\n:\n \n2\n,\n\n      \nname\n:\n \nSocial\n,\n\n      \nshort_name\n:\n \nsocial\n\n    \n},\n\n    \n{\n\n      \ncreated\n:\n \n2013-06-18T11:13:44.789149\n,\n\n      \ndescription\n:\n \nArt projects\n,\n\n      \nid\n:\n \n3\n,\n\n      \nname\n:\n \nArt\n,\n\n      \nshort_name\n:\n \nart\n\n    \n},\n\n  \n],\n\n  \npagination\n:\n \n{\n\n    \nnext\n:\n \nfalse\n,\n\n    \npage\n:\n \n1\n,\n\n    \nper_page\n:\n \n20\n,\n\n    \nprev\n:\n \nfalse\n,\n\n    \ntotal\n:\n \n1\n\n  \n},\n\n  \nprojects\n:\n \n[\n\n    \n{\n\n      \ncreated\n:\n \n2014-02-22T15:09:23.691811\n,\n\n      \ndescription\n:\n \nImage pattern recognition\n,\n\n      \nid\n:\n \n1377\n,\n\n      \ninfo\n:\n \n{\n\n        \ncontainer\n:\n \n7\n,\n\n        \nthumbnail\n:\n \n58.png\n\n      \n},\n\n      \nlast_activity\n:\n \n2 weeks ago\n,\n\n      \nlast_activity_raw\n:\n \n2017-01-31T09:18:28.450391\n,\n\n      \nn_tasks\n:\n \n169671\n,\n\n      \nn_volunteers\n:\n \n17499\n,\n\n      \nname\n:\n \nName\n,\n\n      \noverall_progress\n:\n \n80\n,\n\n      \nowner\n:\n \nJohn Doe\n,\n\n      \nshort_name\n:\n \nname\n,\n\n      \nupdated\n:\n \n2017-01-31T09:18:28.491496\n\n    \n},\n\n  \n],\n\n  \ntemplate\n:\n \n/projects/index.html\n,\n\n  \ntitle\n:\n \nProjects\n\n\n}\n\n\n\n\n\n\n\n\n\nNote\n\n\nTo override the default ranking, you pass the \norderby\n query parameter to sort projects by any of the attributes listed above, such as \nn_volunteers\n or \nn_tasks\n. The \ndesc\n query parameter can also be added to sort in descending order. For example: GET\n/project/category/featured/?orderby=n_tasks\ndesc=True\n\n\n\n\nProject Category Draft\n\n\nEndpoint: /project/category/draft/\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the list of featured projects.\n\n\n\n\npagination\n: A pagination object for getting new draft projets\n    from this category.\n\n\nactive_cat\n: Active category.\n\n\nprojects\n: List of projects belonging to this category.\n\n\ncategories\n: List of available categories in this server.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n{\n\n  \nactive_cat\n:\n \n{\n\n    \ncreated\n:\n \nnull\n,\n\n    \ndescription\n:\n \nDraft projects\n,\n\n    \nid\n:\n \nnull\n,\n\n    \nname\n:\n \nDraft\n,\n\n    \nshort_name\n:\n \ndraft\n\n  \n},\n\n  \ncategories\n:\n \n[\n\n    \n{\n\n      \ncreated\n:\n \nnull\n,\n\n      \ndescription\n:\n \nDraft projects\n,\n\n      \nid\n:\n \nnull\n,\n\n      \nname\n:\n \nDraft\n,\n\n      \nshort_name\n:\n \ndraft\n\n    \n},\n\n    \n{\n\n      \ncreated\n:\n \nnull\n,\n\n      \ndescription\n:\n \nSocial projects\n,\n\n      \nid\n:\n \n2\n,\n\n      \nname\n:\n \nSocial\n,\n\n      \nshort_name\n:\n \nsocial\n\n    \n},\n\n    \n{\n\n      \ncreated\n:\n \n2013-06-18T11:13:44.789149\n,\n\n      \ndescription\n:\n \nArt projects\n,\n\n      \nid\n:\n \n3\n,\n\n      \nname\n:\n \nArt\n,\n\n      \nshort_name\n:\n \nart\n\n    \n},\n\n  \n],\n\n  \npagination\n:\n \n{\n\n    \nnext\n:\n \nfalse\n,\n\n    \npage\n:\n \n1\n,\n\n    \nper_page\n:\n \n20\n,\n\n    \nprev\n:\n \nfalse\n,\n\n    \ntotal\n:\n \n1\n\n  \n},\n\n  \nprojects\n:\n \n[\n\n    \n{\n\n      \ncreated\n:\n \n2014-02-22T15:09:23.691811\n,\n\n      \ndescription\n:\n \nDraft 1\n,\n\n      \nid\n:\n \n17\n,\n\n      \ninfo\n:\n \n{\n\n        \ncontainer\n:\n \n7\n,\n\n        \nthumbnail\n:\n \n58.png\n\n      \n},\n\n      \nlast_activity\n:\n \n2 weeks ago\n,\n\n      \nlast_activity_raw\n:\n \n2017-01-31T09:18:28.450391\n,\n\n      \nn_tasks\n:\n \n0\n,\n\n      \nn_volunteers\n:\n \n0\n,\n\n      \nname\n:\n \nName\n,\n\n      \noverall_progress\n:\n \n0\n,\n\n      \nowner\n:\n \nJohn Doe\n,\n\n      \nshort_name\n:\n \nname\n,\n\n      \nupdated\n:\n \n2017-01-31T09:18:28.491496\n\n    \n},\n\n  \n],\n\n  \ntemplate\n:\n \n/projects/index.html\n,\n\n  \ntitle\n:\n \nProjects\n\n\n}\n\n\n\n\n\n\n\n\n\nNote\n\n\nTo override the default ranking, you pass the \norderby\n query parameter to\nsort projects by any of the attributes listed above, such as\n\nn_volunteers\n or \nn_tasks\n. The \ndesc\n query parameter can also be added to sort in descending order. For example: GET\n/project/category/draft/?orderby=n_tasks\ndesc=True", 
            "title": "Options"
        }, 
        {
            "location": "/api/project/project/#project-creation", 
            "text": "Endpoint: /project/new  Allowed methods :  GET/POST  GET  Gives you the list of required fields in the form to create a project.   template : The Jinja2 template that could be rendered.  title : the title for the endpoint.  form : The form fields that need to be sent for creating the\n    project. It contains the CSRF token for validating the POST, as well\n    as an errors field in case that something is wrong.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 { \n   errors :   false , \n   form :   { \n     csrf :   token , \n     description :   null , \n     errors :   {}, \n     long_description :   null , \n     name :   null , \n     short_name :   null \n   }, \n   template :   projects/new.html , \n   title :   Create a Project  }", 
            "title": "Project creation"
        }, 
        {
            "location": "/api/project/project/#project-blog-list", 
            "text": "Endpoint: /project/ short_name /blog  Allowed methods :  GET  GET  Gives you the list of posted blogs by the given project short name.   blogposts : All the blog posts for the given project.  project : Info about the project.   The project and owner fields will have more information if the owner of\nthe project does the request, providing its private information like\napi_key, password keys, etc. Otherwise, it will be removed and only show\npublic info.  Example public output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55 { \n   blogposts :   [ \n     { \n       body :   Please, e-mail us to alejasan 4t ucm dot es if you find any bug. Thanks. , \n       created :   2014-05-14T14:25:04.899079 , \n       id :   1 , \n       project_id :   1377 , \n       title :   We are working on the Alpha version. , \n       user_id :   3927 \n     }, \n   ], \n   n_completed_tasks :   137051 , \n   n_task_runs :   1070561 , \n   n_tasks :   169671 , \n   n_volunteers :   17499 , \n   overall_progress :   80 , \n   owner :   { \n     created :   2014-02-13T15:28:08.420187 , \n     fullname :   John Doe , \n     info :   { \n       avatar :   avatar.png , \n       container :   container \n     }, \n     n_answers :   32814 , \n     name :   johndoe , \n     rank :   4 , \n     registered_ago :   3 years ago , \n     score :   32814 \n   }, \n   pro_features :   { \n     auditlog_enabled :   false , \n     autoimporter_enabled :   false , \n     webhooks_enabled :   false \n   }, \n   project :   { \n     created :   2014-02-22T15:09:23.691811 , \n     description :   Image pattern recognition , \n     featured :   true , \n     id :   1 , \n     info :   { \n       container :   container , \n       thumbnail :   58.png \n     }, \n     last_activity :   null , \n     last_activity_raw :   null , \n     n_tasks :   null , \n     n_volunteers :   null , \n     name :   Dark Skies ISS , \n     overall_progress :   null , \n     owner :   null , \n     short_name :   darkskies , \n     updated :   2017-01-31T09:18:28.491496 \n   }, \n   template :   projects/blog.html  }", 
            "title": "Project blog list"
        }, 
        {
            "location": "/api/project/project/#project-task-presenter-editor", 
            "text": "Endpoint: /project/ short_name /tasks/taskpresentereditor  Allowed methods :  GET/POST  GET  This endpoint allows you to get the list of available templates for the\ncurrent project. This will only happen when the project has an empty template, otherwise, it will load the template for you.   template : The Jinja2 template that could be rendered.  title : the title for the endpoint.  presenters : List of available templates (in HTML format). The\n    name of them without the  .html  will be the argument for the endpoint.  last_activit : last activity of the project.  n_task_runs : number of task runs.  n_tasks : number of tasks.  n_volunteers : number of volunteers.  owner : information about the owner.  pro_features : which pro features are enabled.  pro_features : which pro features are enabled.  project : info about the project.  status : status of the flash message.  flash : flash message.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68 { \n  flash :   strong Note /strong  You will need to upload the tasks using the a href=\\ /project/asdf123/tasks/import\\  CSV importer /a  or download the project bundle and run the  strong createTasks.py /strong  script in your computer , \n  last_activity :   null , \n  n_completed_tasks :   0 , \n  n_task_runs :   0 , \n  n_tasks :   0 , \n  n_volunteers :   0 , \n  overall_progress :   0 , \n  owner :   { \n    admin :   false , \n    api_key :   key , \n    confirmation_email_sent :   false , \n    created :   2016-09-15T11:30:42.660450 , \n    email_addr :   prueba@prueba.com , \n    fullname :   prueba de json , \n    id :   12030 , \n    info :   { \n      avatar :   avatar.png , \n      container :   user \n    }, \n    n_answers :   5 , \n    name :   pruebaadfadfa , \n    rank :   4411 , \n    registered_ago :   6 months ago , \n    score :   5 , \n    total :   11134 , \n    valid_email :   true \n  }, \n  presenters :   [ \n    projects/presenters/basic.html , \n    projects/presenters/image.html , \n    projects/presenters/sound.html , \n    projects/presenters/video.html , \n    projects/presenters/map.html , \n    projects/presenters/pdf.html \n  ], \n  pro_features :   { \n    auditlog_enabled :   false , \n    autoimporter_enabled :   false , \n    webhooks_enabled :   false \n  }, \n  project :   { \n    allow_anonymous_contributors :   true , \n    category_id :   4 , \n    contacted :   false , \n    contrib_button :   draft , \n    created :   2017-01-11T09:37:43.613007 , \n    description :   adsf , \n    featured :   false , \n    id :   3 , \n    info :   { \n      passwd_hash :   null , \n      task_presenter :   \n    }, \n    long_description :   adsf , \n    n_blogposts :   0 , \n    n_results :   0 , \n    name :   asdf1324 , \n    owner_id :   12030 , \n    published :   false , \n    secret_key :   73aee9df-be47-4e4c-8192-3a8bf0ab5161 , \n    short_name :   asdf123 , \n    updated :   2017-03-15T13:20:48.022328 , \n    webhook :   \n  }, \n  status :   info , \n  template :   projects/task_presenter_options.html , \n  title :   Project: asdf1324  middot; Task Presenter Editor     }   If you want to preload the template from one of the available prenters, you have to pass the following argument:  ?template=basic  for the basic or  ?template=iamge  for the image template.  Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67 { \n  errors :   false , \n  flash :   Your code will be  em automagically /em  rendered in                       the  strong preview section /strong . Click in the                       preview button! , \n  form :   { \n    csrf :   token , \n    editor :   div class=\\ row\\ \\n     div class=\\ col-md-12\\ \\n         h1 Write here your HTML Task Presenter /h1 \\n     /div \\n /div \\n script type=\\ text/javascript\\ \\n(function() {\\n    // Your JavaScript code\\n    pybossa.taskLoaded(function(task, deferred){\\n        // When the task is loaded, do....\\n    });\\n\\n    pybossa.presentTask(function(task, deferred){\\n        // Present the current task to the user\\n        // Load the task data into the HTML DOM\\n    });\\n\\n    pybossa.run( asdf123 );\\n})();\\n /script , \n    errors :   {}, \n    id :   3 \n  }, \n  last_activity :   null , \n  n_completed_tasks :   0 , \n  n_task_runs :   0 , \n  n_tasks :   0 , \n  n_volunteers :   0 , \n  overall_progress :   0 , \n  owner :   { \n    admin :   false , \n    api_key :   key , \n    confirmation_email_sent :   false , \n    created :   2016-09-15T11:30:42.660450 , \n    email_addr :   prueba@prueba.com , \n    fullname :   prueba de json , \n    id :   0 , \n    info :   { \n      avatar :   avatar.png , \n      container :   user \n    }, \n    n_answers :   5 , \n    name :   pruebaadfadfa , \n    rank :   4411 , \n    registered_ago :   6 months ago , \n    score :   5 , \n    total :   11134 , \n    valid_email :   true \n  }, \n  pro_features :   { \n    auditlog_enabled :   false , \n    autoimporter_enabled :   false , \n    webhooks_enabled :   false \n  }, \n  project :   { \n    allow_anonymous_contributors :   true , \n    category_id :   4 , \n    contacted :   false , \n    contrib_button :   draft , \n    created :   2017-01-11T09:37:43.613007 , \n    description :   adsf , \n    featured :   false , \n    id :   3 , \n    info :   { \n      passwd_hash :   null , \n      task_presenter :   \n    }, \n    long_description :   adsf , \n    n_blogposts :   0 , \n    n_results :   0 , \n    name :   asdf1324 , \n    owner_id :   0 , \n    published :   false , \n    secret_key :   73aee9df-be47-4e4c-8192-3a8bf0ab5161 , \n    short_name :   asdf123 , \n    updated :   2017-03-15T13:20:48.022328 , \n    webhook :   \n  }, \n  status :   info , \n  template :   projects/task_presenter_editor.html , \n  title :   Project: asdf1324  middot; Task Presenter Editor     }   Then, you can use that template, or if you prefer you can do a POST\ndirectly without that information. As in any other request involving a POST you will need the CSRFToken to validate it.  POST  To send a valid POST request, you need to pass the  csrf token  in the headers. Use the following header:  X-CSRFToken . You will have to POST the data fields found in the previous example, as it contains the information about the fields: specifically  editor  with the\nHTML/CSS/JS that you want to provide.  If the post is successful, you will get the following output:  Example output  1\n2\n3\n4\n5 { \n   flash :   i class=\\ icon-ok\\ /i  Task presenter added! , \n   next :   /project/asdf123/tasks/ , \n   status :   success  }", 
            "title": "Project task presenter editor"
        }, 
        {
            "location": "/api/project/project/#project-delete", 
            "text": "Endpoint: /project/ short_name /delete  Allowed methods :  GET/POST  GET  The GET endpoint allows you to get all the info about the project (see\nthe Project endpoint as well) as well as the csrf token. As this\nendpoint does not have any form, the csrf token is not inside the form\nfield.  Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51 { \n   csrf :   token , \n   last_activity :   null , \n   n_tasks :   0 , \n   overall_progress :   0 , \n   owner :   { \n     admin :   false , \n     api_key :   key , \n     confirmation_email_sent :   false , \n     created :   2016-09-15T11:30:42.660450 , \n     email_addr :   prueba@prueba.com , \n     fullname :   prueba de json , \n     id :   0 , \n     info :   { \n       avatar :   avatar.png , \n       container :   0 \n     }, \n     n_answers :   5 , \n     name :   pruebaadfadfa , \n     rank :   4411 , \n     registered_ago :   6 months ago , \n     score :   5 , \n     total :   11134 , \n     valid_email :   true \n   }, \n   pro_features :   { \n     auditlog_enabled :   false , \n     autoimporter_enabled :   false , \n     webhooks_enabled :   false \n   }, \n   project :   { \n     allow_anonymous_contributors :   true , \n     category_id :   2 , \n     contacted :   false , \n     created :   2017-03-15T15:02:12.160810 , \n     description :   asdf , \n     featured :   false , \n     id :   3 , \n     info :   {}, \n     long_description :   asdf , \n     name :   algo , \n     owner_id :   12030 , \n     published :   false , \n     secret_key :   c5a77943-f5a4-484a-86bb-d69559e80357 , \n     short_name :   algo , \n     updated :   2017-03-15T15:02:12.160823 , \n     webhook :   null \n   }, \n   template :   /projects/delete.html , \n   title :   Project: algo  middot; Delete  }    POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  Example output  1\n2\n3\n4\n5 { \n   flash :   Project deleted! , \n   next :   /account/pruebaadfadfa/ , \n   status :   success  }", 
            "title": "Project delete"
        }, 
        {
            "location": "/api/project/project/#project-update", 
            "text": "Endpoint: /project/ short_name /update  Allowed methods :  GET/POST  GET  It returns a JSON object with the following information:   form : the form fields that need to be sent for updating the\n    project. It contains the csrf token for validating the post, as well as an errors field in case that something is wrong.  upload_form : the form fields that need to be sent for updating\n    the project s avatar. It contains the csrf token for validating the\n    post, as well as an errors field in case that something is wrong.  template : The Jinja2 template that could be rendered.  title : The title for the view.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85 { \n   form :   { \n     allow_anonymous_contributors :   false , \n     category_id :   2 , \n     csrf :   token , \n     description :   description , \n     errors :   {}, \n     id :   3117 , \n     long_description :   long description , \n     name :   name , \n     password :   null , \n     protect :   false , \n     short_name :   slug , \n     webhook :   null \n   }, \n   last_activity :   null , \n   n_completed_tasks :   0 , \n   n_task_runs :   0 , \n   n_tasks :   2 , \n   n_volunteers :   0 , \n   overall_progress :   0 , \n   owner :   { \n     admin :   false , \n     api_key :   key , \n     confirmation_email_sent :   false , \n     created :   2012-06-06T06:27:18.760254 , \n     email_addr :   email.com , \n     fullname :   John Doe , \n     id :   0 , \n     info :   { \n       avatar :   avatar.png , \n       container :   user , \n     }, \n     n_answers :   2414 , \n     name :   johndoe , \n     rank :   69 , \n     registered_ago :   4 years ago , \n     score :   2414 , \n     total :   11134 , \n     valid_email :   false \n   }, \n   pro_features :   { \n     auditlog_enabled :   true , \n     autoimporter_enabled :   true , \n     webhooks_enabled :   true \n   }, \n   project :   { \n     allow_anonymous_contributors :   false , \n     category_id :   2 , \n     contacted :   false , \n     contrib_button :   can_contribute , \n     created :   2015-06-29T08:23:14.201331 , \n     description :   description , \n     featured :   false , \n     id :   0 , \n     info :   { \n       container :   user , \n       passwd_hash :   null , \n       task_presenter :   HTML+CSS+JS,         thumbnail :  thumbnail.png      },       long_description :  long   description ,       n_blogposts : 0,       n_results : 0,       name :  name ,       owner_id : 0,       published : true,       secret_key :  key ,       short_name :  slug ,       updated :  2017-03-16 T 14 : 50 : 45.055331 ,       webhook : null    },     template :  /projects/update.html ,     title :  Project :   name   middot;   Update ,     upload_form : {       avatar : null,       csrf :  token ,       errors : {},       id : null,       x 1 : 0,       x 2 : 0,       y 1 : 0,       y 2 :   0 \n   }  }    POST  To send a valid POST request, you need to pass the  csrf token  in the headers. Use the following header:  X-CSRFToken.  As this endpoint supports  two  different forms, you must specify\nwhich form are you targeting adding an extra key:  btn . The options\nfor this key are:   Upload : to update the  upload_form .   The other one does not need this extra key.   Note  Be sure to respect the Uppercase in the first letter. Otherwise, it will fail.   It returns a JSON object with the following information:   flash : A success message, or error indicating if the request was\n    successful.  form : the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in    the case that something is wrong.   Example output  1\n2\n3\n4\n5 { \n   flash :   Your profile has been updated! , \n   next :   /account/pruebaadfadfa/update , \n   status :   success  }    If there s an error in the form fields, you will get them in the form.errors  key:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 { \n   flash :   Please correct the errors , \n   form :   { \n     allow_anonymous_contributors :   false , \n     category_id :   2 , \n     csrf :   token , \n     description :   description , \n     errors :   { \n       short_name :   [ \n         This field is required. \n       ] \n     }, \n     id :   3117 , \n     long_description :   new description , \n     name :   new name , \n     password :   null , \n     protect :   true , \n     short_name :   , \n     webhook :   null \n   }, \n   ...  }     Note  For updating the avatar is very important to not set the  Content-Type . If\nyou  are using jQuery, set it to False, so the file is handled properly.\nTo still recieve a JSON response you can add the response_format=json query\nparamater to your request.  The (x1,x2,y1,y2) are the coordinates for cutting the image and create\nthe avatar.  (x1,y1) are the offset left of the cropped area and the offset top of the cropped area respectively; and (x2,y2) are the width and height of the crop. And don t forget to add an extra key to the form-data:  btn  with a value Upload to select this form.", 
            "title": "Project update"
        }, 
        {
            "location": "/api/project/project/#project-reset-secret-key", 
            "text": "Endpoint: /project/ short_name /resetsecretkey  Allowed methods :  POST  Resets the secret key of a project.  To send a valid POST request, you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken  retrieved from the GET\nendpoint  /project/ short_name /update .  Example output  1\n2\n3\n4\n5 { \n   flash :   New secret key generated , \n   next :   /project/flickrproject2/update , \n   status :   success  }", 
            "title": "Project reset secret key"
        }, 
        {
            "location": "/api/project/project/#project-tasks-browse", 
            "text": "Endpoint: /project/ short_name /tasks/browse/   Endpoint:\n/project/ short_name /tasks/browse/ int:page  Allowed methods :  GET   n_completed_tasks : number of completed tasks  n_tasks : number of tasks  n_volunteers : number of volunteers  overall_progress : overall progress  owner : project owner  pagination : pagination information  pro_features : pro features enabled or not  project : project information  tasks : tasks, paginated  template : the Jinja2 template that should be rendered in case of\n    text/html.  title : the title for the endpoint.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55 { \n   n_completed_tasks :   0 , \n   n_tasks :   1 , \n   n_volunteers :   0 , \n   overall_progress :   0 , \n   owner :   { \n     created :   2017-04-17T23:56:22.892222 , \n     fullname :   John Doe , \n     info :   {}, \n     locale :   null , \n     n_answers :   0 , \n     name :   johndoe , \n     rank :   null , \n     registered_ago :   3 hours ago , \n     score :   null \n   }, \n   pagination :   { \n     next :   false , \n     page :   1 , \n     per_page :   10 , \n     prev :   false , \n     total :   1 \n   }, \n   pro_features :   { \n     auditlog_enabled :   false , \n     autoimporter_enabled :   false , \n     webhooks_enabled :   false \n   }, \n   project :   { \n     created :   2017-04-17T23:56:23.416754 , \n     description :   Description , \n     featured :   false , \n     id :   1 , \n     info :   {}, \n     last_activity :   null , \n     last_activity_raw :   null , \n     n_tasks :   null , \n     n_volunteers :   null , \n     name :   Sample Project , \n     overall_progress :   null , \n     owner :   null , \n     short_name :   sampleapp , \n     updated :   2017-04-17T23:56:23.589652 \n   }, \n   tasks :   [ \n     { \n       id :   1 , \n       n_answers :   10 , \n       n_task_runs :   0 , \n       pct_status :   0.0 \n     } \n   ], \n   template :   /projects/tasks_browse.html , \n   title :   Project: Sample Project  middot; Tasks  }", 
            "title": "Project tasks browse"
        }, 
        {
            "location": "/api/project/project/#project-tasks-import", 
            "text": "Endpoint: /project/ short_name /tasks/import  Allowed methods :  GET/POST  GET  It returns a JSON object with the following information:   available_importers : A list of available importers for the\n    server. To use one of the items, you have to add to the endpoint the\n    following argument:  ?type=name  where the name is the string that you will find in the list of importers in the format:\n     projects/tasks/name.html .  template : The Jinja2 template that could be rendered.  title : The title for the view.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78 { \n   available_importers :   [ \n     projects/tasks/epicollect.html , \n     projects/tasks/csv.html , \n     projects/tasks/s3.html , \n     projects/tasks/youtube.html , \n     projects/tasks/gdocs.html , \n     projects/tasks/dropbox.html , \n     projects/tasks/iiif.html \n   ], \n   form :   null , \n   loading_text :   Importing tasks, this may take a while, wait... , \n   n_completed_tasks :   0 , \n   n_tasks :   5 , \n   n_volunteers :   0 , \n   overall_progress :   0 , \n   owner :   { \n     admin :   false , \n     api_key :   key , \n     confirmation_email_sent :   false , \n     created :   2012-06-06T06:27:18.760254 , \n     email_addr :   johndoe@gmail.com , \n     fullname :   John Doe , \n     id :   0 , \n     info :   { \n       avatar :   avatar.png , \n       container :   user , \n     }, \n     n_answers :   2414 , \n     name :   johndoe , \n     rank :   69 , \n     registered_ago :   4 years ago , \n     score :   2414 , \n     total :   11134 , \n     valid_email :   false \n   }, \n   pro_features :   { \n     auditlog_enabled :   true , \n     autoimporter_enabled :   true , \n     webhooks_enabled :   true \n   }, \n   project :   { \n     allow_anonymous_contributors :   false , \n     category_id :   2 , \n     contacted :   false , \n     contrib_button :   can_contribute , \n     created :   2015-06-29T08:23:14.201331 , \n     description :   old , \n     featured :   false , \n     id :   3117 , \n     info :   { \n       container :   user , \n       passwd_hash :   null , \n       task_presenter :   HTML+CSS+JS \n       thumbnail :   avatar.png \n     }, \n     long_description :   algo , \n     n_blogposts :   0 , \n     n_results :   0 , \n     name :   name , \n     owner_id :   3 , \n     published :   true , \n     secret_key :   f , \n     short_name :   name , \n     updated :   2017-03-17T09:15:46.867215 , \n     webhook :   null \n   }, \n   target :   project.import_task , \n   task_tmpls :   [ \n     projects/tasks/gdocs-sound.html , \n     projects/tasks/gdocs-map.html , \n     projects/tasks/gdocs-image.html , \n     projects/tasks/gdocs-video.html , \n     projects/tasks/gdocs-pdf.html \n   ], \n   template :   /projects/task_import_options.html , \n   title :   Project: bevan  middot; Import Tasks  }    Therefore, if you want to import tasks from a CSV link, you will have to\ndo the following GET:  1 GET server/project/ short_name /tasks/import?type=csv   That query will return the same output as before, but instead of the\navailable_importers, you will get the the form fields and CSRF token\nfor that importer.  POST  To send a valid POST request, you need to pass the  csrf token  in the headers. Use the following header:  X-CSRFToken.  It returns a JSON object with the following information:   flash : A success message, or error indicating if the request was\n    successful.   Example output  1\n2\n3\n4\n5 { \n   flash :   Tasks imported , \n   next :   /project/ short_name /tasks/ , \n   status :   success  }", 
            "title": "Project tasks import"
        }, 
        {
            "location": "/api/project/project/#project-tutorial", 
            "text": "Endpoint: /project/ short_name /tutorial  GET  It returns a JSON object with the following information:   owner : owner information  project : project information  template : The Jinja2 template that could be rendered.  title : The title for the view.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40 { \n   owner :   { \n     created :   2014-02-13T15:28:08.420187 , \n     fullname :   John Doe , \n     info :   { \n       avatar :   1410769844.15_avatar.png , \n       avatar_url :   null , \n       container :   user_3927 , \n       extra :   null \n     }, \n     locale :   null , \n     n_answers :   43565 , \n     name :   jdoe , \n     rank :   3 , \n     registered_ago :   3 years ago , \n     score :   43565 \n   }, \n   project :   { \n     created :   2014-02-22T15:09:23.691811 , \n     description :   Image pattern recognition , \n     featured :   true , \n     id :   1377 , \n     info :   { \n       container :   user_3927 , \n       thumbnail :   app_1377_thumbnail_1410772569.58.png , \n       thumbnail_url :   null \n     }, \n     last_activity :   null , \n     last_activity_raw :   null , \n     n_tasks :   null , \n     n_volunteers :   null , \n     name :   myproject , \n     overall_progress :   null , \n     owner :   null , \n     short_name :   johndoeproject , \n     updated :   2017-03-02T21:00:33.965587 \n   }, \n   template :   /projects/tutorial.html , \n   title :   Project: myproject  }", 
            "title": "Project tutorial"
        }, 
        {
            "location": "/api/project/project/#project-shortname", 
            "text": "Endpoint: /project/ short_name /  Allowed methods :  GET  GET  Shows project information and owner information.  If you are not the owner of the project or anonymous, then you will get only available public information for the owner and the project itself.   last_activity : Last activity on the project.  n_completed_tasks : Number of completed tasks.  n_task_runs : Number of task runs.  n_tasks : Number of tasks.  n_volunteers : Number of volunteers.  overall_progress : Overall progress.  owner : Owner user information.  pro_features : Enabled pro features for the project.  project : Project information  template : Jinja2 template.  title : the title for the endpoint.   Example output  for logged in user JohnDoe:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57 { \n   last_activity :   2015-01-21T12:01:41.209270 , \n   n_completed_tasks :   0 , \n   n_task_runs :   3 , \n   n_tasks :   8 , \n   n_volunteers :   1 , \n   overall_progress :   0 , \n   owner :   { \n     admin :   false , \n     api_key :   akjhfd85-8afd6-48af-f7afg-kjhsfdlkjhf1 , \n     confirmation_email_sent :   false , \n     created :   2014-08-11T08:59:32.079599 , \n     email_addr :   johndoe@johndoe.com , \n     fullname :   John Doe , \n     id :   1234 , \n     info :   { \n       container :   user_1234 \n     }, \n     n_answers :   56 , \n     name :   JohnDoe , \n     rank :   1813 , \n     registered_ago :   2 years ago , \n     score :   56 , \n     total :   11093 , \n     valid_email :   true \n   }, \n   pro_features :   { \n     auditlog_enabled :   true , \n     autoimporter_enabled :   true , \n     webhooks_enabled :   true \n   }, \n   project :   { \n     allow_anonymous_contributors :   true , \n     category_id :   2 , \n     contacted :   true , \n     contrib_button :   can_contribute , \n     created :   2015-01-21T11:59:36.519541 , \n     description :   flickr678 , \n     featured :   false , \n     id :   4567 , \n     info :   { \n       task_presenter :   div  ....  \n     }, \n     long_description :   flickr678\\r\\n , \n     n_blogposts :   0 , \n     n_results :   0 , \n     name :   flickr678 , \n     owner_id :   9876 , \n     published :   true , \n     secret_key :   veryverysecretkey , \n     short_name :   flickr678 , \n     updated :   2016-04-13T08:07:38.897626 , \n     webhook :   null \n   }, \n   template :   /projects/project.html , \n   title :   Project: flickr678  }    Anonymous and other user output:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46 { \n   last_activity :   2015-01-21T12:01:41.209270 , \n   n_completed_tasks :   0 , \n   n_task_runs :   3 , \n   n_tasks :   8 , \n   n_volunteers :   1 , \n   overall_progress :   0 , \n   owner :   { \n     created :   2014-08-11T08:59:32.079599 , \n     fullname :   John Doe , \n     info :   { \n       avatar :   null , \n       container :   user_4953 \n     }, \n     n_answers :   56 , \n     name :   JohnDoe , \n     rank :   1813 , \n     registered_ago :   2 years ago , \n     score :   56 \n   }, \n   pro_features :   { \n     auditlog_enabled :   false , \n     autoimporter_enabled :   false , \n     webhooks_enabled :   false \n   }, \n   project :   { \n     created :   2015-01-21T11:59:36.519541 , \n     description :   flickr678 , \n     id :   4567 , \n     info :   { \n       container :   null , \n       thumbnail :   null \n     }, \n     last_activity :   null , \n     last_activity_raw :   null , \n     n_tasks :   null , \n     n_volunteers :   null , \n     name :   flickr678 , \n     overall_progress :   null , \n     owner :   null , \n     short_name :   flickr678 , \n     updated :   2016-04-13T08:07:38.897626 \n   }, \n   template :   /projects/project.html , \n   title :   Project: flickr678  }", 
            "title": "Project shortname"
        }, 
        {
            "location": "/api/project/project/#project-settings", 
            "text": "Endpoint: /project/ short_name /settings  Allowed methods :  GET  GET  Shows project information and owner information. Only works for\nauthenticated users for their projects (or admins). Anonymous users\nwill get a 302 to the login page. Logged in users with access rights will get a 403 when it s not their project.   last_activity : Last activity on the project.  n_completed_tasks : Number of completed tasks.  n_task_runs : Number of task runs.  n_tasks : Number of tasks.  n_volunteers : Number of volunteers.  overall_progress : Overall progress.  owner : Owner user information.  pro_features : Enabled pro features for the project.  project : Project information  template : Jinja2 template.  title : the title for the endpoint.   The example output matches  /project/ short_name /", 
            "title": "Project settings"
        }, 
        {
            "location": "/api/project/project/#project-results", 
            "text": "Endpoint: /project/ short_name /results  Allowed methods :  GET  GET  Shows information about a project results template. If the logged in\nuser is the owner of the project you will get a more detailed owner\ninformation and project information.   last_activity : Last activity on the project.  n_completed_tasks : Number of completed tasks.  n_results : Number of results  n_task_runs : Number of task runs.  n_tasks : Number of tasks.  n_volunteers : Number of volunteers.  overall_progress : Overall progress.  owner : Owner user information.  pro_features : Enabled pro features for the project.  project : Project information  template : Jinja2 template for results  title : the title for the endpoint.   Example output  For an anonymous user or when you are not the project owner:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48 { \n   last_activity :   2015-01-21T12:01:41.209270 , \n   n_completed_tasks :   0 , \n   n_results :   0 , \n   n_task_runs :   3 , \n   n_tasks :   8 , \n   n_volunteers :   1 , \n   overall_progress :   0 , \n   owner :   { \n     created :   2014-08-11T08:59:32.079599 , \n     fullname :   John , \n     info :   { \n       avatar :   null , \n       container :   user_4953 \n     }, \n     n_answers :   56 , \n     name :   JohnDoe , \n     rank :   1813 , \n     registered_ago :   2 years ago , \n     score :   56 \n   }, \n   pro_features :   { \n     auditlog_enabled :   false , \n     autoimporter_enabled :   false , \n     webhooks_enabled :   false \n   }, \n   project :   { \n     created :   2015-01-21T11:59:36.519541 , \n     description :   flickr678 , \n     featured :   false , \n     id :   2417 , \n     info :   { \n       container :   null , \n       thumbnail :   null \n     }, \n     last_activity :   null , \n     last_activity_raw :   null , \n     n_tasks :   null , \n     n_volunteers :   null , \n     name :   flickr678 , \n     overall_progress :   null , \n     owner :   null , \n     short_name :   flickr678 , \n     updated :   2016-04-13T08:07:38.897626 \n   }, \n   template :   /projects/results.html , \n   title :   Project: flickr678  }", 
            "title": "Project results"
        }, 
        {
            "location": "/api/project/project/#project-stats", 
            "text": "Endpoint: /project/ short_name /stats  Allowed methods :  GET  GET  Shows project statistics if available.  If you are not the owner of the project or anonymous, then you will get only available public information for the owner and the project itself.   avg_contrib_time : Average contribution time (NOT existing when\n    no statistics there!).  projectStats : Project statistics (NOT existing when no\n    statistics there!).  userStats : User statistics (NOT existing when no statistics\n    there!).  n_completed_tasks : Number of completed tasks.  n_tasks : Number of tasks.  n_volunteers : Number of volunteers.  overall_progress : Progress (0..100).  owner : Owner user information  pro_features : Enabled pro features for the project.  project : Project information  template : Jinja2 template.  title : the title for the endpoint.   Example output  Statistics are existing in this output:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63 { \n   avg_contrib_time :   0 , \n   n_completed_tasks :   2 , \n   n_tasks :   2 , \n   n_volunteers :   59 , \n   overall_progress :   100 , \n   owner :   { \n     created :   2012-06-06T06:27:18.760254 , \n     fullname :   Daniel Lombra\u00f1a Gonz\u00e1lez , \n     info :   { \n       avatar :   1422360933.8_avatar.png , \n       container :   user_3 \n     }, \n     n_answers :   2998 , \n     name :   teleyinex , \n     rank :   66 , \n     registered_ago :   4 years ago , \n     score :   2998 \n   }, \n   pro_features :   { \n     auditlog_enabled :   false , \n     autoimporter_enabled :   false , \n     better_stats_enabled :   true , \n     webhooks_enabled :   false \n   }, \n   project :   { \n     created :   2013-01-10T19:58:55.454015 , \n     description :   Facial expressions that convey feelings , \n     featured :   true , \n     id :   253 , \n     info :   { \n       container :   user_3 , \n       thumbnail :   project_253_thumbnail_1460620575.png \n     }, \n     last_activity :   null , \n     last_activity_raw :   null , \n     n_tasks :   null , \n     n_volunteers :   null , \n     name :   The Face We Make , \n     overall_progress :   null , \n     owner :   null , \n     short_name :   thefacewemake , \n     updated :   2016-04-14T07:56:16.114006 \n   }, \n   projectStats :   {\\ userAuthStats\\ : {\\ top5\\ : [], \\ values\\ : [], \\ label\\ : \\ Authenticated Users\\ } ... , \n   template :   /projects/stats.html , \n   title :   Project: The Face We Make  middot; Statistics , \n   userStats :   { \n     anonymous :   { \n       pct_taskruns :   0 , \n       taskruns :   0 , \n       top5 :   [], \n       users :   0 \n     }, \n     authenticated :   { \n       pct_taskruns :   0 , \n       taskruns :   0 , \n       top5 :   [], \n       users :   0 \n     }, \n     geo :   false \n   }  }", 
            "title": "Project stats"
        }, 
        {
            "location": "/api/project/project/#project-tasks", 
            "text": "Endpoint: /project/ short_name /tasks  Allowed methods :  GET  GET  Shows project tasks.  If you are not the owner of the project or anonymous, then you will get\nonly available public information for the owner and the project itself.   autoimporter_enabled : If autoimporter is enabled.  last_activity : Last activity.  n_completed_tasks : Number of completed tasks.  n_task_runs : Number of task runs.  n_tasks : Number of tasks.  n_volunteers : Number of volunteers.  overall_progress : Progress (0..100).  owner : Owner user information  pro_features : Enabled pro features for the project.  project : Project information.  template : Jinja2 template.  title : the title for the endpoint.   Example output  for another project where you are not the owner:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50 { \n   autoimporter_enabled :   true , \n   last_activity :   2017-03-02T21:00:33.627277 , \n   n_completed_tasks :   184839 , \n   n_task_runs :   1282945 , \n   n_tasks :   193090 , \n   n_volunteers :   20016 , \n   overall_progress :   95 , \n   owner :   { \n     created :   2014-02-13T15:28:08.420187 , \n     fullname :   John Smith , \n     info :   { \n       avatar :   1410769844.15_avatar.png , \n       container :   user_3927 , \n       extra :   null \n     }, \n     locale :   null , \n     n_answers :   43565 , \n     name :   pmisson , \n     rank :   3 , \n     registered_ago :   3 years ago , \n     score :   43565 \n   }, \n   pro_features :   { \n     auditlog_enabled :   true , \n     autoimporter_enabled :   true , \n     webhooks_enabled :   true \n   }, \n   project :   { \n     created :   2014-02-22T15:09:23.691811 , \n     description :   Image pattern recognition , \n     featured :   true , \n     id :   1377 , \n     info :   { \n       container :   user_3927 , \n       thumbnail :   app_1377_thumbnail_1410772569.58.png \n     }, \n     last_activity :   null , \n     last_activity_raw :   null , \n     n_tasks :   null , \n     n_volunteers :   null , \n     name :   Cool Project , \n     overall_progress :   null , \n     owner :   null , \n     short_name :   coolproject , \n     updated :   2017-03-02T21:00:33.965587 \n   }, \n   template :   /projects/tasks.html , \n   title :   Project: Cool project  }", 
            "title": "Project tasks"
        }, 
        {
            "location": "/api/project/project/#project-task-id", 
            "text": "Endpoint: /project/ short_name /task/ int:task_id  Allowed methods :  GET  GET  Shows a project task based on id.  If you are not the owner of the project or anonymous, then you will get\nonly available public information for the owner and the project itself.   owner : Owner user information  project : Project information.  template : Jinja2 template of the task HTML template.  title : the title for the endpoint.   Example output  for another project where you are not the owner:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38 { \n   owner :   { \n     created :   2014-08-11T08:59:32.079599 , \n     fullname :   John Doe , \n     info :   { \n       avatar :   1458638093.9_avatar.png , \n       container :   user_4953 , \n       extra :   null \n     }, \n     locale :   null , \n     n_answers :   257 , \n     name :   JohnD , \n     rank :   840 , \n     registered_ago :   2 years ago , \n     score :   257 \n   }, \n   project :   { \n     created :   2015-01-21T11:59:36.519541 , \n     description :   flickr678 , \n     featured :   false , \n     id :   2417 , \n     info :   { \n       container :   null , \n       thumbnail :   null \n     }, \n     last_activity :   null , \n     last_activity_raw :   null , \n     n_tasks :   null , \n     n_volunteers :   null , \n     name :   flickr678 , \n     overall_progress :   null , \n     owner :   null , \n     short_name :   flickr678 , \n     updated :   2017-03-22T13:03:55.496660 \n   }, \n   template :   /projects/presenter.html , \n   title :   Project: flickr678  middot; Contribute  }", 
            "title": "Project task id"
        }, 
        {
            "location": "/api/project/project/#project-category", 
            "text": "Endpoint: /project/category/ short_name /  Allowed methods :  GET  GET  Gives you the list of projects in a category.   pagination : A pagination object for getting projects from this\n    category.  active_cat : Active category.  projects : List of projects belonging to this category.  categories : List of available categories in this server.  template : The Jinja2 template that could be rendered.  title : the title for the endpoint.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61 { \n   active_cat :   { \n     created :   null , \n     description :   Social projects , \n     id :   2 , \n     name :   Social , \n     short_name :   social \n   }, \n   categories :   [ \n     { \n       created :   null , \n       description :   Featured projects , \n       id :   null , \n       name :   Featured , \n       short_name :   featured \n     }, \n     { \n       created :   null , \n       description :   Social projects , \n       id :   2 , \n       name :   Social , \n       short_name :   social \n     }, \n     { \n       created :   2013-06-18T11:13:44.789149 , \n       description :   Art projects , \n       id :   3 , \n       name :   Art , \n       short_name :   art \n     }, \n   ], \n   pagination :   { \n     next :   false , \n     page :   1 , \n     per_page :   20 , \n     prev :   false , \n     total :   1 \n   }, \n   projects :   [ \n     { \n       created :   2014-02-22T15:09:23.691811 , \n       description :   Image pattern recognition , \n       id :   1377 , \n       info :   { \n         container :   7 , \n         thumbnail :   58.png \n       }, \n       last_activity :   2 weeks ago , \n       last_activity_raw :   2017-01-31T09:18:28.450391 , \n       n_tasks :   169671 , \n       n_volunteers :   17499 , \n       name :   Name , \n       overall_progress :   80 , \n       owner :   John Doe , \n       short_name :   name , \n       updated :   2017-01-31T09:18:28.491496 \n     }, \n   ], \n   template :   /projects/index.html , \n   title :   Projects  }     Note  To override the default ranking you pass the  orderby  query parameter to sort projects by any of the attributes listed above, such as   n_volunteers  or  n_tasks . The  desc  query parameter can also be added to sort in descending order. For example: GET\n/project/category/ short_name /?orderby=n_tasks desc=True", 
            "title": "Project Category"
        }, 
        {
            "location": "/api/project/project/#project-category-featured", 
            "text": "Endpoint: /project/category/featured/  Allowed methods :  GET  GET  Gives you the list of featured projects.   pagination : A pagination object for getting new featured\n    projects from this category.  active_cat : Active category.  projects : List of projects belonging to this category.  categories : List of available categories in this server.  template : The Jinja2 template that could be rendered.  title : the title for the endpoint.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61 { \n   active_cat :   { \n     created :   null , \n     description :   Featured projects , \n     id :   null , \n     name :   Featured , \n     short_name :   featured \n   }, \n   categories :   [ \n     { \n       created :   null , \n       description :   Featured projects , \n       id :   null , \n       name :   Featured , \n       short_name :   featured \n     }, \n     { \n       created :   null , \n       description :   Social projects , \n       id :   2 , \n       name :   Social , \n       short_name :   social \n     }, \n     { \n       created :   2013-06-18T11:13:44.789149 , \n       description :   Art projects , \n       id :   3 , \n       name :   Art , \n       short_name :   art \n     }, \n   ], \n   pagination :   { \n     next :   false , \n     page :   1 , \n     per_page :   20 , \n     prev :   false , \n     total :   1 \n   }, \n   projects :   [ \n     { \n       created :   2014-02-22T15:09:23.691811 , \n       description :   Image pattern recognition , \n       id :   1377 , \n       info :   { \n         container :   7 , \n         thumbnail :   58.png \n       }, \n       last_activity :   2 weeks ago , \n       last_activity_raw :   2017-01-31T09:18:28.450391 , \n       n_tasks :   169671 , \n       n_volunteers :   17499 , \n       name :   Name , \n       overall_progress :   80 , \n       owner :   John Doe , \n       short_name :   name , \n       updated :   2017-01-31T09:18:28.491496 \n     }, \n   ], \n   template :   /projects/index.html , \n   title :   Projects  }     Note  To override the default ranking, you pass the  orderby  query parameter to sort projects by any of the attributes listed above, such as  n_volunteers  or  n_tasks . The  desc  query parameter can also be added to sort in descending order. For example: GET\n/project/category/featured/?orderby=n_tasks desc=True", 
            "title": "Project Category Featured"
        }, 
        {
            "location": "/api/project/project/#project-category-draft", 
            "text": "Endpoint: /project/category/draft/  Allowed methods :  GET  GET  Gives you the list of featured projects.   pagination : A pagination object for getting new draft projets\n    from this category.  active_cat : Active category.  projects : List of projects belonging to this category.  categories : List of available categories in this server.  template : The Jinja2 template that could be rendered.  title : the title for the endpoint.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61 { \n   active_cat :   { \n     created :   null , \n     description :   Draft projects , \n     id :   null , \n     name :   Draft , \n     short_name :   draft \n   }, \n   categories :   [ \n     { \n       created :   null , \n       description :   Draft projects , \n       id :   null , \n       name :   Draft , \n       short_name :   draft \n     }, \n     { \n       created :   null , \n       description :   Social projects , \n       id :   2 , \n       name :   Social , \n       short_name :   social \n     }, \n     { \n       created :   2013-06-18T11:13:44.789149 , \n       description :   Art projects , \n       id :   3 , \n       name :   Art , \n       short_name :   art \n     }, \n   ], \n   pagination :   { \n     next :   false , \n     page :   1 , \n     per_page :   20 , \n     prev :   false , \n     total :   1 \n   }, \n   projects :   [ \n     { \n       created :   2014-02-22T15:09:23.691811 , \n       description :   Draft 1 , \n       id :   17 , \n       info :   { \n         container :   7 , \n         thumbnail :   58.png \n       }, \n       last_activity :   2 weeks ago , \n       last_activity_raw :   2017-01-31T09:18:28.450391 , \n       n_tasks :   0 , \n       n_volunteers :   0 , \n       name :   Name , \n       overall_progress :   0 , \n       owner :   John Doe , \n       short_name :   name , \n       updated :   2017-01-31T09:18:28.491496 \n     }, \n   ], \n   template :   /projects/index.html , \n   title :   Projects  }     Note  To override the default ranking, you pass the  orderby  query parameter to\nsort projects by any of the attributes listed above, such as n_volunteers  or  n_tasks . The  desc  query parameter can also be added to sort in descending order. For example: GET\n/project/category/draft/?orderby=n_tasks desc=True", 
            "title": "Project Category Draft"
        }, 
        {
            "location": "/api/task/favorites/", 
            "text": "Authenticated users can mark a task as a favorite. This is useful for\nusers when they want to see all the tasks they have done to remember them. For example, a user can mark as a favorite a picture that\ns beautiful and that he/she has characterized as favorited.\n\n\nFor serving this purpose, PYBOSSA provides the following API endpoint:\n\n\n1\nGET /api/favorites\n\n\n\n\n\n\n\nIf the user is authenticated, it will return all the tasks the user has\nmarked as favorited.\n\n\nTo add a task as a favorite, a POST should be done with a payload of\n{\ntask_id\n: Task.id}:\n\n\n1\nPOST /api/favorites\n\n\n\n\n\n\n\nFor removing one task from the favorites, do a DELETE:\n\n\n1\nDEL /api/favorites/task.id\n\n\n\n\n\n\nBe sure to have always the user authenticated. Otherwise, the user will not be able to see it.", 
            "title": "Favorites"
        }, 
        {
            "location": "/api/task/participated/", 
            "text": "For the Tasks endpoint, you can also do something else, which could be pretty handy for PYBOSSA projects that are built using only Javascript (Single Page Applications) and do not want to use the /new task endpoint. \n\n\nYou can use any of the previous filters for the /api/task\nendpoint and add the following argument: \nparticipated=1\n to remove from the results, the tasks that the user has participated in. In this way, you will be entirely in charge of how the tasks are presented to your users. You will design how they will be delivered.\n\n\nThis endpoint now accepts as well the \nexternal_uid\n parameter, as by default it identifies authenticated users, as well as anonymous users. If you are using the external UID, include it.", 
            "title": "Excluding contributed tasks"
        }, 
        {
            "location": "/api/task/newtask/", 
            "text": "You can request a new task for the current user (anonymous or\nauthenticated) by:\n\n\n1\nGET http://{pybossa-site-url}/api/{project.id}/newtask\n\n\n\n\n\n\nThis will return a domain Task object in JSON format if there is a task available for the user. Otherwise, it will return \nNone\n.\n\n\nYou can also use \nlimit\n to get more than 1 task for the user like\nthis:\n\n\n1\nGET http://{pybossa-site-url}/api/{project.id}/newtask?limit=100\n\n\n\n\n\n\nThat query will return 100 tasks for the user.\n\n\n\n\nNote\n\n\nThat\ns the maximum of tasks that a user can get at once. If you pass an argument of 200, PYBOSSA will convert it to 100.\n\n\n\n\nYou can also, use \noffset\n to get the next tasks, if you want,\nallowing you to preload:\n\n\n1\nGET http://{pybossa-site-url}/api/{project.id}/newtask?offset=1\n\n\n\n\n\n\nThat query will return the next task for the user, once it solves the\nprevious task.\n\n\nBoth arguments, limit and offset can be used together:\n\n\n1\nGET http://{pybossa-site-url}/api/{project.id}/newtask?limit=2offset=2\n\n\n\n\n\n\nThat will load the next two tasks for the user.\n\n\nAlso, you can request the tasks to be sorted by a Task attribute (like\nID, created, etc.) using the following arguments: \norderby\n and\n\ndesc\n to sort them in descending order:\n\n\n1\nGET http://{pybossa-site-url}/api/{project.id}/newtask?orderby=priority_0\ndesc=true\n\n\n\n\n\n\nThat query will return the tasks order by priority in descending order, in other words, it will return first the tasks with higher priority.", 
            "title": "Requesting a task"
        }, 
        {
            "location": "/api/task/external/", 
            "text": "Using your user database\n\n\nSince version v2.3.0 PYBOSSA supports external User IDs. This means that you can efficiently use your database of users without having to register them in the PYBOSSA server. As a benefit, you will be able to track your users within the PYBOSSA server providing a straightforward and easy experience for them.\n\n\nA typical case for this would be for example a native phone app\n(Android, iOS or Windows).\n\n\nUsually, phone apps have their user database. With this in mind, you can add a crowdsourcing feature to your phone app by just using PYBOSSA in the following way.\n\n\nFirst, create a project. When you build a project in PYBOSSA, the system will create for you a \nsecret key\n. This secret key will be used by your phone app to authenticate all the requests and avoid other users to send data to your project via external user API.\n\n\n\n\nNote\n\n\nWe highly recommend using SSL on your server to secure all the process. You can use Let\ns Encrypt certificates for free. Check their\ndocumentation.\n\n\n\n\nNow your phone app will have to authenticate to the server to get tasks and post task runs.\n\n\nTo do it, all you have to do is to create an HTTP Request with an\nAuthorization Header like this:\n\n\n1\n2\nHEADERS Authorization: project.secret_key\nGET http://{pybossa-site-url}/api/auth/project/short_name/token\n\n\n\n\n\n\nThat request will return a JWT token for you. With that token, you will be able to start requesting tasks for your user base passing an authorization header again. Imagine a user from your database is identified like this: \n1xa\n:\n\n\n1\n2\nHEADERS Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\nGET http://{pybossa-site-url}/api/{project.id}/newtask?external_uid=1xa\n\n\n\n\n\n\nThat will return a task for the user ID 1xa that belongs to your database but not to PYBOSSA. Then, once the user has completed the task you will be able to submit it like this:\n\n\n1\n2\nHEADERS Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\nPOST http://{pybossa-site-url}/api/taskrun?external_uid=1xa\n\n\n\n\n\n\n\n\nNote\n\n\nThe TaskRun object needs to have the external_uid field filled with 1xa.\n\n\n\n\nAs simple as that!", 
            "title": "External user ID"
        }, 
        {
            "location": "/api/task/external/#using-your-user-database", 
            "text": "Since version v2.3.0 PYBOSSA supports external User IDs. This means that you can efficiently use your database of users without having to register them in the PYBOSSA server. As a benefit, you will be able to track your users within the PYBOSSA server providing a straightforward and easy experience for them.  A typical case for this would be for example a native phone app\n(Android, iOS or Windows).  Usually, phone apps have their user database. With this in mind, you can add a crowdsourcing feature to your phone app by just using PYBOSSA in the following way.  First, create a project. When you build a project in PYBOSSA, the system will create for you a  secret key . This secret key will be used by your phone app to authenticate all the requests and avoid other users to send data to your project via external user API.   Note  We highly recommend using SSL on your server to secure all the process. You can use Let s Encrypt certificates for free. Check their documentation.   Now your phone app will have to authenticate to the server to get tasks and post task runs.  To do it, all you have to do is to create an HTTP Request with an\nAuthorization Header like this:  1\n2 HEADERS Authorization: project.secret_key\nGET http://{pybossa-site-url}/api/auth/project/short_name/token   That request will return a JWT token for you. With that token, you will be able to start requesting tasks for your user base passing an authorization header again. Imagine a user from your database is identified like this:  1xa :  1\n2 HEADERS Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\nGET http://{pybossa-site-url}/api/{project.id}/newtask?external_uid=1xa   That will return a task for the user ID 1xa that belongs to your database but not to PYBOSSA. Then, once the user has completed the task you will be able to submit it like this:  1\n2 HEADERS Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\nPOST http://{pybossa-site-url}/api/taskrun?external_uid=1xa    Note  The TaskRun object needs to have the external_uid field filled with 1xa.   As simple as that!", 
            "title": "Using your user database"
        }, 
        {
            "location": "/api/taskrun/intro/", 
            "text": "Intro\n\n\nTaskRuns are exactly as other domain objects with two exceptions:\n\n\n\n\nYou cannot create a taskrun without filling a few requirements.\n\n\nYou can upload files as part of it.\n\n\n\n\nCreating a TaskRun\n\n\nFor creating a TaskRun a project needs to be published. If the project\nonly allows authenticated contributions, PYBOSSA will reject the creation\nof TaskRuns via the API. Then, in order to save a TaskRun you, your user,\nneeds to request it first. This is mandatory to avoid scripts creating hundreds\nof task runs in a few minutes.\n\n\nRequesting the task\n\n\nIn order to request a task, all you have to do is basically an API call to any of \nthe following endpoints:\n\n\nhttp://server/api/project/id/newtask\n\n\nor\n\n\nhttp://server/project/short_name/task/ID\n\n\nIn the first case, you will be able to send a TaskRun only for the task that has been\nreturned for your user via the \nnewtask\n endpoint. In the second one, you are in charge\nto supply the task.ID. \n\n\nAttaching a file to the TaskRun\n\n\nYou can create a TaskRun with an image, video, PDF, audio (or any file) by doing a POST\nrequest with the following Content-Type: multipart/form-data.\n\n\nFor example, in Python you could do it like this:\n\n\n1\n2\n3\n4\n5\n6\n7\nimport\n \nrequests\n\n\nimport\n \njson\n\n\nurl\n \n=\n \nhttps://server/api/taskrun?api_key=YOURKEY\n\n\n# Upload a picture\n\n\nfiles\n \n=\n \n{\nfile\n:\n \nopen\n(\ntest.jpg\n,\n \nrb\n)}\n\n\ndata\n \n=\n \n{\nproject_id\n:\n \nYOURPROJECT_ID\n,\n \ntask_id\n:\n \nTASK_ID\n,\n \ninfo\n:\n \njson\n.\ndumps\n(\ndict\n(\nfoo\n=\nbar\n))}\n\n\nr\n \n=\n \nrequests\n.\npost\n(\nurl\n,\n \ndata\n=\ndata\n,\n \nfiles\n=\nfiles\n)\n\n\n\n\n\nAs you can see, you can submit in one HTTP request not only the file but also some extra\ninfo. The only requirement is to escape it, so PYBOSSA can parse it later on when the file\nhas been succesfully uploaded.\n\n\nThis feature is pretty handy if you need to send the latitude and longitude of a picture taken\nby a phone. You will be able to upload the file, but also its coordinates at once.", 
            "title": "Attaching files"
        }, 
        {
            "location": "/api/taskrun/intro/#intro", 
            "text": "TaskRuns are exactly as other domain objects with two exceptions:   You cannot create a taskrun without filling a few requirements.  You can upload files as part of it.", 
            "title": "Intro"
        }, 
        {
            "location": "/api/taskrun/intro/#creating-a-taskrun", 
            "text": "For creating a TaskRun a project needs to be published. If the project\nonly allows authenticated contributions, PYBOSSA will reject the creation\nof TaskRuns via the API. Then, in order to save a TaskRun you, your user,\nneeds to request it first. This is mandatory to avoid scripts creating hundreds\nof task runs in a few minutes.", 
            "title": "Creating a TaskRun"
        }, 
        {
            "location": "/api/taskrun/intro/#requesting-the-task", 
            "text": "In order to request a task, all you have to do is basically an API call to any of \nthe following endpoints:  http://server/api/project/id/newtask  or  http://server/project/short_name/task/ID  In the first case, you will be able to send a TaskRun only for the task that has been\nreturned for your user via the  newtask  endpoint. In the second one, you are in charge\nto supply the task.ID.", 
            "title": "Requesting the task"
        }, 
        {
            "location": "/api/taskrun/intro/#attaching-a-file-to-the-taskrun", 
            "text": "You can create a TaskRun with an image, video, PDF, audio (or any file) by doing a POST\nrequest with the following Content-Type: multipart/form-data.  For example, in Python you could do it like this:  1\n2\n3\n4\n5\n6\n7 import   requests  import   json  url   =   https://server/api/taskrun?api_key=YOURKEY  # Upload a picture  files   =   { file :   open ( test.jpg ,   rb )}  data   =   { project_id :   YOURPROJECT_ID ,   task_id :   TASK_ID ,   info :   json . dumps ( dict ( foo = bar ))}  r   =   requests . post ( url ,   data = data ,   files = files )   \nAs you can see, you can submit in one HTTP request not only the file but also some extra\ninfo. The only requirement is to escape it, so PYBOSSA can parse it later on when the file\nhas been succesfully uploaded.  This feature is pretty handy if you need to send the latitude and longitude of a picture taken\nby a phone. You will be able to upload the file, but also its coordinates at once.", 
            "title": "Attaching a file to the TaskRun"
        }, 
        {
            "location": "/api/user/intro/", 
            "text": "While all the other endpoints behave the same, this one is a bit special as we deal with private information like emails.\n\n\nAnonymous users\n\n\nThe following actions cannot be done:\n\n\n\n\nCreate a new user via a POST\n\n\nUpdate an existing user via a PUT\n\n\nDelete an existing user via a DEL\n\n\n\n\nRead action will only return username and locale for that user.\n\n\nAuthenticated users\n\n\nThe following actions cannot be done:\n\n\n\n\nCreate a new user via a POST\n\n\nUpdate an existing user via a PUT different than the same user\n\n\nDelete an existing user via a DEL\n\n\n\n\nRead action will only return user name and locale for that user. If the\nuser access its page, then all the information will be available to\nhim/her.\n\n\nAdmin users\n\n\nThe following actions cannot be done:\n\n\n\n\nCreate a new user via a POST\n\n\nDelete an existing user via a DEL\n\n\n\n\nRead action can be done by any user. The admins will have access to the\nUser IDs. This will be helpful in case that you want to give, for\nexample, badges, for users when using our webhooks solution. Each user\nhas in the info field a new field named \nextra\n where that information\n(or anything else) could be stored.", 
            "title": "Intro"
        }, 
        {
            "location": "/api/user/intro/#anonymous-users", 
            "text": "The following actions cannot be done:   Create a new user via a POST  Update an existing user via a PUT  Delete an existing user via a DEL   Read action will only return username and locale for that user.", 
            "title": "Anonymous users"
        }, 
        {
            "location": "/api/user/intro/#authenticated-users", 
            "text": "The following actions cannot be done:   Create a new user via a POST  Update an existing user via a PUT different than the same user  Delete an existing user via a DEL   Read action will only return user name and locale for that user. If the\nuser access its page, then all the information will be available to\nhim/her.", 
            "title": "Authenticated users"
        }, 
        {
            "location": "/api/user/intro/#admin-users", 
            "text": "The following actions cannot be done:   Create a new user via a POST  Delete an existing user via a DEL   Read action can be done by any user. The admins will have access to the\nUser IDs. This will be helpful in case that you want to give, for\nexample, badges, for users when using our webhooks solution. Each user\nhas in the info field a new field named  extra  where that information\n(or anything else) could be stored.", 
            "title": "Admin users"
        }, 
        {
            "location": "/api/user/progress/", 
            "text": "User progress\n\n\nYou can know how many tasks a user has completed for a given project by accessing\nthe following endpoint:\n\n\n1\nhttp://server.com/api/project/\nid\n/userprogress\n\n\n\n\n\n\nor\n\n\n1\nhttp://server.com/api/project/\nshort_name\n/userprogress\n\n\n\n\n\n\nThe user needs to be authenticated to get the value. You cannot query another user, just\nthe current one that it is authenticated in the system.", 
            "title": "Project progress"
        }, 
        {
            "location": "/api/user/progress/#user-progress", 
            "text": "You can know how many tasks a user has completed for a given project by accessing\nthe following endpoint:  1 http://server.com/api/project/ id /userprogress   or  1 http://server.com/api/project/ short_name /userprogress   The user needs to be authenticated to get the value. You cannot query another user, just\nthe current one that it is authenticated in the system.", 
            "title": "User progress"
        }, 
        {
            "location": "/api/user/account/", 
            "text": "Account index\n\n\nEndpoint: /account/page/\nint:page\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\naccounts\n: this key holds the list of accounts for the given\n    page.\n\n\npagination\n: this key holds the pagination information.\n\n\ntop_users\n: this key holds the top users (including the user if\n    authenticated) with their rank and scores.\n\n\nupdate_feed\n: the latest actions in the server (users created,\n    contributions, new tasks, etc.).\n\n\ntemplate\n: the Jinja2 template that should be rendered in case of\n    text/html.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n{\n\n  \naccounts\n:\n \n[\n\n    \n{\n\n      \ncreated\n:\n \n2015-06-10T15:02:38.411497\n,\n\n      \nfullname\n:\n \nScifabric\n,\n\n      \ninfo\n:\n \n{\n\n        \navatar\n:\n \navatar.png\n,\n\n        \ncontainer\n:\n \nuser_234234dd3\n\n      \n},\n\n      \nlocale\n:\n \nnull\n,\n\n      \nname\n:\n \nScifabric\n,\n\n      \nrank\n:\n \nnull\n,\n\n      \nregistered_ago\n:\n \n1 year ago\n,\n\n      \nscore\n:\n \nnull\n,\n\n      \ntask_runs\n:\n \n3\n\n    \n},\n\n  \n],\n\n  \npagination\n:\n \n{\n\n    \nnext\n:\n \ntrue\n,\n\n    \npage\n:\n \n3\n,\n\n    \nper_page\n:\n \n24\n,\n\n    \nprev\n:\n \ntrue\n,\n\n    \ntotal\n:\n \n11121\n\n  \n},\n\n  \ntemplate\n:\n \naccount/index.html\n,\n\n  \ntitle\n:\n \nCommunity\n,\n\n  \ntop_users\n:\n \n[\n\n    \n{\n\n      \ncreated\n:\n \n2014-08-17T18:28:56.738119\n,\n\n      \nfullname\n:\n \nBuzz Bot\n,\n\n      \ninfo\n:\n \n{\n\n        \navatar\n:\n \navatar.png\n,\n\n        \ncontainer\n:\n \nuser_55\n\n      \n},\n\n      \nlocale\n:\n \nnull\n,\n\n      \nname\n:\n \nbuzzbot\n,\n\n      \nrank\n:\n \n1\n,\n\n      \nregistered_ago\n:\n \nnull\n,\n\n      \nscore\n:\n \n54247\n,\n\n      \ntask_runs\n:\n \nnull\n\n    \n},\n\n  \n],\n\n  \ntotal\n:\n \n11121\n,\n\n  \nupdate_feed\n:\n \n[]\n\n\n}\n\n\n\n\n\n\n\nAccount registration\n\n\nEndpoint: /account/register\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nform\n: The form fields that need to be sent for creating an\n    account. It contains the CSRF token for validating the POST, as well\n    as an errors field in case that something is wrong.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: the title of the page.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n{\n\n  \nform\n:\n \n{\n\n    \nconfirm\n:\n \nnull\n,\n\n    \ncsrf\n:\n \ntoken,\n\n    \nemail_addr\n:\n \nnull\n,\n\n    \nerrors\n:\n \n{},\n\n    \nfullname\n:\n \nnull\n,\n\n    \nname\n:\n \nnull\n,\n\n    \npassword\n:\n \nnull\n\n  \n},\n\n  \ntemplate\n:\n \naccount/register.html\n,\n\n  \ntitle\n:\n \nRegister\n\n\n}\n\n\n\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nnext\n: URL that you JavaScript can follow as a redirect. It is\n    not mandatory.\n\n\n\n\nExample output\n\n\n1\n2\n3\n{\n\n    \nnext\n:\n/about\n\n\n}\n\n\n\n\n\n\n\nIf there\ns an error in the form fields, you will get them in the\nform.errors\n key:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n{\n\n  \nform\n:\n \n{\n\n    \nconfirm\n:\n \ndaniel\n,\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \nemail_addr\n:\n \ndaniel\n,\n\n    \nerrors\n:\n \n{\n\n      \nemail_addr\n:\n \n[\n\n        \nInvalid email address.\n\n      \n],\n\n      \nname\n:\n \n[\n\n        \nThe user name is already taken\n\n      \n]\n\n    \n},\n\n    \nfullname\n:\n \ndaniel\n,\n\n    \nname\n:\n \ndaniel\n,\n\n    \npassword\n:\n \ndaniel\n\n  \n},\n\n  \ntemplate\n:\n \naccount/register.html\n,\n\n  \ntitle\n:\n \nRegister\n\n\n}\n\n\n\n\n\n\n\nIf email confirmation is required for registering you will get this\naccount validation result when all input data is correct. Note: Keep in\nmind that account is not created fully until the user confirmed his\nemail.\n\n\n1\n2\n3\n4\n5\n{\n\n  \nstatus\n:\n \nsent\n,\n\n  \ntemplate\n:\n \naccount/account_validation.html\n,\n\n  \ntitle\n:\n \nAccount validation\n\n\n}\n\n\n\n\n\n\n\nAccount sign in\n\n\nEndpoint: /account/signin\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nform\n: the form fields that need to be sent for signing a user.\n    It contains the csrf token for validating the post, as well as an\n    errors field in case that something is wrong.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n{\n\n  \nform\n:\n \n{\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \nemail\n:\n \nnull\n,\n\n    \nerrors\n:\n \n{},\n\n    \npassword\n:\n \nnull\n\n  \n},\n\n  \nnext\n:\n \nnull\n,\n\n  \ntemplate\n:\n \naccount/signin.html\n,\n\n  \ntitle\n:\n \nSign in\n\n\n}\n\n\n\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nflash\n: A success message, or error indicating if the request was\n    successful.\n\n\nform\n: the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n{\n\n  \nauth\n:\n \n{\n\n    \nfacebook\n:\n \ntrue\n,\n\n    \ngoogle\n:\n \ntrue\n,\n\n    \ntwitter\n:\n \ntrue\n\n  \n},\n\n  \nflash\n:\n \nPlease correct the errors\n,\n\n  \nform\n:\n \n{\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \nemail\n:\n \nprueba@prueba.com\n,\n\n    \nerrors\n:\n \n{\n\n      \npassword\n:\n \n[\n\n        \nYou must provide a password\n\n      \n]\n\n    \n},\n\n    \npassword\n:\n \n\n  \n},\n\n  \nnext\n:\n \nnull\n,\n\n  \nstatus\n:\n \nerror\n,\n\n  \ntemplate\n:\n \naccount/signin.html\n,\n\n  \ntitle\n:\n \nSign in\n\n\n}\n\n\n\n\n\n\n\nIf the login is successful, then, you will get something like this:\n\n\n1\n2\n3\n4\n5\n{\n\n  \nflash\n:\n \nWelcome back John Doe\n,\n\n  \nnext\n:\n \n/\n,\n\n  \nstatus\n:\n \nsuccess\n\n\n}\n\n\n\n\n\n\n\nAccount sign out\n\n\nEndpoint: /account/signout\n\n\nAllowed methods\n: \nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nnext\n: suggested redirection after the sign out.\n\n\nmessage\n: message displaying success for sign out.\n\n\n\n\nAccount recover password\n\n\nEndpoint: /account/forgot-password\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nform\n: the form fields that need to be sent for creating an\n    account. It contains the csrf token for validating the post, as well\n    as an errors field in case that something is wrong.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n6\n7\n{\n\n  \nform\n:\n \n{\n\n    \ncsrf\n:\n \ntoken,\n\n    \nemail_addr\n:\n \nnull\n\n  \n},\n\n  \ntemplate\n:\n \naccount/password_forgot.html\n\n\n}\n\n\n\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nflash\n: A success message, or error indicating if the request was\n    succesful.\n\n\nform\n: the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n{\n\n  \nflash\n:\n \n[\n\n    \nWe don\nt have this email in our records.\n\n  \n],\n\n  \nform\n:\n \n{\n\n    \ncsrf\n:\n \n1483549683.06##cc1c7ff101b2a14a89cac5462e5028e6235ddb31\n,\n\n    \nemail_addr\n:\n \nalgo@algo.com\n,\n\n    \nerrors\n:\n \n{}\n\n  \n},\n\n  \ntemplate\n:\n \n/account/password_forgot.html\n\n\n}\n\n\n\n\n\n\n\nIf there\ns an error in the form fields, you will get them in the\nform.errors\n key:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n{\n\n  \nflash\n:\n \nSomething went wrong, please correct the errors on the form\n,\n\n  \nform\n:\n \n{\n\n    \ncsrf\n:\n \n1483552042.97##f0e36b1b113934532ff9c8003b120365ff45f5e4\n,\n\n    \nemail_addr\n:\n \nalgoom\n,\n\n    \nerrors\n:\n \n{\n\n      \nemail_addr\n:\n \n[\n\n        \nInvalid email address.\n\n      \n]\n\n    \n}\n\n  \n},\n\n  \ntemplate\n:\n \n/account/password_forgot.html\n\n\n}\n\n\n\n\n\n\n\nAccount name\n\n\n**Endpoint: /account/\nname\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nprojects_contrib\n: a list of projects the user has contributed\n    too.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: The title for the view.\n\n\nuser\n: User information, including fullname, rank etc.\n\n\n\n\nExample output\n\n\nIf you are not logged in or requesting details of another user you will\nonly get public viewable information. If you are logged in you will also\nget private information in the user field. Sample output of public\ninformation:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n{\n\n    \nprojects_contrib\n:\n \n[\n\n        \n{\n\n            \ndescription\n:\n \nthis is a project\n,\n\n            \ninfo\n:\n \n{\n\n                \ncontainer\n:\n \n123\n,\n\n                \nthumbnail\n:\n \nthumbnailx\n\n            \n},\n\n            \nn_tasks\n:\n \n4\n,\n\n            \nn_volunteers\n:\n \n0\n,\n\n            \nname\n:\n \ntest12334\n,\n\n            \noverall_progress\n:\n \n0\n,\n\n            \nshort_name\n:\n \ntest12334\n\n        \n}\n\n    \n],\n\n    \nprojects_created\n:\n \n[\n\n        \n{\n\n            \ndescription\n:\n \nYoutube 1\n,\n\n            \ninfo\n:\n \n{\n\n                \ncontainer\n:\n \n345\n,\n\n                \nthumbnail\n:\n \nthumbnaily\n\n            \n},\n\n            \nn_tasks\n:\n \n15\n,\n\n            \nn_volunteers\n:\n \n0\n,\n\n            \nname\n:\n \nJohnDoe Youtube 1\n,\n\n            \noverall_progress\n:\n \n0\n,\n\n            \nshort_name\n:\n \njohnyoutube1\n\n        \n},\n\n    \n]\n\n    \ntemplate\n:\n \n/account/public_profile.html\n,\n\n    \ntitle\n:\n \nJohn \nmiddot; User Profile\n,\n\n    \nuser\n:\n \n{\n\n        \nfullname\n:\n \nJoen Doe\n,\n\n        \ninfo\n:\n \n{\n\n            \ncontainer\n:\n \nuser_4953\n\n        \n},\n\n        \nn_answers\n:\n \n56\n,\n\n        \nname\n:\n \nJohnDoe\n,\n\n        \nrank\n:\n \n1813\n,\n\n        \nscore\n:\n \n56\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nExample of logged in user:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n{\n\n    \n...\n\n    \nuser\n:\n \n{\n\n        \nadmin\n:\n \nfalse\n,\n\n        \napi_key\n:\n \naa3ee485-896d-488a-83f7-88a29bf45171\n,\n\n        \nconfirmation_email_sent\n:\n \nfalse\n,\n\n        \ncreated\n:\n \n2014-08-11T08:59:32.079599\n,\n\n        \nemail_addr\n:\n \njohndoe@johndoe.com\n,\n\n        \nfacebook_user_id\n:\n \nnull\n,\n\n        \nfullname\n:\n \nJohn Doe\n,\n\n        \ngoogle_user_id\n:\n \nnull\n,\n\n        \nid\n:\n \n4953\n,\n\n        \ninfo\n:\n \n{\n\n            \ncontainer\n:\n \nuser_4953\n\n        \n},\n\n        \nn_answers\n:\n \n56\n,\n\n        \nname\n:\n \nJohnDoe\n,\n\n        \nrank\n:\n \n1813\n,\n\n        \nregistered_ago\n:\n \n2 years ago\n,\n\n        \nscore\n:\n \n56\n,\n\n        \ntotal\n:\n \n10046\n,\n\n        \ntwitter_user_id\n:\n \nnull\n,\n\n        \nvalid_email\n:\n \ntrue\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nAccount profile\n\n\n**Endpoint: /account/profile\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIf logged in you will get the same information as on\n/account/\nname\n (see above). If you are not logged in you will get\nthe following example output\n\n\nExample output\n\n\n1\n2\n3\n4\n{\n\n  \nnext\n:\n \n/account/signin\n,\n\n  \nstatus\n:\n \nnot_signed_in\n\n\n}\n\n\n\n\n\n\n\nAccount projects\n\n\nEndpoint: /account/\nname\n/projects\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nThe user needs to be logged in. It returns a JSON object with the\nfollowing information:\n\n\n\n\nprojects_draft\n: a list of draft projects of the user.\n\n\nprojects_published\n: a list of published projects of the user.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: The title for the view.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n{\n\n  \nprojects_draft\n:\n \n[\n\n    \n{\n\n      \ndescription\n:\n \nThis should be the Youtube Project\n,\n\n      \nid\n:\n \n3169\n,\n\n      \ninfo\n:\n \n{\n\n        \ntask_presenter\n:\n \n...\n\n      \n},\n\n      \nn_tasks\n:\n \n0\n,\n\n      \nn_volunteers\n:\n \n0\n,\n\n      \nname\n:\n \nYoutube_Test1\n,\n\n      \noverall_progress\n:\n \n0\n,\n\n      \nowner_id\n:\n \n4953\n,\n\n      \nshort_name\n:\n \nyoutube_test1\n\n    \n},\n\n    \n...\n\n  \n],\n\n  \nprojects_published\n:\n \n[\n\n    \n{\n\n      \ndescription\n:\n \nYoutube 1\n,\n\n      \nid\n:\n \n3206\n,\n\n      \ninfo\n:\n \n{\n\n        \nresults\n:\n \n,\n\n        \ntask_presenter\n:\n \n..\n\n        \ntutorial\n:\n \n\n      \n},\n\n      \nn_tasks\n:\n \n15\n,\n\n      \nn_volunteers\n:\n \n0\n,\n\n      \nname\n:\n \nYoutube 1\n,\n\n      \noverall_progress\n:\n \n0\n,\n\n      \nowner_id\n:\n \n4953\n,\n\n      \nshort_name\n:\n \nyoutube1\n\n    \n},\n\n    \n...\n\n  \n],\n\n  \ntemplate\n:\n \naccount/projects.html\n,\n\n  \ntitle\n:\n \nProjects\n\n\n}\n\n\n\n\n\n\n\nAccount update profile\n\n\nEndpoint: /account/\nname\n/update\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nform\n: the form fields that need to be sent for updating account.\n    It contains the csrf token for validating the post, as well as an\n    errors field in case that something is wrong.\n\n\npassword_form\n: the form fields that need to be sent for\n    updating the account\ns password. It contains the csrf token for\n    validating the post, as well as an errors field in case that\n    something is wrong.\n\n\nupload_form\n: the form fields that need to be sent for updating\n    the account\ns avatar. It contains the csrf token for validating the\n    post, as well as an errors field in case that something is wrong.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: The title for the view.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n{\n\n  \nflash\n:\n \nnull\n,\n\n  \nform\n:\n \n{\n\n    \nckan_api\n:\n \nnull\n,\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \nemail_addr\n:\n \nemail@emai.com\n,\n\n    \nerrors\n:\n \n{},\n\n    \nfullname\n:\n \nJohn Doe\n,\n\n    \nid\n:\n \n0\n,\n\n    \nlocale\n:\n \nen\n,\n\n    \nname\n:\n \njohndoe\n,\n\n    \nprivacy_mode\n:\n \ntrue\n,\n\n    \nsubscribed\n:\n \ntrue\n\n  \n},\n\n  \npassword_form\n:\n \n{\n\n    \nconfirm\n:\n \nnull\n,\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \ncurrent_password\n:\n \nnull\n,\n\n    \nerrors\n:\n \n{},\n\n    \nnew_password\n:\n \nnull\n\n  \n},\n\n  \nshow_passwd_form\n:\n \ntrue\n,\n\n  \ntemplate\n:\n \n/account/update.html\n,\n\n  \ntitle\n:\n \nUpdate your profile: John Doe\n,\n\n  \nupload_form\n:\n \n{\n\n    \navatar\n:\n \nnull\n,\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \nerrors\n:\n \n{},\n\n    \nid\n:\n \nnull\n,\n\n    \nx1\n:\n \n0\n,\n\n    \nx2\n:\n \n0\n,\n\n    \ny1\n:\n \n0\n,\n\n    \ny2\n:\n \n0\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nAs this endpoint supports \nthree\n different forms, you must specify\nwhich form are you targeting adding an extra key: \nbtn\n. The options\nfor this key are:\n\n\n\n\nProfile\n: to update the \nform\n. \nUpload\n: to update the\n    \nupload_form\n. \nPassword\n: to update the \npassword_form\n.\n    \nExternal\n: to update the \nform\n but only the external services.\n\n\n\n\n\n\nNote\n\n\nBe sure to respect the Uppercase in the first letter, otherwise it will\nfail.\n\n\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nflash\n: A success message, or error indicating if the request was\n    successful.\n\n\nform\n: the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \nflash\n:\n \nYour profile has been updated!\n,\n\n  \nnext\n:\n \n/account/pruebaadfadfa/update\n,\n\n  \nstatus\n:\n \nsuccess\n\n\n}\n\n\n\n\n\n\n\nIf there\ns an error in the form fields, you will get them in the\nform.errors\n key:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n{\n\n  \nflash\n:\n \nPlease correct the errors\n,\n\n  \nform\n:\n \n{\n\n    \nckan_api\n:\n \nnull\n,\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \nemail_addr\n:\n \npruebaprueba.com\n,\n\n    \nerrors\n:\n \n{\n\n      \nemail_addr\n:\n \n[\n\n        \nInvalid email address.\n\n      \n]\n\n    \n},\n\n    \nfullname\n:\n \nprueba de json\n,\n\n    \nid\n:\n \n0\n,\n\n    \nlocale\n:\n \nes\n,\n\n    \nname\n:\n \npruebaadfadfa\n,\n\n    \nprivacy_mode\n:\n \ntrue\n,\n\n    \nsubscribed\n:\n \ntrue\n\n  \n},\n\n  \npassword_form\n:\n \n{\n\n    \nconfirm\n:\n \n,\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \ncurrent_password\n:\n \n,\n\n    \nerrors\n:\n \n{},\n\n    \nnew_password\n:\n \n\n  \n},\n\n  \nshow_passwd_form\n:\n \ntrue\n,\n\n  \ntemplate\n:\n \n/account/update.html\n,\n\n  \ntitle\n:\n \nUpdate your profile: John Doe\n,\n\n  \nupload_form\n:\n \n{\n\n    \navatar\n:\n \n,\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \nerrors\n:\n \n{},\n\n    \nid\n:\n \n0\n,\n\n    \nx1\n:\n \n0\n,\n\n    \nx2\n:\n \n0\n,\n\n    \ny1\n:\n \n0\n,\n\n    \ny2\n:\n \n0\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nNote\n\n\nFor updating the avatar is very important to not set the \nContent-Type\n. If you\nare using jQuery, set it to False, so the file is handled properly. To still\nrecieve a JSON response you can add the response_format=json query\nparamater to your request.\n\n\nThe (x1,x2,y1,y2) are the coordinates for cutting the image and create\nthe avatar.\n\n\n(x1,y1) are the offset left of the cropped area and the offset top of\nthe cropped area respectively; and (x2,y2) are the width and height of\nthe crop.\n\n\n\n\nAccount reset password\n\n\nEndpoint: /account/reset-password\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nRequired arguments\n: \nkey\n a string required to validate the link for\nupdating the password of the user. This key is sent to the user via\nemail after requesting to reset the password.\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nform\n: the form fields that need to be sent for updating account.\n    It contains the csrf token for validating the post, as well as an\n    errors field in case that something is wrong.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n{\n\n  \nform\n:\n \n{\n\n    \nconfirm\n:\n \nnull\n,\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \ncurrent_password\n:\n \nnull\n,\n\n    \nerrors\n:\n \n{},\n\n    \nnew_password\n:\n \nnull\n\n  \n},\n\n  \ntemplate\n:\n \n/account/password_reset.html\n\n\n\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nflash\n: A success message, or error indicating if the request was\n    succesful.\n\n\nstatus\n: A status message, indicating if something went wrong.\n\n\nnext\n: Suggested URL to redirect the user.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n    \nstatus\n:\n \nsuccess\n,\n\n    \nflash\n:\n \nYou reset your password successfully!\n,\n\n    \nnext\n:\n \n/\n\n\n}\n\n\n\n\n\n\n\nAccount reset API Key\n\n\nEndpoint: /account/\nuser\n/resetapikey\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\ncsrf\n: The CSRF token for validating the post.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n6\n{\n\n    \nform\n:\n\n        \n{\n\n            \ncsrf\n:\n \ntoken\n,\n\n        \n}\n\n\n}\n\n\n\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nflash\n: A success message, or error indicating if the request was\n    succesful.\n\n\nstatus\n: A status message, indicating if something went wrong.\n\n\nnext\n: Suggested URL to redirect the user.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n    \nstatus\n:\n \nsuccess\n,\n\n    \nflash\n:\n \nNew API-KEY generated\n,\n\n    \nnext\n:\n \n/account/\nuser\n\n\n}\n\n\n\n\n\n\n\nAccount subscribe to newsletter\n\n\n**Endpoint: /account/newsletter\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\ntemplate\n: The template that Jinja2 will render.\n\n\ntitle\n: The title of the endpoint.\n\n\nnext\n: The next URL.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n    \ntemplate\n:\n \naccount/newsletter.html\n,\n\n    \ntitle\n:\n \nSubscribe to our Newsletter\n,\n\n    \nnext\n:\n \n/\n\n\n}\n\n\n\n\n\n\n\nIf you want to subscribe a user, then you have to call the same endpoint\nwith the following argument: \nsubscribe=true\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n    \nflash\n:\n \nYou are subscribed to our newsletter\n,\n\n    \nstatus\n:\n \nsuccess\n,\n\n    \nnext\n:\n \n/\n\n\n}\n\n\n\n\n\n\n\nAccount confirm email\n\n\nEndpoint: /account/confirm-email\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIf account validation is enabled, then, using this endpoint the user\nwill receive an email to validate its account. It returns a JSON object\nwith the following information:\n\n\n\n\nflash\n: A message stating that an email has been sent.\n\n\nstatus\n: The status of the call.\n\n\nnext\n: The next url.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n    \nflash\n:\n \nAne\n \nemail\n \nhas\n \nbeen\n \nsent\n \nto\n \nvalidate\n \nyour\n \ne-mail\n \naddress.\n,\n\n    \nstatus\n:\n \ninfo\n,\n\n    \nnext\n:\n \n/account/\nusername\n/\n\n\n}\n\n\n\n\n\n\n\nAccount delete\n\n\nEndpoint: /account/\n/delete\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIf you send a GET request to this endpoint, PYBOSSA will enequeue a job to delete the user account.\n\n\n\n\nNote\n\n\nYou should build a confirmation check before hitting this enpoint, as this action cannot be undone.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n{\n\n    \ntemplate\n:\n \nNone\n\n    \njob\n:\n \nenqueued\n\n\n}\n\n\n\n\n\n\n\nAccount export\n\n\nEndpoint: /account/\n/export\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIf you send a GET request to this endpoint, PYBOSSA will enequeue a job to create zip files for the \n with his/her personal data.\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n    \nflash\n:\n \nGDPR export started\n,\n\n    \nnext\n:\n \n/account/user2/\n,\n\n    \nstatus\n:\n \nsuccess\n\n\n}", 
            "title": "Account"
        }, 
        {
            "location": "/api/user/account/#account-index", 
            "text": "Endpoint: /account/page/ int:page  Allowed methods :  GET  GET  It returns a JSON object with the following information:   accounts : this key holds the list of accounts for the given\n    page.  pagination : this key holds the pagination information.  top_users : this key holds the top users (including the user if\n    authenticated) with their rank and scores.  update_feed : the latest actions in the server (users created,\n    contributions, new tasks, etc.).  template : the Jinja2 template that should be rendered in case of\n    text/html.  title : the title for the endpoint.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45 { \n   accounts :   [ \n     { \n       created :   2015-06-10T15:02:38.411497 , \n       fullname :   Scifabric , \n       info :   { \n         avatar :   avatar.png , \n         container :   user_234234dd3 \n       }, \n       locale :   null , \n       name :   Scifabric , \n       rank :   null , \n       registered_ago :   1 year ago , \n       score :   null , \n       task_runs :   3 \n     }, \n   ], \n   pagination :   { \n     next :   true , \n     page :   3 , \n     per_page :   24 , \n     prev :   true , \n     total :   11121 \n   }, \n   template :   account/index.html , \n   title :   Community , \n   top_users :   [ \n     { \n       created :   2014-08-17T18:28:56.738119 , \n       fullname :   Buzz Bot , \n       info :   { \n         avatar :   avatar.png , \n         container :   user_55 \n       }, \n       locale :   null , \n       name :   buzzbot , \n       rank :   1 , \n       registered_ago :   null , \n       score :   54247 , \n       task_runs :   null \n     }, \n   ], \n   total :   11121 , \n   update_feed :   []  }", 
            "title": "Account index"
        }, 
        {
            "location": "/api/user/account/#account-registration", 
            "text": "Endpoint: /account/register  Allowed methods :  GET/POST  GET  It returns a JSON object with the following information:   form : The form fields that need to be sent for creating an\n    account. It contains the CSRF token for validating the POST, as well\n    as an errors field in case that something is wrong.  template : The Jinja2 template that could be rendered.  title : the title of the page.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 { \n   form :   { \n     confirm :   null , \n     csrf :   token, \n     email_addr :   null , \n     errors :   {}, \n     fullname :   null , \n     name :   null , \n     password :   null \n   }, \n   template :   account/register.html , \n   title :   Register  }    POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  It returns a JSON object with the following information:   next : URL that you JavaScript can follow as a redirect. It is\n    not mandatory.   Example output  1\n2\n3 { \n     next : /about  }    If there s an error in the form fields, you will get them in the form.errors  key:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 { \n   form :   { \n     confirm :   daniel , \n     csrf :   token , \n     email_addr :   daniel , \n     errors :   { \n       email_addr :   [ \n         Invalid email address. \n       ], \n       name :   [ \n         The user name is already taken \n       ] \n     }, \n     fullname :   daniel , \n     name :   daniel , \n     password :   daniel \n   }, \n   template :   account/register.html , \n   title :   Register  }    If email confirmation is required for registering you will get this\naccount validation result when all input data is correct. Note: Keep in\nmind that account is not created fully until the user confirmed his\nemail.  1\n2\n3\n4\n5 { \n   status :   sent , \n   template :   account/account_validation.html , \n   title :   Account validation  }", 
            "title": "Account registration"
        }, 
        {
            "location": "/api/user/account/#account-sign-in", 
            "text": "Endpoint: /account/signin  Allowed methods :  GET/POST  GET  It returns a JSON object with the following information:   form : the form fields that need to be sent for signing a user.\n    It contains the csrf token for validating the post, as well as an\n    errors field in case that something is wrong.  template : The Jinja2 template that could be rendered.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 { \n   form :   { \n     csrf :   token , \n     email :   null , \n     errors :   {}, \n     password :   null \n   }, \n   next :   null , \n   template :   account/signin.html , \n   title :   Sign in  }    POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  It returns a JSON object with the following information:   flash : A success message, or error indicating if the request was\n    successful.  form : the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 { \n   auth :   { \n     facebook :   true , \n     google :   true , \n     twitter :   true \n   }, \n   flash :   Please correct the errors , \n   form :   { \n     csrf :   token , \n     email :   prueba@prueba.com , \n     errors :   { \n       password :   [ \n         You must provide a password \n       ] \n     }, \n     password :   \n   }, \n   next :   null , \n   status :   error , \n   template :   account/signin.html , \n   title :   Sign in  }    If the login is successful, then, you will get something like this:  1\n2\n3\n4\n5 { \n   flash :   Welcome back John Doe , \n   next :   / , \n   status :   success  }", 
            "title": "Account sign in"
        }, 
        {
            "location": "/api/user/account/#account-sign-out", 
            "text": "Endpoint: /account/signout  Allowed methods :  GET  It returns a JSON object with the following information:   next : suggested redirection after the sign out.  message : message displaying success for sign out.", 
            "title": "Account sign out"
        }, 
        {
            "location": "/api/user/account/#account-recover-password", 
            "text": "Endpoint: /account/forgot-password  Allowed methods :  GET/POST  GET  It returns a JSON object with the following information:   form : the form fields that need to be sent for creating an\n    account. It contains the csrf token for validating the post, as well\n    as an errors field in case that something is wrong.  template : The Jinja2 template that could be rendered.   Example output  1\n2\n3\n4\n5\n6\n7 { \n   form :   { \n     csrf :   token, \n     email_addr :   null \n   }, \n   template :   account/password_forgot.html  }    POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  It returns a JSON object with the following information:   flash : A success message, or error indicating if the request was\n    succesful.  form : the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 { \n   flash :   [ \n     We don t have this email in our records. \n   ], \n   form :   { \n     csrf :   1483549683.06##cc1c7ff101b2a14a89cac5462e5028e6235ddb31 , \n     email_addr :   algo@algo.com , \n     errors :   {} \n   }, \n   template :   /account/password_forgot.html  }    If there s an error in the form fields, you will get them in the form.errors  key:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 { \n   flash :   Something went wrong, please correct the errors on the form , \n   form :   { \n     csrf :   1483552042.97##f0e36b1b113934532ff9c8003b120365ff45f5e4 , \n     email_addr :   algoom , \n     errors :   { \n       email_addr :   [ \n         Invalid email address. \n       ] \n     } \n   }, \n   template :   /account/password_forgot.html  }", 
            "title": "Account recover password"
        }, 
        {
            "location": "/api/user/account/#account-name", 
            "text": "**Endpoint: /account/ name  Allowed methods :  GET  GET  It returns a JSON object with the following information:   projects_contrib : a list of projects the user has contributed\n    too.  template : The Jinja2 template that could be rendered.  title : The title for the view.  user : User information, including fullname, rank etc.   Example output  If you are not logged in or requesting details of another user you will\nonly get public viewable information. If you are logged in you will also\nget private information in the user field. Sample output of public\ninformation:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42 { \n     projects_contrib :   [ \n         { \n             description :   this is a project , \n             info :   { \n                 container :   123 , \n                 thumbnail :   thumbnailx \n             }, \n             n_tasks :   4 , \n             n_volunteers :   0 , \n             name :   test12334 , \n             overall_progress :   0 , \n             short_name :   test12334 \n         } \n     ], \n     projects_created :   [ \n         { \n             description :   Youtube 1 , \n             info :   { \n                 container :   345 , \n                 thumbnail :   thumbnaily \n             }, \n             n_tasks :   15 , \n             n_volunteers :   0 , \n             name :   JohnDoe Youtube 1 , \n             overall_progress :   0 , \n             short_name :   johnyoutube1 \n         }, \n     ] \n     template :   /account/public_profile.html , \n     title :   John  middot; User Profile , \n     user :   { \n         fullname :   Joen Doe , \n         info :   { \n             container :   user_4953 \n         }, \n         n_answers :   56 , \n         name :   JohnDoe , \n         rank :   1813 , \n         score :   56 \n     }  }    Example of logged in user:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 { \n     ... \n     user :   { \n         admin :   false , \n         api_key :   aa3ee485-896d-488a-83f7-88a29bf45171 , \n         confirmation_email_sent :   false , \n         created :   2014-08-11T08:59:32.079599 , \n         email_addr :   johndoe@johndoe.com , \n         facebook_user_id :   null , \n         fullname :   John Doe , \n         google_user_id :   null , \n         id :   4953 , \n         info :   { \n             container :   user_4953 \n         }, \n         n_answers :   56 , \n         name :   JohnDoe , \n         rank :   1813 , \n         registered_ago :   2 years ago , \n         score :   56 , \n         total :   10046 , \n         twitter_user_id :   null , \n         valid_email :   true \n     }  }", 
            "title": "Account name"
        }, 
        {
            "location": "/api/user/account/#account-profile", 
            "text": "**Endpoint: /account/profile  Allowed methods :  GET  GET  If logged in you will get the same information as on\n/account/ name  (see above). If you are not logged in you will get\nthe following example output  Example output  1\n2\n3\n4 { \n   next :   /account/signin , \n   status :   not_signed_in  }", 
            "title": "Account profile"
        }, 
        {
            "location": "/api/user/account/#account-projects", 
            "text": "Endpoint: /account/ name /projects  Allowed methods :  GET  GET  The user needs to be logged in. It returns a JSON object with the\nfollowing information:   projects_draft : a list of draft projects of the user.  projects_published : a list of published projects of the user.  template : The Jinja2 template that could be rendered.  title : The title for the view.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38 { \n   projects_draft :   [ \n     { \n       description :   This should be the Youtube Project , \n       id :   3169 , \n       info :   { \n         task_presenter :   ... \n       }, \n       n_tasks :   0 , \n       n_volunteers :   0 , \n       name :   Youtube_Test1 , \n       overall_progress :   0 , \n       owner_id :   4953 , \n       short_name :   youtube_test1 \n     }, \n     ... \n   ], \n   projects_published :   [ \n     { \n       description :   Youtube 1 , \n       id :   3206 , \n       info :   { \n         results :   , \n         task_presenter :   .. \n         tutorial :   \n       }, \n       n_tasks :   15 , \n       n_volunteers :   0 , \n       name :   Youtube 1 , \n       overall_progress :   0 , \n       owner_id :   4953 , \n       short_name :   youtube1 \n     }, \n     ... \n   ], \n   template :   account/projects.html , \n   title :   Projects  }", 
            "title": "Account projects"
        }, 
        {
            "location": "/api/user/account/#account-update-profile", 
            "text": "Endpoint: /account/ name /update  Allowed methods :  GET/POST  GET  It returns a JSON object with the following information:   form : the form fields that need to be sent for updating account.\n    It contains the csrf token for validating the post, as well as an\n    errors field in case that something is wrong.  password_form : the form fields that need to be sent for\n    updating the account s password. It contains the csrf token for\n    validating the post, as well as an errors field in case that\n    something is wrong.  upload_form : the form fields that need to be sent for updating\n    the account s avatar. It contains the csrf token for validating the\n    post, as well as an errors field in case that something is wrong.  template : The Jinja2 template that could be rendered.  title : The title for the view.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35 { \n   flash :   null , \n   form :   { \n     ckan_api :   null , \n     csrf :   token , \n     email_addr :   email@emai.com , \n     errors :   {}, \n     fullname :   John Doe , \n     id :   0 , \n     locale :   en , \n     name :   johndoe , \n     privacy_mode :   true , \n     subscribed :   true \n   }, \n   password_form :   { \n     confirm :   null , \n     csrf :   token , \n     current_password :   null , \n     errors :   {}, \n     new_password :   null \n   }, \n   show_passwd_form :   true , \n   template :   /account/update.html , \n   title :   Update your profile: John Doe , \n   upload_form :   { \n     avatar :   null , \n     csrf :   token , \n     errors :   {}, \n     id :   null , \n     x1 :   0 , \n     x2 :   0 , \n     y1 :   0 , \n     y2 :   0 \n   }  }    POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  As this endpoint supports  three  different forms, you must specify\nwhich form are you targeting adding an extra key:  btn . The options\nfor this key are:   Profile : to update the  form .  Upload : to update the\n     upload_form .  Password : to update the  password_form .\n     External : to update the  form  but only the external services.    Note  Be sure to respect the Uppercase in the first letter, otherwise it will\nfail.   It returns a JSON object with the following information:   flash : A success message, or error indicating if the request was\n    successful.  form : the form fields with the sent information. It contains the\n    csrf token for validating the post, as well as an errors field in\n    case that something is wrong.   Example output  1\n2\n3\n4\n5 { \n   flash :   Your profile has been updated! , \n   next :   /account/pruebaadfadfa/update , \n   status :   success  }    If there s an error in the form fields, you will get them in the form.errors  key:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39 { \n   flash :   Please correct the errors , \n   form :   { \n     ckan_api :   null , \n     csrf :   token , \n     email_addr :   pruebaprueba.com , \n     errors :   { \n       email_addr :   [ \n         Invalid email address. \n       ] \n     }, \n     fullname :   prueba de json , \n     id :   0 , \n     locale :   es , \n     name :   pruebaadfadfa , \n     privacy_mode :   true , \n     subscribed :   true \n   }, \n   password_form :   { \n     confirm :   , \n     csrf :   token , \n     current_password :   , \n     errors :   {}, \n     new_password :   \n   }, \n   show_passwd_form :   true , \n   template :   /account/update.html , \n   title :   Update your profile: John Doe , \n   upload_form :   { \n     avatar :   , \n     csrf :   token , \n     errors :   {}, \n     id :   0 , \n     x1 :   0 , \n     x2 :   0 , \n     y1 :   0 , \n     y2 :   0 \n   }  }     Note  For updating the avatar is very important to not set the  Content-Type . If you\nare using jQuery, set it to False, so the file is handled properly. To still\nrecieve a JSON response you can add the response_format=json query\nparamater to your request.  The (x1,x2,y1,y2) are the coordinates for cutting the image and create\nthe avatar.  (x1,y1) are the offset left of the cropped area and the offset top of\nthe cropped area respectively; and (x2,y2) are the width and height of\nthe crop.", 
            "title": "Account update profile"
        }, 
        {
            "location": "/api/user/account/#account-reset-password", 
            "text": "Endpoint: /account/reset-password  Allowed methods :  GET/POST  GET  Required arguments :  key  a string required to validate the link for\nupdating the password of the user. This key is sent to the user via\nemail after requesting to reset the password.  It returns a JSON object with the following information:   form : the form fields that need to be sent for updating account.\n    It contains the csrf token for validating the post, as well as an\n    errors field in case that something is wrong.  template : The Jinja2 template that could be rendered.   Example output  1\n2\n3\n4\n5\n6\n7\n8\n9 { \n   form :   { \n     confirm :   null , \n     csrf :   token , \n     current_password :   null , \n     errors :   {}, \n     new_password :   null \n   }, \n   template :   /account/password_reset.html    POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  It returns a JSON object with the following information:   flash : A success message, or error indicating if the request was\n    succesful.  status : A status message, indicating if something went wrong.  next : Suggested URL to redirect the user.   Example output  1\n2\n3\n4\n5 { \n     status :   success , \n     flash :   You reset your password successfully! , \n     next :   /  }", 
            "title": "Account reset password"
        }, 
        {
            "location": "/api/user/account/#account-reset-api-key", 
            "text": "Endpoint: /account/ user /resetapikey  Allowed methods :  GET/POST  GET  It returns a JSON object with the following information:   csrf : The CSRF token for validating the post.   Example output  1\n2\n3\n4\n5\n6 { \n     form : \n         { \n             csrf :   token , \n         }  }    POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  It returns a JSON object with the following information:   flash : A success message, or error indicating if the request was\n    succesful.  status : A status message, indicating if something went wrong.  next : Suggested URL to redirect the user.   Example output  1\n2\n3\n4\n5 { \n     status :   success , \n     flash :   New API-KEY generated , \n     next :   /account/ user  }", 
            "title": "Account reset API Key"
        }, 
        {
            "location": "/api/user/account/#account-subscribe-to-newsletter", 
            "text": "**Endpoint: /account/newsletter  Allowed methods :  GET  GET  It returns a JSON object with the following information:   template : The template that Jinja2 will render.  title : The title of the endpoint.  next : The next URL.   Example output  1\n2\n3\n4\n5 { \n     template :   account/newsletter.html , \n     title :   Subscribe to our Newsletter , \n     next :   /  }    If you want to subscribe a user, then you have to call the same endpoint\nwith the following argument:  subscribe=true  Example output  1\n2\n3\n4\n5 { \n     flash :   You are subscribed to our newsletter , \n     status :   success , \n     next :   /  }", 
            "title": "Account subscribe to newsletter"
        }, 
        {
            "location": "/api/user/account/#account-confirm-email", 
            "text": "Endpoint: /account/confirm-email  Allowed methods :  GET  GET  If account validation is enabled, then, using this endpoint the user\nwill receive an email to validate its account. It returns a JSON object\nwith the following information:   flash : A message stating that an email has been sent.  status : The status of the call.  next : The next url.   Example output  1\n2\n3\n4\n5 { \n     flash :   Ane   email   has   been   sent   to   validate   your   e-mail   address. , \n     status :   info , \n     next :   /account/ username /  }", 
            "title": "Account confirm email"
        }, 
        {
            "location": "/api/user/account/#account-delete", 
            "text": "Endpoint: /account/ /delete  Allowed methods :  GET  GET  If you send a GET request to this endpoint, PYBOSSA will enequeue a job to delete the user account.   Note  You should build a confirmation check before hitting this enpoint, as this action cannot be undone.   Example output  1\n2\n3\n4 { \n     template :   None \n     job :   enqueued  }", 
            "title": "Account delete"
        }, 
        {
            "location": "/api/user/account/#account-export", 
            "text": "Endpoint: /account/ /export  Allowed methods :  GET  GET  If you send a GET request to this endpoint, PYBOSSA will enequeue a job to create zip files for the   with his/her personal data.  Example output  1\n2\n3\n4\n5 { \n     flash :   GDPR export started , \n     next :   /account/user2/ , \n     status :   success  }", 
            "title": "Account export"
        }, 
        {
            "location": "/api/user/admin/", 
            "text": "Admin users\n\n\nEndpoint: /admin/users\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nform\n: A form for searching for users.\n\n\nfound\n: A list of found users according to a search.\n\n\ntemplate\n: Jinja2 template.\n\n\nusers\n: List of admin users.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n{\n\n  \nform\n:\n \n{\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \nerrors\n:\n \n{},\n\n    \nuser\n:\n \nnull\n\n  \n},\n\n  \nfound\n:\n \n[],\n\n  \ntemplate\n:\n \n/admin/users.html\n,\n\n  \ntitle\n:\n \nManage Admin Users\n,\n\n  \nusers\n:\n \n[\n\n    \n{\n\n      \nadmin\n:\n \ntrue\n,\n\n      \napi_key\n:\n \nkey\n,\n\n      \ncategory\n:\n \nnull\n,\n\n      \nckan_api\n:\n \nnull\n,\n\n      \nconfirmation_email_sent\n:\n \nfalse\n,\n\n      \ncreated\n:\n \ndate\n,\n\n      \nemail_addr\n:\n \nemail\n,\n\n      \nfacebook_user_id\n:\n \nnull\n,\n\n      \nflags\n:\n \nnull\n,\n\n      \nfullname\n:\n \nJohn Doe\n,\n\n      \ngoogle_user_id\n:\n \nnull\n,\n\n      \nid\n:\n \n1\n,\n\n      \ninfo\n:\n \n{\n\n        \navatar\n:\n \navatar.png\n,\n\n        \ncontainer\n:\n \nuser_1\n\n      \n},\n\n      \nlocale\n:\n \nen\n,\n\n      \nname\n:\n \njohndoe\n,\n\n      \nnewsletter_prompted\n:\n \nfalse\n,\n\n      \npasswd_hash\n:\n \nhash\n,\n\n      \nprivacy_mode\n:\n \ntrue\n,\n\n      \npro\n:\n \nfalse\n,\n\n      \nsubscribed\n:\n \ntrue\n,\n\n      \ntwitter_user_id\n:\n \nnull\n,\n\n      \nvalid_email\n:\n \ntrue\n\n    \n},\n\n  \n]\n\n\n}\n\n\n\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nIt returns a JSON object with the following information:\n\n\n\n\nform\n: A form with the submitted search.\n\n\nfound\n: A list of found users according to a search.\n\n\ntemplate\n: Jinja2 template.\n\n\nusers\n: List of admin users.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n{\n\n  \nform\n:\n \n{\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \nerrors\n:\n \n{},\n\n    \nuser\n:\n \njanedoe\n,\n\n  \n},\n\n  \nfound\n:\n \n[\n\n        \n{\n\n          \nadmin\n:\n \nfalse\n,\n\n          \napi_key\n:\n \nkey\n,\n\n          \ncategory\n:\n \nnull\n,\n\n          \nckan_api\n:\n \nnull\n,\n\n          \nconfirmation_email_sent\n:\n \nfalse\n,\n\n          \ncreated\n:\n \ndate\n,\n\n          \nemail_addr\n:\n \nemail\n,\n\n          \nfacebook_user_id\n:\n \nnull\n,\n\n          \nflags\n:\n \nnull\n,\n\n          \nfullname\n:\n \njanedoe\n,\n\n          \ngoogle_user_id\n:\n \nnull\n,\n\n          \nid\n:\n \n80\n,\n\n          \ninfo\n:\n \n{},\n\n          \nlocale\n:\n \nen\n,\n\n          \nname\n:\n \njanedoe\n,\n\n          \nnewsletter_prompted\n:\n \nfalse\n,\n\n          \npasswd_hash\n:\n \nhash\n,\n\n          \nprivacy_mode\n:\n \ntrue\n,\n\n          \npro\n:\n \nfalse\n,\n\n          \nsubscribed\n:\n \ntrue\n,\n\n          \ntwitter_user_id\n:\n \nnull\n,\n\n          \nvalid_email\n:\n \ntrue\n\n        \n},\n\n  \n],\n\n  \ntemplate\n:\n \n/admin/users.html\n,\n\n  \ntitle\n:\n \nManage Admin Users\n,\n\n  \nusers\n:\n \n[\n\n    \n{\n\n      \nadmin\n:\n \ntrue\n,\n\n      \napi_key\n:\n \nkey\n,\n\n      \ncategory\n:\n \nnull\n,\n\n      \nckan_api\n:\n \nnull\n,\n\n      \nconfirmation_email_sent\n:\n \nfalse\n,\n\n      \ncreated\n:\n \ndate\n,\n\n      \nemail_addr\n:\n \nemail\n,\n\n      \nflags\n:\n \nnull\n,\n\n      \nfullname\n:\n \nJohn Doe\n,\n\n      \nid\n:\n \n1\n,\n\n      \ninfo\n:\n \n{\n\n        \navatar\n:\n \navatar.png\n,\n\n        \ncontainer\n:\n \nuser_1\n\n      \n},\n\n      \nlocale\n:\n \nen\n,\n\n      \nname\n:\n \njohndoe\n,\n\n      \nnewsletter_prompted\n:\n \nfalse\n,\n\n      \npasswd_hash\n:\n \nhash\n,\n\n      \nprivacy_mode\n:\n \ntrue\n,\n\n      \npro\n:\n \nfalse\n,\n\n      \nsubscribed\n:\n \ntrue\n,\n\n      \nvalid_email\n:\n \ntrue\n\n    \n},\n\n  \n]\n\n  \n}\n\n\n\n\n\n\n\nAdmin users add\n\n\nEndpoint: /admin/users/add/\nint:user_id\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIt adds a user to the admin group. It returns a JSON object with the\nfollowing information:\n\n\n\n\nnext\n: \n/admin/users\n,\n\n\n\n\nExample output\n\n\n1\n2\n3\n{\n\n  \nnext\n:\n \n/admin/users\n,\n\n\n}\n\n\n\n\n\n\n\n\n\nNote\n\n\nYou will need to use the /admin/users endpoint to get a list of users\nfor adding deleting from the admin group.\n\n\n\n\nAdmin users del\n\n\nEndpoint: /admin/users/del/\nint:user_id\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIt removes a user from the admin group. It returns a JSON object with\nthe following information:\n\n\n\n\nnext\n: \n/admin/users\n,\n\n\n\n\nExample output\n\n\n1\n2\n3\n{\n\n  \nnext\n:\n \n/admin/users\n,\n\n\n}\n\n\n\n\n\n\n\n\n\nNote\n\n\nYou will need to use the /admin/users endpoint to get a list of users\nfor adding deleting from the admin group.", 
            "title": "Admins"
        }, 
        {
            "location": "/api/user/admin/#admin-users", 
            "text": "Endpoint: /admin/users  Allowed methods :  GET/POST  GET  It returns a JSON object with the following information:   form : A form for searching for users.  found : A list of found users according to a search.  template : Jinja2 template.  users : List of admin users.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39 { \n   form :   { \n     csrf :   token , \n     errors :   {}, \n     user :   null \n   }, \n   found :   [], \n   template :   /admin/users.html , \n   title :   Manage Admin Users , \n   users :   [ \n     { \n       admin :   true , \n       api_key :   key , \n       category :   null , \n       ckan_api :   null , \n       confirmation_email_sent :   false , \n       created :   date , \n       email_addr :   email , \n       facebook_user_id :   null , \n       flags :   null , \n       fullname :   John Doe , \n       google_user_id :   null , \n       id :   1 , \n       info :   { \n         avatar :   avatar.png , \n         container :   user_1 \n       }, \n       locale :   en , \n       name :   johndoe , \n       newsletter_prompted :   false , \n       passwd_hash :   hash , \n       privacy_mode :   true , \n       pro :   false , \n       subscribed :   true , \n       twitter_user_id :   null , \n       valid_email :   true \n     }, \n   ]  }    POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  It returns a JSON object with the following information:   form : A form with the submitted search.  found : A list of found users according to a search.  template : Jinja2 template.  users : List of admin users.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61 { \n   form :   { \n     csrf :   token , \n     errors :   {}, \n     user :   janedoe , \n   }, \n   found :   [ \n         { \n           admin :   false , \n           api_key :   key , \n           category :   null , \n           ckan_api :   null , \n           confirmation_email_sent :   false , \n           created :   date , \n           email_addr :   email , \n           facebook_user_id :   null , \n           flags :   null , \n           fullname :   janedoe , \n           google_user_id :   null , \n           id :   80 , \n           info :   {}, \n           locale :   en , \n           name :   janedoe , \n           newsletter_prompted :   false , \n           passwd_hash :   hash , \n           privacy_mode :   true , \n           pro :   false , \n           subscribed :   true , \n           twitter_user_id :   null , \n           valid_email :   true \n         }, \n   ], \n   template :   /admin/users.html , \n   title :   Manage Admin Users , \n   users :   [ \n     { \n       admin :   true , \n       api_key :   key , \n       category :   null , \n       ckan_api :   null , \n       confirmation_email_sent :   false , \n       created :   date , \n       email_addr :   email , \n       flags :   null , \n       fullname :   John Doe , \n       id :   1 , \n       info :   { \n         avatar :   avatar.png , \n         container :   user_1 \n       }, \n       locale :   en , \n       name :   johndoe , \n       newsletter_prompted :   false , \n       passwd_hash :   hash , \n       privacy_mode :   true , \n       pro :   false , \n       subscribed :   true , \n       valid_email :   true \n     }, \n   ] \n   }", 
            "title": "Admin users"
        }, 
        {
            "location": "/api/user/admin/#admin-users-add", 
            "text": "Endpoint: /admin/users/add/ int:user_id  Allowed methods :  GET  GET  It adds a user to the admin group. It returns a JSON object with the\nfollowing information:   next :  /admin/users ,   Example output  1\n2\n3 { \n   next :   /admin/users ,  }     Note  You will need to use the /admin/users endpoint to get a list of users\nfor adding deleting from the admin group.", 
            "title": "Admin users add"
        }, 
        {
            "location": "/api/user/admin/#admin-users-del", 
            "text": "Endpoint: /admin/users/del/ int:user_id  Allowed methods :  GET  GET  It removes a user from the admin group. It returns a JSON object with\nthe following information:   next :  /admin/users ,   Example output  1\n2\n3 { \n   next :   /admin/users ,  }     Note  You will need to use the /admin/users endpoint to get a list of users\nfor adding deleting from the admin group.", 
            "title": "Admin users del"
        }, 
        {
            "location": "/api/helpingmaterial/intro/", 
            "text": "Intro\n\n\nThis endpoint (api/helpingmaterial) allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build an interactive tutorial.\n\n\nHelping materials allow you to upload images via the endpoint using the multipart/form-data Content-Type.\n\n\nFor example, imagine that you want to add a photo of an animal and it\ns description, so users can easily identify it (or use it as pre-loaded\nanswer for classifying pictures of animals). In this case, you can do\nthe following (using the popular Python requests library, but you can\nuse any other programming language):\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nimport\n \nrequests\n\n\nurl\n \n=\n \nhttps://server/api/helpingpoint?api_key=YOURKEY\n\n\n# Upload a picture\n\n\nfiles\n \n=\n \n{\nfile\n:\n \nopen\n(\ntest.jpg\n,\n \nrb\n)}\n\n\ndata\n \n=\n \n{\nproject_id\n:\n \nYOURPROJECT_ID\n}\n\n\nr\n \n=\n \nrequests\n.\npost\n(\nurl\n,\n \ndata\n=\ndata\n,\n \nfiles\n=\nfiles\n)\n\n\n# Get the created helping material\n\n\nhp\n \n=\n \nr\n.\njson\n()\n\n\n# Add the meta-data of the picture\n\n\nurl\n \n=\n \nhttps://server/api/helpingpoint/\n%s\n?api_key=YOURKEY\n \n%\n \nhp\n[\nid\n]\n\n\ninfo\n \n=\n \n{\npopular_name\n:\n \nelephant\n,\n \nscientific_name\n:\n \nloxodonta\n}\n\n\nr\n \n=\n \nrequests\n.\nput\n(\nurl\n,\n \njson\n=\n{\ninfo\n:\n \ninfo\n})\n\n\n\n\n\n\n\nYou can add as many files as you want. Then, from any place you can\nquery the helping material endpoint to retrieve the example/tutorial\nmaterials for helping your users.\n\n\n\n\nTip\n\n\n\n\nPBS and helping materials\n     You can use PBS to add helping materials from an Excel or CSV file. Check the \ndocumentation\n.\n\n\n\n\nNote\n\n\nOnly project owners can create helping materials.", 
            "title": "Attaching files"
        }, 
        {
            "location": "/api/helpingmaterial/intro/#intro", 
            "text": "This endpoint (api/helpingmaterial) allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build an interactive tutorial.  Helping materials allow you to upload images via the endpoint using the multipart/form-data Content-Type.  For example, imagine that you want to add a photo of an animal and it s description, so users can easily identify it (or use it as pre-loaded\nanswer for classifying pictures of animals). In this case, you can do\nthe following (using the popular Python requests library, but you can\nuse any other programming language):   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 import   requests  url   =   https://server/api/helpingpoint?api_key=YOURKEY  # Upload a picture  files   =   { file :   open ( test.jpg ,   rb )}  data   =   { project_id :   YOURPROJECT_ID }  r   =   requests . post ( url ,   data = data ,   files = files )  # Get the created helping material  hp   =   r . json ()  # Add the meta-data of the picture  url   =   https://server/api/helpingpoint/ %s ?api_key=YOURKEY   %   hp [ id ]  info   =   { popular_name :   elephant ,   scientific_name :   loxodonta }  r   =   requests . put ( url ,   json = { info :   info })    You can add as many files as you want. Then, from any place you can\nquery the helping material endpoint to retrieve the example/tutorial\nmaterials for helping your users.   Tip   PBS and helping materials\n     You can use PBS to add helping materials from an Excel or CSV file. Check the  documentation .   Note  Only project owners can create helping materials.", 
            "title": "Intro"
        }, 
        {
            "location": "/api/page/intro/", 
            "text": "Intro\n\n\nThis endpoint (api/page) allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build a headless CMS.\n\n\nPages allow you to upload images (or any allowed file) via the endpoint using the multipart/form-data Content-Type.\n\n\nFor example, imagine that you want to add a page for your SPA or #jamstack\nsolution. In this case, you can do\nthe following (using the popular Python requests library, but you can\nuse any other programming language):\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nimport\n \nrequests\n\n\nurl\n \n=\n \nhttps://server/api/page?api_key=YOURKEY\n\n\n# Upload a picture\n\n\nfiles\n \n=\n \n{\nfile\n:\n \nopen\n(\ntest.jpg\n,\n \nrb\n)}\n\n\ndata\n \n=\n \n{\nproject_id\n:\n \nYOURPROJECT_ID\n,\n \nslug\n:\n \naboutus\n}\n\n\nr\n \n=\n \nrequests\n.\npost\n(\nurl\n,\n \ndata\n=\ndata\n,\n \nfiles\n=\nfiles\n)\n\n\n# Get the created helping material\n\n\nhp\n \n=\n \nr\n.\njson\n()\n\n\n# Add the meta-data of the picture\n\n\nurl\n \n=\n \nhttps://server/api/page/\n%s\n?api_key=YOURKEY\n \n%\n \nhp\n[\nid\n]\n\n\ninfo\n \n=\n \n{\nstructure\n:\n \n[\nHeader\n,\n \nAbout\n,\n \nFooter\n]}\n\n\nr\n \n=\n \nrequests\n.\nput\n(\nurl\n,\n \njson\n=\n{\ninfo\n:\n \ninfo\n})\n\n\n\n\n\n\n\nYou can add as many pages as you want. Then, within your frontend framework\n(i.e. nuxt) you can match URLs in your router to request the page\ns structure\nfrom PYBOSSA. In this way, you will be able to handle structure to PYBOSSA, so\nyour site is more flexible than ever.\n\n\n\n\nNote\n\n\nOnly project owners and admins can create pages.", 
            "title": "Info"
        }, 
        {
            "location": "/api/page/intro/#intro", 
            "text": "This endpoint (api/page) allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build a headless CMS.  Pages allow you to upload images (or any allowed file) via the endpoint using the multipart/form-data Content-Type.  For example, imagine that you want to add a page for your SPA or #jamstack\nsolution. In this case, you can do\nthe following (using the popular Python requests library, but you can\nuse any other programming language):   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 import   requests  url   =   https://server/api/page?api_key=YOURKEY  # Upload a picture  files   =   { file :   open ( test.jpg ,   rb )}  data   =   { project_id :   YOURPROJECT_ID ,   slug :   aboutus }  r   =   requests . post ( url ,   data = data ,   files = files )  # Get the created helping material  hp   =   r . json ()  # Add the meta-data of the picture  url   =   https://server/api/page/ %s ?api_key=YOURKEY   %   hp [ id ]  info   =   { structure :   [ Header ,   About ,   Footer ]}  r   =   requests . put ( url ,   json = { info :   info })    You can add as many pages as you want. Then, within your frontend framework\n(i.e. nuxt) you can match URLs in your router to request the page s structure\nfrom PYBOSSA. In this way, you will be able to handle structure to PYBOSSA, so\nyour site is more flexible than ever.   Note  Only project owners and admins can create pages.", 
            "title": "Intro"
        }, 
        {
            "location": "/api/blogpost/intro/", 
            "text": "Intro\n\n\nThis endpoint (api/blogpost) allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build an interactive tutorial.\n\n\nBlogposts allow you to upload images via the endpoint using the multipart/form-data Content-Type.\n\n\nFor example, imagine that you want to add a photo to your blogpost.\nIn this case, you can do the following (using the popular Python requests library, but you can\nuse any other programming language):\n\n\n1\n2\n3\n4\n5\n6\nimport\n \nrequests\n\n\nurl\n \n=\n \nhttps://server/api/blogpost?api_key=YOURKEY\n\n\n# Upload a picture\n\n\nfiles\n \n=\n \n{\nfile\n:\n \nopen\n(\ntest.jpg\n,\n \nrb\n)}\n\n\ndata\n \n=\n \n{\nproject_id\n:\n \nYOURPROJECT_ID\n,\n \ntitle\n:\n \nTitle\n,\n \nbody\n:\n \nbody\n}\n\n\nr\n \n=\n \nrequests\n.\npost\n(\nurl\n,\n \ndata\n=\ndata\n,\n \nfiles\n=\nfiles\n)\n\n\n\n\n\n\n\n\n\nNote\n\n\nOnly project owners can create blogposts.", 
            "title": "Attaching files"
        }, 
        {
            "location": "/api/blogpost/intro/#intro", 
            "text": "This endpoint (api/blogpost) allows you to add JSON and media files (images, videos or sounds) that you can use within your project to build an interactive tutorial.  Blogposts allow you to upload images via the endpoint using the multipart/form-data Content-Type.  For example, imagine that you want to add a photo to your blogpost.\nIn this case, you can do the following (using the popular Python requests library, but you can\nuse any other programming language):  1\n2\n3\n4\n5\n6 import   requests  url   =   https://server/api/blogpost?api_key=YOURKEY  # Upload a picture  files   =   { file :   open ( test.jpg ,   rb )}  data   =   { project_id :   YOURPROJECT_ID ,   title :   Title ,   body :   body }  r   =   requests . post ( url ,   data = data ,   files = files )     Note  Only project owners can create blogposts.", 
            "title": "Intro"
        }, 
        {
            "location": "/api/leaderboard/", 
            "text": "Leaderboard\n\n\nEndpoint: /leaderboard/\n \nEndpoint:\n/leaderboard/window/\nint:window\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nShows you the top 20 contributors rank in a sorted leaderboard. If you\nare logged in you will also get the rank of yourself even when you are\nnot visible on the top public leaderboard.\n\n\nBy default the window is zero, adding the authenticated user to the\nbottom of the top 20, so the user can know the rank. If you want, you\ncan use a window to show the previous and next users taking into account\nauthenticated user rank. For example, you can get the previous 3 and\nnext 3 accessing this URL: /leaderboard/window/3.\n\n\n\n\ntemplate\n: Jinja2 template.\n\n\ntitle\n: the title for the endpoint.\n\n\ntop_users\n: Sorted list of leaderboard top users.\n\n\n\n\nExample output\n\n\nfor logged in user JohnDoe (normally not visible in public leaderboard):\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n{\n\n    \ntemplate\n:\n \n/stats/index.html\n,\n\n    \ntitle\n:\n \nCommunity Leaderboard\n,\n\n    \ntop_users\n:\n \n[\n\n        \n{\n\n            \ncreated\n:\n \n2014-08-17T18:28:56.738119\n,\n\n            \nfullname\n:\n \nBuzz Bot\n,\n\n            \ninfo\n:\n \n{\n\n                \navatar\n:\n \n1410771548.09_avatar.png\n,\n\n                \ncontainer\n:\n \nuser_5305\n\n            \n},\n\n            \nn_answers\n:\n \nnull\n,\n\n            \nname\n:\n \nbuzzbot\n,\n\n            \nrank\n:\n \n1\n,\n\n            \nregistered_ago\n:\n \nnull\n,\n\n            \nscore\n:\n \n54259\n\n        \n},\n\n        \n...\n \n,\n\n        \n{\n\n            \ncreated\n:\n \n2014-08-11T08:59:32.079599\n,\n\n            \nfullname\n:\n \nJohnDoe\n,\n\n            \ninfo\n:\n \n{\n\n                \navatar\n:\n \nnull\n,\n\n                \ncontainer\n:\n \nuser_4953\n\n            \n},\n\n            \nn_answers\n:\n \nnull\n,\n\n            \nname\n:\n \nJohnDoe\n,\n\n            \nrank\n:\n \n1813\n,\n\n            \nregistered_ago\n:\n \nnull\n,\n\n            \nscore\n:\n \n56\n\n        \n}\n\n    \n]\n\n\n}", 
            "title": "Methods"
        }, 
        {
            "location": "/api/leaderboard/#leaderboard", 
            "text": "Endpoint: /leaderboard/   Endpoint:\n/leaderboard/window/ int:window  Allowed methods :  GET  GET  Shows you the top 20 contributors rank in a sorted leaderboard. If you\nare logged in you will also get the rank of yourself even when you are\nnot visible on the top public leaderboard.  By default the window is zero, adding the authenticated user to the\nbottom of the top 20, so the user can know the rank. If you want, you\ncan use a window to show the previous and next users taking into account\nauthenticated user rank. For example, you can get the previous 3 and\nnext 3 accessing this URL: /leaderboard/window/3.   template : Jinja2 template.  title : the title for the endpoint.  top_users : Sorted list of leaderboard top users.   Example output  for logged in user JohnDoe (normally not visible in public leaderboard):   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33 { \n     template :   /stats/index.html , \n     title :   Community Leaderboard , \n     top_users :   [ \n         { \n             created :   2014-08-17T18:28:56.738119 , \n             fullname :   Buzz Bot , \n             info :   { \n                 avatar :   1410771548.09_avatar.png , \n                 container :   user_5305 \n             }, \n             n_answers :   null , \n             name :   buzzbot , \n             rank :   1 , \n             registered_ago :   null , \n             score :   54259 \n         }, \n         ...   , \n         { \n             created :   2014-08-11T08:59:32.079599 , \n             fullname :   JohnDoe , \n             info :   { \n                 avatar :   null , \n                 container :   user_4953 \n             }, \n             n_answers :   null , \n             name :   JohnDoe , \n             rank :   1813 , \n             registered_ago :   null , \n             score :   56 \n         } \n     ]  }", 
            "title": "Leaderboard"
        }, 
        {
            "location": "/api/home/", 
            "text": "Home\n\n\nEndpoint: /\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIt returns a JSON object with the following information:\n\n\n\n\ntop_projects\n: A list of the most active projects.\n\n\ncategories_projects\n: A dictionary with all the published\n    categories and its associated projects.\n\n\ncategories\n: All the available categories.\n\n\ntemplate\n: Jinja2 template.\n\n\ntop_users\n: List of top contributors.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n{\n\n  \ncategories\n:\n \n[\n\n    \n{\n\n      \ncreated\n:\n \nnull\n,\n\n      \ndescription\n:\n \nnull\n,\n\n      \nid\n:\n \nnull\n,\n\n      \nname\n:\n \nFeatured\n,\n\n      \nshort_name\n:\n \nfeatured\n\n    \n},\n\n    \n{\n\n      \ndescription\n:\n \nEconomic projects\n,\n\n      \nid\n:\n \n6\n,\n\n      \nname\n:\n \nEconomics\n,\n\n      \nshort_name\n:\n \neconomics\n\n    \n},\n\n  \n],\n\n  \ncategories_projects\n:\n \n{\n\n    \neconomics\n:\n \n[\n\n      \n{\n\n        \ndescription\n:\n \nDescription\n,\n\n        \ninfo\n:\n \n{\n\n          \ncontainer\n:\n \nuser\n,\n\n          \nthumbnail\n:\n \n415602833.png\n\n        \n},\n\n        \nn_tasks\n:\n \n18\n,\n\n        \nn_volunteers\n:\n \n26\n,\n\n        \nname\n:\n \nMan made objects identity\n,\n\n        \noverall_progress\n:\n \n0\n,\n\n        \nshort_name\n:\n \nmanmadeobjectsidentity\n\n      \n},\n\n    \n],\n\n  \n},\n\n  \ntemplate\n:\n \n/home/index.html\n,\n\n  \ntop_projects\n:\n \n[\n\n    \n{\n\n      \ndescription\n:\n \nImage pattern recognition\n,\n\n      \ninfo\n:\n \n{\n\n        \ncontainer\n:\n \nuser\n,\n\n        \nthumbnail\n:\n \n772569.58.png\n\n      \n},\n\n      \nn_tasks\n:\n \nnull\n,\n\n      \nn_volunteers\n:\n \n17499\n,\n\n      \nname\n:\n \nName\n,\n\n      \noverall_progress\n:\n \nnull\n,\n\n      \nshort_name\n:\n \nname\n\n    \n},\n\n  \n],\n\n  \ntop_users\n:\n \n[\n\n    \n{\n\n      \ncreated\n:\n \n2014-08-17T18:28:56.738119\n,\n\n      \nfullname\n:\n \nJohn Doe\n,\n\n      \ninfo\n:\n \n{\n\n        \navatar\n:\n \n1410771tar.png\n,\n\n        \ncontainer\n:\n \n05\n\n      \n},\n\n      \nn_answers\n:\n \nnull\n,\n\n      \nname\n:\n \njohndoe\n,\n\n      \nrank\n:\n \n1\n,\n\n      \nregistered_ago\n:\n \nnull\n,\n\n      \nscore\n:\n \n54247\n\n    \n},\n\n  \n]\n\n\n}", 
            "title": "Methods"
        }, 
        {
            "location": "/api/home/#home", 
            "text": "Endpoint: /  Allowed methods :  GET  GET  It returns a JSON object with the following information:   top_projects : A list of the most active projects.  categories_projects : A dictionary with all the published\n    categories and its associated projects.  categories : All the available categories.  template : Jinja2 template.  top_users : List of top contributors.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63 { \n   categories :   [ \n     { \n       created :   null , \n       description :   null , \n       id :   null , \n       name :   Featured , \n       short_name :   featured \n     }, \n     { \n       description :   Economic projects , \n       id :   6 , \n       name :   Economics , \n       short_name :   economics \n     }, \n   ], \n   categories_projects :   { \n     economics :   [ \n       { \n         description :   Description , \n         info :   { \n           container :   user , \n           thumbnail :   415602833.png \n         }, \n         n_tasks :   18 , \n         n_volunteers :   26 , \n         name :   Man made objects identity , \n         overall_progress :   0 , \n         short_name :   manmadeobjectsidentity \n       }, \n     ], \n   }, \n   template :   /home/index.html , \n   top_projects :   [ \n     { \n       description :   Image pattern recognition , \n       info :   { \n         container :   user , \n         thumbnail :   772569.58.png \n       }, \n       n_tasks :   null , \n       n_volunteers :   17499 , \n       name :   Name , \n       overall_progress :   null , \n       short_name :   name \n     }, \n   ], \n   top_users :   [ \n     { \n       created :   2014-08-17T18:28:56.738119 , \n       fullname :   John Doe , \n       info :   { \n         avatar :   1410771tar.png , \n         container :   05 \n       }, \n       n_answers :   null , \n       name :   johndoe , \n       rank :   1 , \n       registered_ago :   null , \n       score :   54247 \n     }, \n   ]  }", 
            "title": "Home"
        }, 
        {
            "location": "/api/announcement/", 
            "text": "Announcements\n\n\nEndpoint: /announcements/\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nShows you PYBOSSA wide announcements\n\n\n\n\nannouncements\n: Announcements\n\n\ntemplate\n: the rendered Announcements tamplate (currently empty)\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n{\n\n    \nannouncements\n:\n \n[\n\n        \n{\n\n            \nbody\n:\n \ntest123\n,\n\n            \ncreated\n:\n \n2017-05-31T15:23:44.858735\n,\n\n            \nid\n:\n \n5\n,\n\n            \nmedia_url\n:\n \nnull\n,\n\n            \npublished\n:\n \ntrue\n,\n\n            \ntitle\n:\n \ntitle123\n,\n\n            \nupdated\n:\n \n2017-05-31T15:23:44.858735\n,\n\n            \nuser_id\n:\n \n4953\n\n        \n},\n\n        \n{\n\n            \nbody\n:\n \nnew body\n,\n\n            \ncreated\n:\n \n2017-05-31T15:23:28.477516\n,\n\n            \nid\n:\n \n4\n,\n\n            \nmedia_url\n:\n \nnull\n,\n\n            \npublished\n:\n \ntrue\n,\n\n            \ntitle\n:\n \nblogpost title\n,\n\n            \nupdated\n:\n \n2017-05-31T15:23:28.477516\n,\n\n            \nuser_id\n:\n \n4953\n\n        \n},\n\n        \n{\n\n            \nbody\n:\n \nnew body\n,\n\n            \ncreated\n:\n \n2017-06-01T23:42:45.042010\n,\n\n            \nid\n:\n \n7\n,\n\n            \nmedia_url\n:\n \nnull\n,\n\n            \npublished\n:\n \ntrue\n,\n\n            \ntitle\n:\n \nblogpost title\n,\n\n            \nupdated\n:\n \n2017-06-01T23:42:45.042010\n,\n\n            \nuser_id\n:\n \n4953\n\n        \n},\n\n        \n{\n\n            \nbody\n:\n \nnew body\n,\n\n            \ncreated\n:\n \n2017-06-01T23:45:11.612801\n,\n\n            \nid\n:\n \n8\n,\n\n            \nmedia_url\n:\n \nnull\n,\n\n            \npublished\n:\n \ntrue\n,\n\n            \ntitle\n:\n \nblogpost title\n,\n\n            \nupdated\n:\n \n2017-06-01T23:45:11.612801\n,\n\n            \nuser_id\n:\n \n4953\n\n        \n}\n\n    \n],\n\n    \ncsrf\n:\n \n1504710446.52##6a7fakjsdhsdflkj\n,\n\n    \ntemplate\n:\n \nadmin/announcement.html\n,\n\n    \ntitle\n:\n \nManage global Announcements\n\n\n}\n\n\n\n\n\n\n\nAdmin announcement\n\n\nEndpoint: /admin/announcement\n\n\nGET\n\n\nShows you PYBOSSA wide announcements\n\n\n\n\nannouncements\n: Announcements\n\n\ncsrf\n: csrf token\n\n\ntemplate\n: the rendered Announcements tamplate (currently empty)\n\n\ntitle\n: title of rendered endpoint\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n{\n\n    \nannouncements\n:\n \n[\n\n        \n{\n\n            \nbody\n:\n \ntest123\n,\n\n            \ncreated\n:\n \n2017-05-31T15:23:44.858735\n,\n\n            \nid\n:\n \n5\n,\n\n            \nmedia_url\n:\n \nnull\n,\n\n            \npublished\n:\n \ntrue\n,\n\n            \ntitle\n:\n \ntitle123\n,\n\n            \nupdated\n:\n \n2017-05-31T15:23:44.858735\n,\n\n            \nuser_id\n:\n \n4953\n\n        \n},\n\n        \n{\n\n            \nbody\n:\n \nnew body\n,\n\n            \ncreated\n:\n \n2017-05-31T15:23:28.477516\n,\n\n            \nid\n:\n \n4\n,\n\n            \nmedia_url\n:\n \nnull\n,\n\n            \npublished\n:\n \ntrue\n,\n\n            \ntitle\n:\n \nblogpost title\n,\n\n            \nupdated\n:\n \n2017-05-31T15:23:28.477516\n,\n\n            \nuser_id\n:\n \n4953\n\n        \n},\n\n        \n{\n\n            \nbody\n:\n \nnew body\n,\n\n            \ncreated\n:\n \n2017-06-01T23:42:45.042010\n,\n\n            \nid\n:\n \n7\n,\n\n            \nmedia_url\n:\n \nnull\n,\n\n            \npublished\n:\n \ntrue\n,\n\n            \ntitle\n:\n \nblogpost title\n,\n\n            \nupdated\n:\n \n2017-06-01T23:42:45.042010\n,\n\n            \nuser_id\n:\n \n4953\n\n        \n},\n\n        \n{\n\n            \nbody\n:\n \nnew body\n,\n\n            \ncreated\n:\n \n2017-06-01T23:45:11.612801\n,\n\n            \nid\n:\n \n8\n,\n\n            \nmedia_url\n:\n \nnull\n,\n\n            \npublished\n:\n \ntrue\n,\n\n            \ntitle\n:\n \nblogpost title\n,\n\n            \nupdated\n:\n \n2017-06-01T23:45:11.612801\n,\n\n            \nuser_id\n:\n \n4953\n\n        \n}\n\n    \n],\n\n    \ncsrf\n:\n \n1504710446.52##6a7fakjsdhsdflkj\n,\n\n    \ntemplate\n:\n \nadmin/announcement.html\n,\n\n    \ntitle\n:\n \nManage global Announcements\n\n\n}\n\n\n\n\n\n\n\nAdmin announcement new\n\n\nEndpoint: /admin/announcement/new\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nCreates a new PYBOSSA wide announcement\n\n\n\n\nform\n: form input\n\n\ntemplate\n: the rendered Announcements tamplate (currently empty)\n\n\ntitle\n: title of rendered endpoint\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n{\n\n  \nform\n:\n \n{\n\n    \nbody\n:\n \nnull\n,\n\n    \ncsrf\n:\n \n1496394903.81##bb5fb0c527955073ec9ad694ed9097e7c868272a\n,\n\n    \nerrors\n:\n \n{},\n\n    \nmedia_url\n:\n \nnull\n,\n\n    \npublished\n:\n \ntrue\n,\n\n    \ntitle\n:\n \nnull\n\n  \n},\n\n  \ntemplate\n:\n \nadmin/new_announcement.html\n,\n\n  \ntitle\n:\n \nWrite a new post\n\n\n}\n\n\n\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n. On success you will\nget a 200 http code and following output:\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \nflash\n:\n \ni class=\\\nicon-ok\\\n/i\n Annnouncement created!\n,\n\n  \nnext\n:\n \n/admin/announcement\n,\n\n  \nstatus\n:\n \nsuccess\n\n\n}\n\n\n\n\n\n\n\nAdmin announcement update\n\n\nEndpoint: /admin/announcement/\nid\n/update\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nUpdates a PYBOSSA announcement\n\n\n\n\nform\n: form input\n\n\ntemplate\n: the rendered Announcements tamplate (currently empty)\n\n\ntitle\n: title of rendered endpoint\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n{\n\n  \nform\n:\n \n{\n\n    \nbody\n:\n \ntest6\n,\n\n    \ncsrf\n:\n \n1496328993.27##aa51e026938129afdfb0e6a5eab8c6b9427f81f6\n,\n\n    \nerrors\n:\n \n{},\n\n    \nid\n:\n \n4\n,\n\n    \nmedia_url\n:\n \nnull\n,\n\n    \npublished\n:\n \ntrue\n,\n\n    \ntitle\n:\n \ntest6\n\n  \n},\n\n  \ntemplate\n:\n \nadmin/new_announcement.html\n,\n\n  \ntitle\n:\n \nEdit a post\n\n\n}\n\n\n\n\n\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n. On success you will\nget a 200 http code and following output:\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \nflash\n:\n \ni class=\\\nicon-ok\\\n/i\n Announcement updated!\n,\n\n  \nnext\n:\n \n/admin/announcement\n,\n\n  \nstatus\n:\n \nsuccess\n\n\n}\n\n\n\n\n\n\n\nAdmin announcement delete\n\n\nEndpoint: /admin/announcement/\nid\n/delete\n\n\nAllowed methods\n: \nPOST\n\n\nDeletes a PYBOSSA announcement\n\n\nPOST\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n. You can get the token\nfrom /admin/announcement On success you will get a 200 http code and\nfollowing output:\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \nflash\n:\n \ni class=\\\nicon-ok\\\n/i\n Announcement deleted!\n,\n\n  \nnext\n:\n \n/admin/announcement\n,\n\n  \nstatus\n:\n \nsuccess\n\n\n}", 
            "title": "Methods"
        }, 
        {
            "location": "/api/announcement/#announcements", 
            "text": "Endpoint: /announcements/  Allowed methods :  GET  GET  Shows you PYBOSSA wide announcements   announcements : Announcements  template : the rendered Announcements tamplate (currently empty)   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47 { \n     announcements :   [ \n         { \n             body :   test123 , \n             created :   2017-05-31T15:23:44.858735 , \n             id :   5 , \n             media_url :   null , \n             published :   true , \n             title :   title123 , \n             updated :   2017-05-31T15:23:44.858735 , \n             user_id :   4953 \n         }, \n         { \n             body :   new body , \n             created :   2017-05-31T15:23:28.477516 , \n             id :   4 , \n             media_url :   null , \n             published :   true , \n             title :   blogpost title , \n             updated :   2017-05-31T15:23:28.477516 , \n             user_id :   4953 \n         }, \n         { \n             body :   new body , \n             created :   2017-06-01T23:42:45.042010 , \n             id :   7 , \n             media_url :   null , \n             published :   true , \n             title :   blogpost title , \n             updated :   2017-06-01T23:42:45.042010 , \n             user_id :   4953 \n         }, \n         { \n             body :   new body , \n             created :   2017-06-01T23:45:11.612801 , \n             id :   8 , \n             media_url :   null , \n             published :   true , \n             title :   blogpost title , \n             updated :   2017-06-01T23:45:11.612801 , \n             user_id :   4953 \n         } \n     ], \n     csrf :   1504710446.52##6a7fakjsdhsdflkj , \n     template :   admin/announcement.html , \n     title :   Manage global Announcements  }", 
            "title": "Announcements"
        }, 
        {
            "location": "/api/announcement/#admin-announcement", 
            "text": "Endpoint: /admin/announcement  GET  Shows you PYBOSSA wide announcements   announcements : Announcements  csrf : csrf token  template : the rendered Announcements tamplate (currently empty)  title : title of rendered endpoint   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47 { \n     announcements :   [ \n         { \n             body :   test123 , \n             created :   2017-05-31T15:23:44.858735 , \n             id :   5 , \n             media_url :   null , \n             published :   true , \n             title :   title123 , \n             updated :   2017-05-31T15:23:44.858735 , \n             user_id :   4953 \n         }, \n         { \n             body :   new body , \n             created :   2017-05-31T15:23:28.477516 , \n             id :   4 , \n             media_url :   null , \n             published :   true , \n             title :   blogpost title , \n             updated :   2017-05-31T15:23:28.477516 , \n             user_id :   4953 \n         }, \n         { \n             body :   new body , \n             created :   2017-06-01T23:42:45.042010 , \n             id :   7 , \n             media_url :   null , \n             published :   true , \n             title :   blogpost title , \n             updated :   2017-06-01T23:42:45.042010 , \n             user_id :   4953 \n         }, \n         { \n             body :   new body , \n             created :   2017-06-01T23:45:11.612801 , \n             id :   8 , \n             media_url :   null , \n             published :   true , \n             title :   blogpost title , \n             updated :   2017-06-01T23:45:11.612801 , \n             user_id :   4953 \n         } \n     ], \n     csrf :   1504710446.52##6a7fakjsdhsdflkj , \n     template :   admin/announcement.html , \n     title :   Manage global Announcements  }", 
            "title": "Admin announcement"
        }, 
        {
            "location": "/api/announcement/#admin-announcement-new", 
            "text": "Endpoint: /admin/announcement/new  Allowed methods :  GET/POST  GET  Creates a new PYBOSSA wide announcement   form : form input  template : the rendered Announcements tamplate (currently empty)  title : title of rendered endpoint   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 { \n   form :   { \n     body :   null , \n     csrf :   1496394903.81##bb5fb0c527955073ec9ad694ed9097e7c868272a , \n     errors :   {}, \n     media_url :   null , \n     published :   true , \n     title :   null \n   }, \n   template :   admin/new_announcement.html , \n   title :   Write a new post  }    POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken . On success you will\nget a 200 http code and following output:  Example output  1\n2\n3\n4\n5 { \n   flash :   i class=\\ icon-ok\\ /i  Annnouncement created! , \n   next :   /admin/announcement , \n   status :   success  }", 
            "title": "Admin announcement new"
        }, 
        {
            "location": "/api/announcement/#admin-announcement-update", 
            "text": "Endpoint: /admin/announcement/ id /update  Allowed methods :  GET/POST  GET  Updates a PYBOSSA announcement   form : form input  template : the rendered Announcements tamplate (currently empty)  title : title of rendered endpoint   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 { \n   form :   { \n     body :   test6 , \n     csrf :   1496328993.27##aa51e026938129afdfb0e6a5eab8c6b9427f81f6 , \n     errors :   {}, \n     id :   4 , \n     media_url :   null , \n     published :   true , \n     title :   test6 \n   }, \n   template :   admin/new_announcement.html , \n   title :   Edit a post  }    POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken . On success you will\nget a 200 http code and following output:  Example output  1\n2\n3\n4\n5 { \n   flash :   i class=\\ icon-ok\\ /i  Announcement updated! , \n   next :   /admin/announcement , \n   status :   success  }", 
            "title": "Admin announcement update"
        }, 
        {
            "location": "/api/announcement/#admin-announcement-delete", 
            "text": "Endpoint: /admin/announcement/ id /delete  Allowed methods :  POST  Deletes a PYBOSSA announcement  POST  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken . You can get the token\nfrom /admin/announcement On success you will get a 200 http code and\nfollowing output:  Example output  1\n2\n3\n4\n5 { \n   flash :   i class=\\ icon-ok\\ /i  Announcement deleted! , \n   next :   /admin/announcement , \n   status :   success  }", 
            "title": "Admin announcement delete"
        }, 
        {
            "location": "/api/categories/", 
            "text": "Admin categories\n\n\nEndpoint: /admin/categories\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt lists all the available categories. It returns a JSON object with the\nfollowing information:\n\n\n\n\ncategories\n: A list of categories.\n\n\nform\n: A form with the CSRF key to add a new category.\n\n\nn_projects_per_category\n: A dictionary with the number of\n    projects per category.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n{\n\n  \ncategories\n:\n \n[\n\n    \n{\n\n      \ncreated\n:\n \nnull\n,\n\n      \ndescription\n:\n \nSocial projects\n,\n\n      \nid\n:\n \n2\n,\n\n      \nname\n:\n \nSocial\n,\n\n      \nshort_name\n:\n \nsocial\n\n    \n},\n\n    \n{\n\n      \ncreated\n:\n \n2013-06-18T11:13:44.789149\n,\n\n      \ndescription\n:\n \nArt projects\n,\n\n      \nid\n:\n \n3\n,\n\n      \nname\n:\n \nArt\n,\n\n      \nshort_name\n:\n \nart\n\n    \n},\n\n  \n],\n\n  \nform\n:\n \n{\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \ndescription\n:\n \nnull\n,\n\n    \nerrors\n:\n \n{},\n\n    \nid\n:\n \nnull\n,\n\n    \nname\n:\n \nnull\n\n  \n},\n\n  \nn_projects_per_category\n:\n \n{\n\n    \nart\n:\n \n41\n,\n\n    \nsocial\n:\n \n182\n\n  \n},\n\n  \ntemplate\n:\n \nadmin/categories.html\n,\n\n  \ntitle\n:\n \nCategories\n\n\n}\n\n\n\n\n\n\n\nPOST\n\n\nIt returns the same output as before, but if the form is valid, it will\nreturn the new created Category. Use the CSRFToken for submitting the\ndata.\n\n\n\n\ncategories\n: A list of categories.\n\n\nform\n: A form with the CSRF key to add a new category.\n\n\nn_projects_per_category\n: A dictionary with the number of\n    projects per category.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n{\n\n  \ncategories\n:\n \n[\n\n    \n{\n\n      \ncreated\n:\n \nnull\n,\n\n      \ndescription\n:\n \nSocial projects\n,\n\n      \nid\n:\n \n2\n,\n\n      \nname\n:\n \nSocial\n,\n\n      \nshort_name\n:\n \nsocial\n\n    \n},\n\n    \n{\n\n      \ncreated\n:\n \n2013-06-18T11:13:44.789149\n,\n\n      \ndescription\n:\n \nArt projects\n,\n\n      \nid\n:\n \n3\n,\n\n      \nname\n:\n \nArt\n,\n\n      \nshort_name\n:\n \nart\n\n    \n},\n\n    \n{\n\n      \ncreated\n:\n \nnow\n,\n\n      \ndescription\n:\n \nnew\n,\n\n      \nid\n:\n \n4\n,\n\n      \nname\n:\n \nnew\n,\n\n      \nshort_name\n:\n \nnew\n\n    \n},\n\n\n  \n],\n\n  \nform\n:\n \n{\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \ndescription\n:\n \nnew\n,\n\n    \nerrors\n:\n \n{},\n\n    \nname\n:\n \nnew\n\n  \n},\n\n  \nn_projects_per_category\n:\n \n{\n\n    \nart\n:\n \n41\n,\n\n    \nsocial\n:\n \n182\n,\n\n    \nnew\n:\n \n0\n\n  \n},\n\n  \ntemplate\n:\n \nadmin/categories.html\n,\n\n  \ntitle\n:\n \nCategories\n\n\n}\n\n\n\n\n\n\n\nAdmin categories delete\n\n\nEndpoint: /admin/categories/del/\nint:id\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt shows the category that will be deleted. It gives you the CSRF token\nto do a POST and delete it.\n\n\n\n\ncategory\n: The category to be deleted.\n\n\nform\n: A form with the CSRF key to add a new category.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n{\n\n  \ncategory\n:\n \n{\n\n    \ncreated\n:\n \n2017-01-24T13:08:09.873071\n,\n\n    \ndescription\n:\n \nnew\n,\n\n    \nid\n:\n \n9\n,\n\n    \nname\n:\n \nnew\n,\n\n    \nshort_name\n:\n \nnew\n\n  \n},\n\n  \nform\n:\n \n{\n\n    \ncsrf\n:\n \ntoken\n,\n\n  \n},\n\n  \ntemplate\n:\n \nadmin/del_category.html\n,\n\n  \ntitle\n:\n \nDelete Category\n\n\n}\n\n\n\n\n\n\n\nPOST\n\n\nIt shows the category that will be deleted. It gives you the CSRF token\nto do a POST and delete it.\n\n\n\n\nflash\n: A human readable message about the action.\n\n\nnext\n: The next URL\n\n\nstatus\n: The status of the POST.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \nflash\n:\n \nCategory deleted\n,\n\n  \nnext\n:\n \n/admin/categories\n,\n\n  \nstatus\n:\n \nsuccess\n\n\n}\n\n\n\n\n\n\n\nAdmin categories update\n\n\nEndpoint: /admin/categories/update/\nint:id\n\n\nAllowed methods\n: \nGET/POST\n\n\nGET\n\n\nIt shows the category that will be updated. It gives you the CSRF token\nto do a POST and update it.\n\n\n\n\ncategory\n: The category to be deleted.\n\n\nform\n: A form with the CSRF key to add a new category.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n{\n\n  \ncategory\n:\n \n{\n\n    \ncreated\n:\n \n2017-01-24T13:08:09.873071\n,\n\n    \ndescription\n:\n \nnew\n,\n\n    \nid\n:\n \n9\n,\n\n    \nname\n:\n \nnew\n,\n\n    \nshort_name\n:\n \nnew\n\n  \n},\n\n  \nform\n:\n \n{\n\n    \ncsrf\n:\n \ntoken\n,\n\n    \ndescription\n:\n \nnew\n,\n\n    \nerrors\n:\n \n{\n},\n\n    \nid\n:\n \n9,\n\n    \nname\n:\n \nnew\n\n  \n}\n,\n\n  \ntemplate\n:\n \nadmin/update_category.html\n,\n\n  \ntitle\n:\n \nUpdate Category\n\n\n}\n\n\n\n\n\n\n\nPOST\n\n\nIt updates the category. Use the CSRF token and form fields from the\nprevious action to update it.\n\n\n\n\nflash\n: A human readable message about the action.\n\n\nnext\n: The next URL\n\n\nstatus\n: The status of the POST.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \nflash\n:\n \nCategory updated\n,\n\n  \nnext\n:\n \n/admin/categories\n,\n\n  \nstatus\n:\n \nsuccess\n\n\n}", 
            "title": "Methods"
        }, 
        {
            "location": "/api/categories/#admin-categories", 
            "text": "Endpoint: /admin/categories  Allowed methods :  GET/POST  GET  It lists all the available categories. It returns a JSON object with the\nfollowing information:   categories : A list of categories.  form : A form with the CSRF key to add a new category.  n_projects_per_category : A dictionary with the number of\n    projects per category.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 { \n   categories :   [ \n     { \n       created :   null , \n       description :   Social projects , \n       id :   2 , \n       name :   Social , \n       short_name :   social \n     }, \n     { \n       created :   2013-06-18T11:13:44.789149 , \n       description :   Art projects , \n       id :   3 , \n       name :   Art , \n       short_name :   art \n     }, \n   ], \n   form :   { \n     csrf :   token , \n     description :   null , \n     errors :   {}, \n     id :   null , \n     name :   null \n   }, \n   n_projects_per_category :   { \n     art :   41 , \n     social :   182 \n   }, \n   template :   admin/categories.html , \n   title :   Categories  }    POST  It returns the same output as before, but if the form is valid, it will\nreturn the new created Category. Use the CSRFToken for submitting the\ndata.   categories : A list of categories.  form : A form with the CSRF key to add a new category.  n_projects_per_category : A dictionary with the number of\n    projects per category.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39 { \n   categories :   [ \n     { \n       created :   null , \n       description :   Social projects , \n       id :   2 , \n       name :   Social , \n       short_name :   social \n     }, \n     { \n       created :   2013-06-18T11:13:44.789149 , \n       description :   Art projects , \n       id :   3 , \n       name :   Art , \n       short_name :   art \n     }, \n     { \n       created :   now , \n       description :   new , \n       id :   4 , \n       name :   new , \n       short_name :   new \n     }, \n\n   ], \n   form :   { \n     csrf :   token , \n     description :   new , \n     errors :   {}, \n     name :   new \n   }, \n   n_projects_per_category :   { \n     art :   41 , \n     social :   182 , \n     new :   0 \n   }, \n   template :   admin/categories.html , \n   title :   Categories  }", 
            "title": "Admin categories"
        }, 
        {
            "location": "/api/categories/#admin-categories-delete", 
            "text": "Endpoint: /admin/categories/del/ int:id  Allowed methods :  GET/POST  GET  It shows the category that will be deleted. It gives you the CSRF token\nto do a POST and delete it.   category : The category to be deleted.  form : A form with the CSRF key to add a new category.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 { \n   category :   { \n     created :   2017-01-24T13:08:09.873071 , \n     description :   new , \n     id :   9 , \n     name :   new , \n     short_name :   new \n   }, \n   form :   { \n     csrf :   token , \n   }, \n   template :   admin/del_category.html , \n   title :   Delete Category  }    POST  It shows the category that will be deleted. It gives you the CSRF token\nto do a POST and delete it.   flash : A human readable message about the action.  next : The next URL  status : The status of the POST.   Example output  1\n2\n3\n4\n5 { \n   flash :   Category deleted , \n   next :   /admin/categories , \n   status :   success  }", 
            "title": "Admin categories delete"
        }, 
        {
            "location": "/api/categories/#admin-categories-update", 
            "text": "Endpoint: /admin/categories/update/ int:id  Allowed methods :  GET/POST  GET  It shows the category that will be updated. It gives you the CSRF token\nto do a POST and update it.   category : The category to be deleted.  form : A form with the CSRF key to add a new category.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 { \n   category :   { \n     created :   2017-01-24T13:08:09.873071 , \n     description :   new , \n     id :   9 , \n     name :   new , \n     short_name :   new \n   }, \n   form :   { \n     csrf :   token , \n     description :   new , \n     errors :   { }, \n     id :   9, \n     name :   new \n   } , \n   template :   admin/update_category.html , \n   title :   Update Category  }    POST  It updates the category. Use the CSRF token and form fields from the\nprevious action to update it.   flash : A human readable message about the action.  next : The next URL  status : The status of the POST.   Example output  1\n2\n3\n4\n5 { \n   flash :   Category updated , \n   next :   /admin/categories , \n   status :   success  }", 
            "title": "Admin categories update"
        }, 
        {
            "location": "/api/admin/dashboard/", 
            "text": "Admin dashboard\n\n\n**Endpoint: /admin/dashboard/\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nIt shows the server statistics. You can use the argument \n?refresh=1\n to\nupdate the data, as this data is only updated every 24 hours.\n\n\n\n\nactive_anon_last_week\n: Active number of anonymous users in\n    the server.\n\n\npublished_projects_last_week\n: Published projects from the\n    last week.\n\n\nnew_tasks_week\n: Number of new tasks created on the last week.\n\n\nupdate_feed\n: Activity feed of actions in the server.\n\n\ndraft_projects_last_week\n: List of new draft projects created\n    in the last week.\n\n\nupdate_projects_last_week\n: List of updated projects in the\n    last week.\n\n\nnew_users_week\n: Number of new registered users in the last\n    week.\n\n\nnew_task_runs_week\n: Number of new task runs in the last week.\n\n\nreturning_users_week\n: Number of returning users per number of\n    days in a row in the last week.\n\n\nactive_users_last_week\n: Number of active users in the last\n    week.\n\n\nwait\n: This will be False if there\ns data, otherwise it will be\n    True.\n\n\n\n\nExample output\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n{\n\n  \nactive_anon_last_week\n:\n \n{\n\n    \nlabels\n:\n \n[\n\n      \n2016-04-28\n\n    \n],\n\n    \nseries\n:\n \n[\n\n      \n[\n\n        \n0\n\n      \n]\n\n    \n]\n\n  \n},\n\n  \nactive_users_last_week\n:\n \n{\n\n    \nlabels\n:\n \n[\n\n      \n2016-04-28\n\n    \n],\n\n    \nseries\n:\n \n[\n\n      \n[\n\n        \n1\n\n      \n]\n\n    \n]\n\n  \n},\n\n  \ndraft_projects_last_week\n:\n \n[\n\n    \n{\n\n      \nday\n:\n \n2016-04-27\n,\n\n      \nemail_addr\n:\n \nemail\n,\n\n      \nid\n:\n \nid\n,\n\n      \nowner_id\n:\n \nid\n,\n\n      \np_name\n:\n \nname\n,\n\n      \nshort_name\n:\n \nname\n,\n\n      \nu_name\n:\n \nname\n\n    \n},\n\n    \n{\n\n      \nday\n:\n \n2016-04-26\n,\n\n      \nemail_addr\n:\n \nemail\n,\n\n      \nid\n:\n \nid\n,\n\n      \nowner_id\n:\n \nid\n,\n\n      \np_name\n:\n \nname\n,\n\n      \nshort_name\n:\n \nname\n,\n\n      \nu_name\n:\n \nname\n\n    \n}\n\n  \n],\n\n  \nnew_task_runs_week\n:\n \n{\n\n    \nlabels\n:\n \n[\n\n      \n2016-04-28\n\n    \n],\n\n    \nseries\n:\n \n[\n\n      \n[\n\n        \n4\n\n      \n]\n\n    \n]\n\n  \n},\n\n  \nnew_tasks_week\n:\n \n{\n\n    \nlabels\n:\n \n[\n\n      \n2016-04-26\n,\n\n      \n2016-04-28\n\n    \n],\n\n    \nseries\n:\n \n[\n\n      \n[\n\n        \n57\n,\n\n        \n4\n\n      \n]\n\n    \n]\n\n  \n},\n\n  \nnew_users_week\n:\n \n{\n\n    \nlabels\n:\n \n[\n\n      \n2016-04-27\n\n    \n],\n\n    \nseries\n:\n \n[\n\n      \n[\n\n        \n1\n\n      \n]\n\n    \n]\n\n  \n},\n\n  \npublished_projects_last_week\n:\n \n[],\n\n  \nreturning_users_week\n:\n \n{\n\n    \nlabels\n:\n \n[\n\n      \n1 day\n,\n\n      \n2 days\n,\n\n      \n3 days\n,\n\n      \n4 days\n,\n\n      \n5 days\n,\n\n      \n6 days\n,\n\n      \n7 days\n\n    \n],\n\n    \nseries\n:\n \n[\n\n      \n[\n\n        \n0\n,\n\n        \n0\n,\n\n        \n0\n,\n\n        \n0\n,\n\n        \n0\n,\n\n        \n0\n,\n\n        \n0\n\n      \n]\n\n    \n]\n\n  \n},\n\n  \ntemplate\n:\n \nadmin/dashboard.html\n,\n\n  \ntitle\n:\n \nDashboard\n,\n\n  \nupdate_feed\n:\n \n[],\n\n  \nupdate_projects_last_week\n:\n \n[\n\n    \n{\n\n      \nday\n:\n \n2016-04-28\n,\n\n      \nemail_addr\n:\n \nemail\n,\n\n      \nid\n:\n \nid\n,\n\n      \nowner_id\n:\n \nid\n,\n\n      \np_name\n:\n \nname\n,\n\n      \nshort_name\n:\n \nname\n,\n\n      \nu_name\n:\n \nname\n\n    \n},\n\n    \n{\n\n      \nday\n:\n \n2016-04-27\n,\n\n      \nemail_addr\n:\n \nemail\n,\n\n      \nid\n:\n \nid\n,\n\n      \nowner_id\n:\n \nid\n,\n\n      \np_name\n:\n \nname\n,\n\n      \nshort_name\n:\n \nname\n,\n\n      \nu_name\n:\n \nname\n\n    \n},\n\n    \n{\n\n      \nday\n:\n \n2016-04-26\n,\n\n      \nemail_addr\n:\n \nemail\n,\n\n      \nid\n:\n \nid\n,\n\n      \nowner_id\n:\n \nid\n,\n\n      \np_name\n:\n \nname\n,\n\n      \nshort_name\n:\n \nname\n,\n\n      \nu_name\n:\n \nname\n\n    \n},\n\n  \n],\n\n  \nwait\n:\n \nfalse\n\n\n}", 
            "title": "Dashboard"
        }, 
        {
            "location": "/api/admin/dashboard/#admin-dashboard", 
            "text": "**Endpoint: /admin/dashboard/  Allowed methods :  GET  GET  It shows the server statistics. You can use the argument  ?refresh=1  to\nupdate the data, as this data is only updated every 24 hours.   active_anon_last_week : Active number of anonymous users in\n    the server.  published_projects_last_week : Published projects from the\n    last week.  new_tasks_week : Number of new tasks created on the last week.  update_feed : Activity feed of actions in the server.  draft_projects_last_week : List of new draft projects created\n    in the last week.  update_projects_last_week : List of updated projects in the\n    last week.  new_users_week : Number of new registered users in the last\n    week.  new_task_runs_week : Number of new task runs in the last week.  returning_users_week : Number of returning users per number of\n    days in a row in the last week.  active_users_last_week : Number of active users in the last\n    week.  wait : This will be False if there s data, otherwise it will be\n    True.   Example output    1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130 { \n   active_anon_last_week :   { \n     labels :   [ \n       2016-04-28 \n     ], \n     series :   [ \n       [ \n         0 \n       ] \n     ] \n   }, \n   active_users_last_week :   { \n     labels :   [ \n       2016-04-28 \n     ], \n     series :   [ \n       [ \n         1 \n       ] \n     ] \n   }, \n   draft_projects_last_week :   [ \n     { \n       day :   2016-04-27 , \n       email_addr :   email , \n       id :   id , \n       owner_id :   id , \n       p_name :   name , \n       short_name :   name , \n       u_name :   name \n     }, \n     { \n       day :   2016-04-26 , \n       email_addr :   email , \n       id :   id , \n       owner_id :   id , \n       p_name :   name , \n       short_name :   name , \n       u_name :   name \n     } \n   ], \n   new_task_runs_week :   { \n     labels :   [ \n       2016-04-28 \n     ], \n     series :   [ \n       [ \n         4 \n       ] \n     ] \n   }, \n   new_tasks_week :   { \n     labels :   [ \n       2016-04-26 , \n       2016-04-28 \n     ], \n     series :   [ \n       [ \n         57 , \n         4 \n       ] \n     ] \n   }, \n   new_users_week :   { \n     labels :   [ \n       2016-04-27 \n     ], \n     series :   [ \n       [ \n         1 \n       ] \n     ] \n   }, \n   published_projects_last_week :   [], \n   returning_users_week :   { \n     labels :   [ \n       1 day , \n       2 days , \n       3 days , \n       4 days , \n       5 days , \n       6 days , \n       7 days \n     ], \n     series :   [ \n       [ \n         0 , \n         0 , \n         0 , \n         0 , \n         0 , \n         0 , \n         0 \n       ] \n     ] \n   }, \n   template :   admin/dashboard.html , \n   title :   Dashboard , \n   update_feed :   [], \n   update_projects_last_week :   [ \n     { \n       day :   2016-04-28 , \n       email_addr :   email , \n       id :   id , \n       owner_id :   id , \n       p_name :   name , \n       short_name :   name , \n       u_name :   name \n     }, \n     { \n       day :   2016-04-27 , \n       email_addr :   email , \n       id :   id , \n       owner_id :   id , \n       p_name :   name , \n       short_name :   name , \n       u_name :   name \n     }, \n     { \n       day :   2016-04-26 , \n       email_addr :   email , \n       id :   id , \n       owner_id :   id , \n       p_name :   name , \n       short_name :   name , \n       u_name :   name \n     }, \n   ], \n   wait :   false  }", 
            "title": "Admin dashboard"
        }, 
        {
            "location": "/api/admin/featured/", 
            "text": "Admin featured projects\n\n\nEndpoint: /admin/featured\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you all featured projects on PYBOSSA.\n\n\n\n\ncategories\n: Gives you a list of categories where projects can be\n    featured.\n\n\nform\n: The form fields that need to be sent for feature and\n    unfeature a project. It contains the CSRF token for validating the\n    POST/DELETE.\n\n\nprojects\n: Featured projects grouped by categories.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n{\n\n  \ncategories\n:\n \n[\n\n    \n{\n\n      \ncreated\n:\n \n2013-06-18T11:13:44.789149\n,\n\n      \ndescription\n:\n \nArt projects\n,\n\n      \nid\n:\n \n3\n,\n\n      \nname\n:\n \nArt\n,\n\n      \nshort_name\n:\n \nart\n\n    \n},\n\n    \n{\n\n      \ncreated\n:\n \n2013-06-18T11:14:54.737672\n,\n\n      \ndescription\n:\n \nHumanities projects\n,\n\n      \nid\n:\n \n4\n,\n\n      \nname\n:\n \nHumanities\n,\n\n      \nshort_name\n:\n \nhumanities\n\n    \n},\n\n    \n...\n\n  \n],\n\n  \nprojects\n:\n \n{\n\n    \nart\n:\n \n[\n\n      \n{\n\n        \ncreated\n:\n \n2013-12-10T06:54:48.222642\n,\n\n        \ndescription\n:\n \nDescription\n,\n\n        \nid\n:\n \n1069\n,\n\n        \ninfo\n:\n \n{\n\n          \ncontainer\n:\n \nuser_3738\n,\n\n          \nthumbnail\n:\n \napp_1069_thumbnail_1410772175.32.png\n\n        \n},\n\n        \nlast_activity\n:\n \njust now\n,\n\n        \nlast_activity_raw\n:\n \nnull\n,\n\n        \nn_tasks\n:\n \n13\n,\n\n        \nn_volunteers\n:\n \n0\n,\n\n        \nname\n:\n \nAAAA Test\n,\n\n        \noverall_progress\n:\n \n0\n,\n\n        \nowner\n:\n \nJohn Doe\n,\n\n        \nshort_name\n:\n \nAAAATest\n,\n\n        \nupdated\n:\n \n2014-11-05T14:55:07.564118\n\n      \n},\n\n      \n...\n\n    \n]\n\n    \nhumanities\n:\n \n[\n\n      \n{\n\n        \ncreated\n:\n \n2014-10-21T12:20:51.194485\n,\n\n        \ndescription\n:\n \ntest project\n,\n\n        \nid\n:\n \n2144\n,\n\n        \ninfo\n:\n \n{\n\n          \ncontainer\n:\n \nnull\n,\n\n          \nthumbnail\n:\n \nnull\n\n        \n},\n\n        \nlast_activity\n:\n \n2 years ago\n,\n\n        \nlast_activity_raw\n:\n \n2014-10-21T12:31:51.560422\n,\n\n        \nn_tasks\n:\n \n9\n,\n\n        \nn_volunteers\n:\n \n2\n,\n\n        \nname\n:\n \nzak\ns test\n,\n\n        \noverall_progress\n:\n \n0\n,\n\n        \nowner\n:\n \nJohn Doe Cousin\n,\n\n        \nshort_name\n:\n \ncousintest\n,\n\n        \nupdated\n:\n \n2014-11-05T14:55:07.564118\n\n      \n},\n\n      \n...\n\n    \n]\n\n  \n},\n\n  \nform\n:\n \n{\n\n    \ncsrf\n:\n \nsecret_token_here\n\n  \n},\n\n  \ntemplate\n:\n \n/admin/projects.html\n\n\n}\n\n\n\n\n\n\n\nAdmin un-/feature projects\n\n\nEndpoint: /admin/featured/\nint:project_id\n\n\nAllowed methods\n: \nPOST / DELETE\n\n\nPOST\n\n\nFeatures a specific project.\n\n\nTo send a valid POST request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nExample output\n\n\nOn Success it will give you the project information\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n{\n\n  \ninfo\n:\n \n{\n\n    \ntask_presenter\n:\n \n...\n,\n\n    \ncontainer\n:\n \nuser_3738\n,\n\n    \nthumbnail\n:\n \napp_1069_thumbnail_1410772175.32.png\n\n  \n},\n\n  \nupdated\n:\n \n2017-01-24T17:21:07.545983\n,\n\n  \ncategory_id\n:\n \n3\n,\n\n  \ndescription\n:\n \nDescription\n,\n\n  \nshort_name\n:\n \nAAAATest\n,\n\n  \ncreated\n:\n \n2013-12-10T06:54:48.222642\n,\n\n  \nwebhook\n:\n \nnull\n,\n\n  \nlong_description\n:\n \nAAAATest\\n\\n\n,\n\n  \nfeatured\n:\n \nfalse\n,\n\n  \nallow_anonymous_contributors\n:\n \ntrue\n,\n\n  \npublished\n:\n \ntrue\n,\n\n  \nsecret_key\n:\n \ndfgojdsfgsgd\n,\n\n  \nowner_id\n:\n \n3738\n,\n\n  \ncontacted\n:\n \nnull\n,\n\n  \nid\n:\n \n1069\n,\n\n  \nname\n:\n \nAAAA Test\n\n\n}\n\n\n\n\n\n\n\nIf a project is already featured:\n\n\n1\n2\n3\n4\n5\n{\n\n  \ncode\n:\n \n400\n,\n\n  \ndescription\n:\n \nCSRF token missing or incorrect.\n,\n\n  \ntemplate\n:\n \n400.html\n\n\n}\n\n\n\n\n\n\n\nDELETE\n\n\nUnfeatures a specific project.\n\n\nTo send a valid DELETE request you need to pass the \ncsrf token\n in the\nheaders. Use the following header: \nX-CSRFToken\n.\n\n\nExample output\n\n\nOn Success it will give you the project information\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n{\n\n  \ninfo\n:\n \n{\n\n    \ntask_presenter\n:\n \n...\n,\n\n    \ncontainer\n:\n \nuser_3738\n,\n\n    \nthumbnail\n:\n \napp_1069_thumbnail_1410772175.32.png\n\n  \n},\n\n  \nupdated\n:\n \n2017-01-24T17:21:07.545983\n,\n\n  \ncategory_id\n:\n \n3\n,\n\n  \ndescription\n:\n \nDescription\n,\n\n  \nshort_name\n:\n \nAAAATest\n,\n\n  \ncreated\n:\n \n2013-12-10T06:54:48.222642\n,\n\n  \nwebhook\n:\n \nnull\n,\n\n  \nlong_description\n:\n \nAAAATest\\n\\n\n,\n\n  \nfeatured\n:\n \nfalse\n,\n\n  \nallow_anonymous_contributors\n:\n \ntrue\n,\n\n  \npublished\n:\n \ntrue\n,\n\n  \nsecret_key\n:\n \n2ffgjngdf6bcbc38ba52561d4\n,\n\n  \nowner_id\n:\n \n3738\n,\n\n  \ncontacted\n:\n \nnull\n,\n\n  \nid\n:\n \n1069\n,\n\n  \nname\n:\n \nAAAA Test\n\n\n}\n\n\n\n\n\n\n\nIf a project is already unfeatured:\n\n\n1\n2\n3\n4\n{\n\n  \nstatus_code\n:\n \n415\n,\n\n  \nerror\n:\n \nProject.id 1069 is not featured\n\n\n}", 
            "title": "Featured projects"
        }, 
        {
            "location": "/api/admin/featured/#admin-featured-projects", 
            "text": "Endpoint: /admin/featured  Allowed methods :  GET  GET  Gives you all featured projects on PYBOSSA.   categories : Gives you a list of categories where projects can be\n    featured.  form : The form fields that need to be sent for feature and\n    unfeature a project. It contains the CSRF token for validating the\n    POST/DELETE.  projects : Featured projects grouped by categories.  template : The Jinja2 template that could be rendered.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67 { \n   categories :   [ \n     { \n       created :   2013-06-18T11:13:44.789149 , \n       description :   Art projects , \n       id :   3 , \n       name :   Art , \n       short_name :   art \n     }, \n     { \n       created :   2013-06-18T11:14:54.737672 , \n       description :   Humanities projects , \n       id :   4 , \n       name :   Humanities , \n       short_name :   humanities \n     }, \n     ... \n   ], \n   projects :   { \n     art :   [ \n       { \n         created :   2013-12-10T06:54:48.222642 , \n         description :   Description , \n         id :   1069 , \n         info :   { \n           container :   user_3738 , \n           thumbnail :   app_1069_thumbnail_1410772175.32.png \n         }, \n         last_activity :   just now , \n         last_activity_raw :   null , \n         n_tasks :   13 , \n         n_volunteers :   0 , \n         name :   AAAA Test , \n         overall_progress :   0 , \n         owner :   John Doe , \n         short_name :   AAAATest , \n         updated :   2014-11-05T14:55:07.564118 \n       }, \n       ... \n     ] \n     humanities :   [ \n       { \n         created :   2014-10-21T12:20:51.194485 , \n         description :   test project , \n         id :   2144 , \n         info :   { \n           container :   null , \n           thumbnail :   null \n         }, \n         last_activity :   2 years ago , \n         last_activity_raw :   2014-10-21T12:31:51.560422 , \n         n_tasks :   9 , \n         n_volunteers :   2 , \n         name :   zak s test , \n         overall_progress :   0 , \n         owner :   John Doe Cousin , \n         short_name :   cousintest , \n         updated :   2014-11-05T14:55:07.564118 \n       }, \n       ... \n     ] \n   }, \n   form :   { \n     csrf :   secret_token_here \n   }, \n   template :   /admin/projects.html  }", 
            "title": "Admin featured projects"
        }, 
        {
            "location": "/api/admin/featured/#admin-un-feature-projects", 
            "text": "Endpoint: /admin/featured/ int:project_id  Allowed methods :  POST / DELETE  POST  Features a specific project.  To send a valid POST request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  Example output  On Success it will give you the project information   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 { \n   info :   { \n     task_presenter :   ... , \n     container :   user_3738 , \n     thumbnail :   app_1069_thumbnail_1410772175.32.png \n   }, \n   updated :   2017-01-24T17:21:07.545983 , \n   category_id :   3 , \n   description :   Description , \n   short_name :   AAAATest , \n   created :   2013-12-10T06:54:48.222642 , \n   webhook :   null , \n   long_description :   AAAATest\\n\\n , \n   featured :   false , \n   allow_anonymous_contributors :   true , \n   published :   true , \n   secret_key :   dfgojdsfgsgd , \n   owner_id :   3738 , \n   contacted :   null , \n   id :   1069 , \n   name :   AAAA Test  }    If a project is already featured:  1\n2\n3\n4\n5 { \n   code :   400 , \n   description :   CSRF token missing or incorrect. , \n   template :   400.html  }    DELETE  Unfeatures a specific project.  To send a valid DELETE request you need to pass the  csrf token  in the\nheaders. Use the following header:  X-CSRFToken .  Example output  On Success it will give you the project information   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 { \n   info :   { \n     task_presenter :   ... , \n     container :   user_3738 , \n     thumbnail :   app_1069_thumbnail_1410772175.32.png \n   }, \n   updated :   2017-01-24T17:21:07.545983 , \n   category_id :   3 , \n   description :   Description , \n   short_name :   AAAATest , \n   created :   2013-12-10T06:54:48.222642 , \n   webhook :   null , \n   long_description :   AAAATest\\n\\n , \n   featured :   false , \n   allow_anonymous_contributors :   true , \n   published :   true , \n   secret_key :   2ffgjngdf6bcbc38ba52561d4 , \n   owner_id :   3738 , \n   contacted :   null , \n   id :   1069 , \n   name :   AAAA Test  }    If a project is already unfeatured:  1\n2\n3\n4 { \n   status_code :   415 , \n   error :   Project.id 1069 is not featured  }", 
            "title": "Admin un-/feature projects"
        }, 
        {
            "location": "/api/help/", 
            "text": "Help API\n\n\nEndpoint: /help/api\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the API help for your PYBOSSA\n\n\n\n\nproject_id\n: a project id for the help example text. If no\n    project exists it is null.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \nproject_id\n:\n \n1104\n,\n\n  \ntemplate\n:\n \nhelp/privacy.html\n,\n\n  \ntitle\n:\n \nAPI Help\n\n\n}\n\n\n\n\n\n\n\nHelp privacy\n\n\nEndpoint: /help/privacy\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the privacy policy for your PYBOSSA\n\n\n\n\ncontent\n: Simplified HTML of rendered privacy policy.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \ncontent\n:\n \nhtml\nbody\np\nprivacy policy here\n/p\n/body\n/html\n\n  \ntemplate\n:\n \nhelp/privacy.html\n,\n\n  \ntitle\n:\n \nPrivacy Policy\n\n\n}\n\n\n\n\n\n\n\nHelp cookie policy\n\n\nEndpoint: /help/cookies-policy\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the cookie policy for your PYBOSSA\n\n\n\n\ncontent\n: Simplified HTML of rendered cookie policy.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \ncontent\n:\n \nhtml\nbody\np\ncookie policy here\n/p\n/body\n/html\n\n  \ntemplate\n:\n \nhelp/cookies_policy.html\n,\n\n  \ntitle\n:\n \nHelp: Cookies Policy\n\n\n}\n\n\n\n\n\n\n\nHelp terms of use\n\n\nEndpoint: /help/terms-of-use\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the terms of use for your PYBOSSA\n\n\n\n\ncontent\n: Simplified HTML of rendered terms of use.\n\n\ntemplate\n: The Jinja2 template that could be rendered.\n\n\ntitle\n: the title for the endpoint.\n\n\n\n\nExample output\n\n\n1\n2\n3\n4\n5\n{\n\n  \ncontent\n:\n \nhtml\nbody\np\nTerms of use text\n/p\n/body\n/html\n\n  \ntemplate\n:\n \nhelp/tos.html\n,\n\n  \ntitle\n:\n \nHelp: Terms of Use\n\n\n}", 
            "title": "Methods"
        }, 
        {
            "location": "/api/help/#help-api", 
            "text": "Endpoint: /help/api  Allowed methods :  GET  GET  Gives you the API help for your PYBOSSA   project_id : a project id for the help example text. If no\n    project exists it is null.  template : The Jinja2 template that could be rendered.  title : the title for the endpoint.   Example output  1\n2\n3\n4\n5 { \n   project_id :   1104 , \n   template :   help/privacy.html , \n   title :   API Help  }", 
            "title": "Help API"
        }, 
        {
            "location": "/api/help/#help-privacy", 
            "text": "Endpoint: /help/privacy  Allowed methods :  GET  GET  Gives you the privacy policy for your PYBOSSA   content : Simplified HTML of rendered privacy policy.  template : The Jinja2 template that could be rendered.  title : the title for the endpoint.   Example output  1\n2\n3\n4\n5 { \n   content :   html body p privacy policy here /p /body /html \n   template :   help/privacy.html , \n   title :   Privacy Policy  }", 
            "title": "Help privacy"
        }, 
        {
            "location": "/api/help/#help-cookie-policy", 
            "text": "Endpoint: /help/cookies-policy  Allowed methods :  GET  GET  Gives you the cookie policy for your PYBOSSA   content : Simplified HTML of rendered cookie policy.  template : The Jinja2 template that could be rendered.  title : the title for the endpoint.   Example output  1\n2\n3\n4\n5 { \n   content :   html body p cookie policy here /p /body /html \n   template :   help/cookies_policy.html , \n   title :   Help: Cookies Policy  }", 
            "title": "Help cookie policy"
        }, 
        {
            "location": "/api/help/#help-terms-of-use", 
            "text": "Endpoint: /help/terms-of-use  Allowed methods :  GET  GET  Gives you the terms of use for your PYBOSSA   content : Simplified HTML of rendered terms of use.  template : The Jinja2 template that could be rendered.  title : the title for the endpoint.   Example output  1\n2\n3\n4\n5 { \n   content :   html body p Terms of use text /p /body /html \n   template :   help/tos.html , \n   title :   Help: Terms of Use  }", 
            "title": "Help terms of use"
        }, 
        {
            "location": "/api/stats/", 
            "text": "PYBOSSA server stats\n\n\nEndpoint: /stats/\n\n\nAllowed methods\n: \nGET\n\n\nGET\n\n\nGives you the global stats of the PYBOSSA server.\n\n\n\n\ntitle\n: the title for the endpoint.\n\n\nlocs\n: localizations for anonymous users that have contributed.\n\n\nprojects\n: statistics about total published and draft projects.\n\n\nshow_locs\n: if GEOIP is enabled to show that data.\n\n\nstats\n: Number of anonymous and authenticated users, number of\n    draft and published projects, number of tasks, taskruns and total\n    number of users.\n\n\ntasks\n: Task and Taskrun statistics.\n\n\ntasks\n: Task and Taskrun statistics.\n\n\ntop_5_projects_24_hours\n: Top 5 projects in the last 24\n    hours.\n\n\ntop_5_users_24_hours\n: Top 5 users in the last 24 hours.\n\n\nusers\n: User statistics.\n\n\n\n\nExample output\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n{\n\n  \nlocs\n:\n \n[]\n,\n\n  \nprojects\n:\n \n{\n\n    \nlabel\n:\n \nProjects Statistics\n,\n\n    \nvalues\n:\n \n[\n\n      \n{\n\n        \nlabel\n:\n \nPublished\n,\n\n        \nvalue\n:\n \n[\n\n          \n0\n,\n\n          \n534\n\n        \n]\n\n      \n},\n\n      \n{\n\n        \nlabel\n:\n \nDraft\n,\n\n        \nvalue\n:\n \n[\n\n          \n0\n,\n\n          \n1278\n\n        \n]\n\n      \n}\n\n    \n]\n\n  \n},\n\n  \nshow_locs\n:\n \nfalse\n,\n\n  \nstats\n:\n \n{\n\n    \nn_anon\n:\n \n27587\n,\n\n    \nn_auth\n:\n \n11134\n,\n\n    \nn_draft_projects\n:\n \n1278\n,\n\n    \nn_published_projects\n:\n \n534\n,\n\n    \nn_task_runs\n:\n \n1801222\n,\n\n    \nn_tasks\n:\n \n553012\n,\n\n    \nn_total_projects\n:\n \n1812\n,\n\n    \nn_total_users\n:\n \n38721\n\n  \n},\n\n  \ntasks\n:\n \n{\n\n    \nlabel\n:\n \nTask and Task Run Statistics\n,\n\n    \nvalues\n:\n \n[\n\n      \n{\n\n        \nlabel\n:\n \nTasks\n,\n\n        \nvalue\n:\n \n[\n\n          \n0\n,\n\n          \n553012\n\n        \n]\n\n      \n},\n\n      \n{\n\n        \nlabel\n:\n \nAnswers\n,\n\n        \nvalue\n:\n \n[\n\n          \n1\n,\n\n          \n1801222\n\n        \n]\n\n      \n}\n\n    \n]\n\n  \n},\n\n  \ntemplate\n:\n \n/stats/global.html\n,\n\n  \ntitle\n:\n \nGlobal Statistics\n,\n\n  \ntop5_projects_24_hours\n:\n \n[],\n\n  \ntop5_users_24_hours\n:\n \n[],\n\n  \nusers\n:\n \n{\n\n    \nlabel\n:\n \nUser Statistics\n,\n\n    \nvalues\n:\n \n[\n\n      \n{\n\n        \nlabel\n:\n \nAnonymous\n,\n\n        \nvalue\n:\n \n[\n\n          \n0\n,\n\n          \n27587\n\n        \n]\n\n      \n},\n\n      \n{\n\n        \nlabel\n:\n \nAuthenticated\n,\n\n        \nvalue\n:\n \n[\n\n          \n0\n,\n\n          \n11134\n\n        \n]\n\n      \n}\n\n    \n]\n\n  \n}\n\n\n}", 
            "title": "Methods"
        }, 
        {
            "location": "/api/stats/#pybossa-server-stats", 
            "text": "Endpoint: /stats/  Allowed methods :  GET  GET  Gives you the global stats of the PYBOSSA server.   title : the title for the endpoint.  locs : localizations for anonymous users that have contributed.  projects : statistics about total published and draft projects.  show_locs : if GEOIP is enabled to show that data.  stats : Number of anonymous and authenticated users, number of\n    draft and published projects, number of tasks, taskruns and total\n    number of users.  tasks : Task and Taskrun statistics.  tasks : Task and Taskrun statistics.  top_5_projects_24_hours : Top 5 projects in the last 24\n    hours.  top_5_users_24_hours : Top 5 users in the last 24 hours.  users : User statistics.   Example output   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75 { \n   locs :   [] , \n   projects :   { \n     label :   Projects Statistics , \n     values :   [ \n       { \n         label :   Published , \n         value :   [ \n           0 , \n           534 \n         ] \n       }, \n       { \n         label :   Draft , \n         value :   [ \n           0 , \n           1278 \n         ] \n       } \n     ] \n   }, \n   show_locs :   false , \n   stats :   { \n     n_anon :   27587 , \n     n_auth :   11134 , \n     n_draft_projects :   1278 , \n     n_published_projects :   534 , \n     n_task_runs :   1801222 , \n     n_tasks :   553012 , \n     n_total_projects :   1812 , \n     n_total_users :   38721 \n   }, \n   tasks :   { \n     label :   Task and Task Run Statistics , \n     values :   [ \n       { \n         label :   Tasks , \n         value :   [ \n           0 , \n           553012 \n         ] \n       }, \n       { \n         label :   Answers , \n         value :   [ \n           1 , \n           1801222 \n         ] \n       } \n     ] \n   }, \n   template :   /stats/global.html , \n   title :   Global Statistics , \n   top5_projects_24_hours :   [], \n   top5_users_24_hours :   [], \n   users :   { \n     label :   User Statistics , \n     values :   [ \n       { \n         label :   Anonymous , \n         value :   [ \n           0 , \n           27587 \n         ] \n       }, \n       { \n         label :   Authenticated , \n         value :   [ \n           0 , \n           11134 \n         ] \n       } \n     ] \n   }  }", 
            "title": "PYBOSSA server stats"
        }, 
        {
            "location": "/installation/vagrant/", 
            "text": "Testing PYBOSSA with Vagrant\n\n\nVagrant\n is an open source solution that allows you to create and configure lightweight, reproducible, and portable development environments.\n\n\nVagrant\n simplifies a lot setting up all the requirements for a web application like PYBOSSA, as you will set up a virtual machine that \nautomagically\n downloads all the required libraries and dependencies for developing and testing the project.\n\n\nFor these reasons, PYBOSSA uses Vagrant to allow you to start effortlessly hacking the system, and more importantly, without polluting your system with lots of libraries that you may or may not needed (everything is configured in the Virtual Machine, which is a very safe sand-box!).\n\n\nAdditionally, several cloud companies have integration with Vagrant, so deploying a PYBOSSA server is simple using this method.\n\n\n\n\nWarning\n\n\nThe virtual machine and server have a \nbasic security\n set of rules (passwords, secrets, firewall, etc.). Therefore,  \nif you are going to use this method to deploy a PYBOSSA production server\n \nit is your responsibility to secure the system properly\n.\n\n\n\n\nSetting up PYBOSSA with Vagrant\n\n\nTo start using Vagrant and PYBOSSA all you have to do is\ninstalling the following open source software:\n\n\n\n\nVirtualBox\n (min version 4.2.10)\n\n\nVagrant\n (min version 1.2.1)\n\n\n\n\n\n\nNote\n\n\nVagrant\n and \nVirtualBox\n works in Windows, GNU/Linux, and Mac OS X, so you can try and run PYBOSSA without problems!\n\n\n\n\nClone the PYBOSSA git repository (be sure to install git in your\nmachine!):\n\n\n1\ngit clone --recursive https://github.com/Scifabric/pybossa.git\n\n\n\n\n\n\nOnce you have downloaded the source code, all you have to do to start your PYBOSSA development environment is typing the following in a terminal:\n\n\n1\n2\ncd\n pybossa\nvagrant up\n\n\n\n\n\n\nThe system will download a Virtual Machine, install all the required\nlibraries for PYBOSSA and set up the system for you inside the virtual machine.\n\n\nVagrant is great because all the changes that you will make in\nyour local copy of PYBOSSA will be automatically populated to the\nVirtual Machine. Hence, if you add a new feature to the system, you will be able to test it right away (this feature is pretty handy for\nworkshops, hackfests, etc.).\n\n\n\n\nNote\n\n\nIf you don\nt have enough space in your hard disk, Vagrant will fail to set up the virtual machine. For solving this issue\njust, modify the VirtualBox path to point to a partition or disk that has enough space. You can then manually change it with\nthis command: VBoxManage setproperty machinefolder to/new/path\n\n\n\n\nRunning the PYBOSSA server\n\n\nNow that all the libraries and dependencies have been installed, you can lunch the PYBOSSA development server:\n\n\n1\n2\nvagrant ssh\npython run.py\n\n\n\n\n\n\n\n\nNote\n\n\nVirtualenv (located in /home/vagrant/pybossa-env) is always activated on  login.\n\n\n\n\nNow all you have to do is open the following URL in your web browser: \nhttp://127.0.0.1:5000\n\n\nAnd you are done! Happy Hacking \n!\n\n\n\n\nNote\n\n\nPYBOSSA needs a RQ worker process. It is running by default permanently in the background in the VM and is controlled by supervisor. Optional is also the RQ scheduler process for speeding up tasks like ZIP creation. This process is off by default now. If you are developing on RQ worker, you want to restart or disable it with supervisorctl.", 
            "title": "Testing PYBOSSA with Vagrant"
        }, 
        {
            "location": "/installation/vagrant/#testing-pybossa-with-vagrant", 
            "text": "Vagrant  is an open source solution that allows you to create and configure lightweight, reproducible, and portable development environments.  Vagrant  simplifies a lot setting up all the requirements for a web application like PYBOSSA, as you will set up a virtual machine that  automagically  downloads all the required libraries and dependencies for developing and testing the project.  For these reasons, PYBOSSA uses Vagrant to allow you to start effortlessly hacking the system, and more importantly, without polluting your system with lots of libraries that you may or may not needed (everything is configured in the Virtual Machine, which is a very safe sand-box!).  Additionally, several cloud companies have integration with Vagrant, so deploying a PYBOSSA server is simple using this method.   Warning  The virtual machine and server have a  basic security  set of rules (passwords, secrets, firewall, etc.). Therefore,   if you are going to use this method to deploy a PYBOSSA production server   it is your responsibility to secure the system properly .", 
            "title": "Testing PYBOSSA with Vagrant"
        }, 
        {
            "location": "/installation/vagrant/#setting-up-pybossa-with-vagrant", 
            "text": "To start using Vagrant and PYBOSSA all you have to do is\ninstalling the following open source software:   VirtualBox  (min version 4.2.10)  Vagrant  (min version 1.2.1)    Note  Vagrant  and  VirtualBox  works in Windows, GNU/Linux, and Mac OS X, so you can try and run PYBOSSA without problems!   Clone the PYBOSSA git repository (be sure to install git in your\nmachine!):  1 git clone --recursive https://github.com/Scifabric/pybossa.git   Once you have downloaded the source code, all you have to do to start your PYBOSSA development environment is typing the following in a terminal:  1\n2 cd  pybossa\nvagrant up   The system will download a Virtual Machine, install all the required\nlibraries for PYBOSSA and set up the system for you inside the virtual machine.  Vagrant is great because all the changes that you will make in\nyour local copy of PYBOSSA will be automatically populated to the\nVirtual Machine. Hence, if you add a new feature to the system, you will be able to test it right away (this feature is pretty handy for\nworkshops, hackfests, etc.).   Note  If you don t have enough space in your hard disk, Vagrant will fail to set up the virtual machine. For solving this issue\njust, modify the VirtualBox path to point to a partition or disk that has enough space. You can then manually change it with\nthis command: VBoxManage setproperty machinefolder to/new/path", 
            "title": "Setting up PYBOSSA with Vagrant"
        }, 
        {
            "location": "/installation/vagrant/#running-the-pybossa-server", 
            "text": "Now that all the libraries and dependencies have been installed, you can lunch the PYBOSSA development server:  1\n2 vagrant ssh\npython run.py    Note  Virtualenv (located in /home/vagrant/pybossa-env) is always activated on  login.   Now all you have to do is open the following URL in your web browser:  http://127.0.0.1:5000  And you are done! Happy Hacking  !   Note  PYBOSSA needs a RQ worker process. It is running by default permanently in the background in the VM and is controlled by supervisor. Optional is also the RQ scheduler process for speeding up tasks like ZIP creation. This process is off by default now. If you are developing on RQ worker, you want to restart or disable it with supervisorctl.", 
            "title": "Running the PYBOSSA server"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing to PYBOSSA\n\n\nBefore You Start\n\n\nAnyone wishing to contribute to the \nScifabric/pybossa\n project \n\nMUST read \n sign a Contributor Assignment Agreement (CAA)\n. \n\n\nThe Scifabric team is legally prevented from accepting any pull requests from users who have not signed the CAA first.\n\n\nIf you have any doubts about the CAA, please, contact us at \ninfo AT scifabric.com\n.\n\n\nInstructions\n\n\nThis document explains how you have to sign the \nIndividual or Entity Contributor Assignment Agreement\n. \n\n\nIf you are younger than 18 years of age or if you are contributing on behalf of an entity or individual from South Africa or Portugal please follow the download instructions (last section). \n\n\nIf you are older than 18 and an individual or contributing on behalf of an entity from anywhere else please select the appropriate form:\n\n\n\n\nIndividual\n, \n\n\nEntity\n\n\n\n\nYou will be prompted to provide identifying information and to show your consent.\n\n\nOnce we have received your consent, we will send you back the agreement via e-mail, and from that moment you will be able to start contributing to the project normally. Welcome to the community!\n\n\nIf you have any doubts, do not hesitate and contact us here: \ninfo AT scifabric.com\n. We will be happy to answer all your questions.\n\n\nIf You do not own the Copyright in the entire work of authorship\n\n\nIf this is your case, you will need to contact all the other authors, and get their signed permission in order to contribute to the project.\n\n\nDownload Instructions\n\n\nIf you are an \nIndividual\n download this \nform\n.\n\n\nIf you are an \nEntity\n download this \nform\n.\n\n\nPlease print, sign and scan it and send it as an attachment in an email to  to \ninfo AT scifabric.com\n Once we have received your copy, we will send you back a signed copy from us, and from that moment you will be able to start contributing to the project normally. Welcome to the community!", 
            "title": "General"
        }, 
        {
            "location": "/contributing/#contributing-to-pybossa", 
            "text": "", 
            "title": "Contributing to PYBOSSA"
        }, 
        {
            "location": "/contributing/#before-you-start", 
            "text": "Anyone wishing to contribute to the  Scifabric/pybossa  project  MUST read   sign a Contributor Assignment Agreement (CAA) .   The Scifabric team is legally prevented from accepting any pull requests from users who have not signed the CAA first.  If you have any doubts about the CAA, please, contact us at  info AT scifabric.com .", 
            "title": "Before You Start"
        }, 
        {
            "location": "/contributing/#instructions", 
            "text": "This document explains how you have to sign the  Individual or Entity Contributor Assignment Agreement .   If you are younger than 18 years of age or if you are contributing on behalf of an entity or individual from South Africa or Portugal please follow the download instructions (last section).   If you are older than 18 and an individual or contributing on behalf of an entity from anywhere else please select the appropriate form:   Individual ,   Entity   You will be prompted to provide identifying information and to show your consent.  Once we have received your consent, we will send you back the agreement via e-mail, and from that moment you will be able to start contributing to the project normally. Welcome to the community!  If you have any doubts, do not hesitate and contact us here:  info AT scifabric.com . We will be happy to answer all your questions.", 
            "title": "Instructions"
        }, 
        {
            "location": "/contributing/#if-you-do-not-own-the-copyright-in-the-entire-work-of-authorship", 
            "text": "If this is your case, you will need to contact all the other authors, and get their signed permission in order to contribute to the project.", 
            "title": "If You do not own the Copyright in the entire work of authorship"
        }, 
        {
            "location": "/contributing/#download-instructions", 
            "text": "If you are an  Individual  download this  form .  If you are an  Entity  download this  form .  Please print, sign and scan it and send it as an attachment in an email to  to  info AT scifabric.com  Once we have received your copy, we will send you back a signed copy from us, and from that moment you will be able to start contributing to the project normally. Welcome to the community!", 
            "title": "Download Instructions"
        }, 
        {
            "location": "/translating/", 
            "text": "Translating PYBOSSA\n\n\nPYBOSSA supports i18n locales, so you can translate the \nUser\nInterface\n to any language. By default PYBOSSA comes with several\nlanguages: English, Spanish, Italian, French, German, Greek and\nJapanese.\n\n\nEnabling multiple locales\n\n\nBy default the translations are located in the default theme folder.\n\n\nYou can enable those translations (mostly user interface strings and\nactions) by doing the following: creating a symlink to the translations\nfolders:\n\n\n1\n$ \ncd\n pybossa \n ln -s themes/default/translations\n\n\n\n\n\n\nThis will use the default translations of PYBOSSA for your server. We\nrecommend to use these translations with the default theme.\n\n\nAdding a new language\n\n\nIf you want to translate PYBOSSA to your own language, lets say French,\nall you have to do is create a translation file with this command:\n\n\n1\n$ pybabel init -i messages.pot -d translations -l fr\n\n\n\n\n\n\nThen, open the file \ntranslations/fr/LC_MESSAGES/messages.po\n with\nany text editor and translate the English strings to French. For\nexample, if you get this string:\n\n\n1\n2\n3\n#: templates/_gcs_form.html:6 templates/admin/users.html:20\n\n\nmsgid\n \nSearch\n\n\nmsgstr\n \n\n\n\n\n\n\n\nAll you have to do is to translate \nSearch\n to its equivalent in\nFrench \nRechercher\n and type in the msgstr section:\n\n\n1\n2\n3\n#: templates/_gcs_form.html:6 templates/admin/users.html:20\n\n\nmsgid\n \nSearch\n\n\nmsgstr\n \nRechercher\n\n\n\n\n\n\n\nOnce you have translated all the strings, all you have to do is compile\nthe translation with this command:\n\n\n1\n$ pybabel compile -d translations\n\n\n\n\n\n\nAnd now enable the new locale in the server local_settings.py file.\nCheck for the LOCALES config variable and add your locale.\n\n\nUpdating translation and adding new strings to the translation\n\n\nFrom time to time, the PYBOSSA framework will have new strings to\ntranslate. In order to add the new strings (or update previous ones) you\nhave to follow this 3 simple steps.\n\n\nStep 1, extract new strings which should be translated:\n\n\n1\n2\n$ \ncd\n pybossa\n$ pybabel extract . -F translations/../babel.cfg -k lazy_gettext -o translations/messages.pot\n\n\n\n\n\n\nStep 2, update existing translation files:\n\n\n1\n$ pybabel update -i translations/messages.pot -d translations\n\n\n\n\n\n\nThis will update all translation file (messages.po) and will try to\nguess some of the translations for saving you time. While this feature\nis really good, sometimes the translation is not good enough, so you\nwill get the word: \nfuzzy\n on top of the translation. Check all the\n\nfuzzy\n translations and fix them. When you are done, remove the line\nwith the word \nfuzzy\n and re-compile the translations.\n\n\nStep 3, recompile translation files:\n\n\n1\n$ pybabel compile -d translations\n\n\n\n\n\n\nContributing your translation to the upstream repository\n\n\nWe would love to support more and more languages by default, so if you\nhave done a translation and you would like that we include it in the\ndefault package, send us a github pull request with your translations or\nif you prefer by e-mail to \n\n\nWe will be very happy to add your contributions to the system.", 
            "title": "Translating PYBOSSA"
        }, 
        {
            "location": "/translating/#translating-pybossa", 
            "text": "PYBOSSA supports i18n locales, so you can translate the  User\nInterface  to any language. By default PYBOSSA comes with several\nlanguages: English, Spanish, Italian, French, German, Greek and\nJapanese.", 
            "title": "Translating PYBOSSA"
        }, 
        {
            "location": "/translating/#enabling-multiple-locales", 
            "text": "By default the translations are located in the default theme folder.  You can enable those translations (mostly user interface strings and\nactions) by doing the following: creating a symlink to the translations\nfolders:  1 $  cd  pybossa   ln -s themes/default/translations   This will use the default translations of PYBOSSA for your server. We\nrecommend to use these translations with the default theme.", 
            "title": "Enabling multiple locales"
        }, 
        {
            "location": "/translating/#adding-a-new-language", 
            "text": "If you want to translate PYBOSSA to your own language, lets say French,\nall you have to do is create a translation file with this command:  1 $ pybabel init -i messages.pot -d translations -l fr   Then, open the file  translations/fr/LC_MESSAGES/messages.po  with\nany text editor and translate the English strings to French. For\nexample, if you get this string:  1\n2\n3 #: templates/_gcs_form.html:6 templates/admin/users.html:20  msgid   Search  msgstr      All you have to do is to translate  Search  to its equivalent in\nFrench  Rechercher  and type in the msgstr section:  1\n2\n3 #: templates/_gcs_form.html:6 templates/admin/users.html:20  msgid   Search  msgstr   Rechercher    Once you have translated all the strings, all you have to do is compile\nthe translation with this command:  1 $ pybabel compile -d translations   And now enable the new locale in the server local_settings.py file.\nCheck for the LOCALES config variable and add your locale.", 
            "title": "Adding a new language"
        }, 
        {
            "location": "/translating/#updating-translation-and-adding-new-strings-to-the-translation", 
            "text": "From time to time, the PYBOSSA framework will have new strings to\ntranslate. In order to add the new strings (or update previous ones) you\nhave to follow this 3 simple steps.", 
            "title": "Updating translation and adding new strings to the translation"
        }, 
        {
            "location": "/translating/#step-1-extract-new-strings-which-should-be-translated", 
            "text": "1\n2 $  cd  pybossa\n$ pybabel extract . -F translations/../babel.cfg -k lazy_gettext -o translations/messages.pot", 
            "title": "Step 1, extract new strings which should be translated:"
        }, 
        {
            "location": "/translating/#step-2-update-existing-translation-files", 
            "text": "1 $ pybabel update -i translations/messages.pot -d translations   This will update all translation file (messages.po) and will try to\nguess some of the translations for saving you time. While this feature\nis really good, sometimes the translation is not good enough, so you\nwill get the word:  fuzzy  on top of the translation. Check all the fuzzy  translations and fix them. When you are done, remove the line\nwith the word  fuzzy  and re-compile the translations.", 
            "title": "Step 2, update existing translation files:"
        }, 
        {
            "location": "/translating/#step-3-recompile-translation-files", 
            "text": "1 $ pybabel compile -d translations", 
            "title": "Step 3, recompile translation files:"
        }, 
        {
            "location": "/translating/#contributing-your-translation-to-the-upstream-repository", 
            "text": "We would love to support more and more languages by default, so if you\nhave done a translation and you would like that we include it in the\ndefault package, send us a github pull request with your translations or\nif you prefer by e-mail to   We will be very happy to add your contributions to the system.", 
            "title": "Contributing your translation to the upstream repository"
        }, 
        {
            "location": "/plugins/", 
            "text": "Writing plugins for a PYBOSSA server\n\n\nPYBOSSA has a plugin system that allows you to write your own custom\nfeatures and add them to a running PYBOSSA server without the need of\ntouching the server code. For instance, you could create a new endpoint\nfor an admin dashboard (with new views, templates, etc.) or build a new\nscheduler like in \nthis example\n.\n\n\nThe PYBOSSA plugin system is powered by\n\nFlask-plugins\n\n\nTo create a plugin, you will have to make a folder with the name of your\nplugin and add it to the plugins folder in your PYBOSSA server. If you\nhave the PYBOSSA code in a directory called pybossa, then the plugins\nfolder will be pybossa/pybossa/plugins.\n\n\nThe least you need to include in that folder is the following:\n\n\n1\n2\n3\nyour_plugin_folder\n|-- info.json\n|-- __init__.py\n\n\n\n\n\n\nflask.ext.plugins.Plugin. On the other hand, info.json needs to follow\nthe schema:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n{\n\n    \nidentifier\n:\n \nidentifier\n,\n\n    \nname\n:\n \nPluginClass\n,\n\n    \nauthor\n:\n \nyou@yourdomain.com\n,\n\n    \nlicense\n:\n \nAGPLv3\n,\n\n    \ndescription\n:\n \nwhatever\n,\n\n    \nversion\n:\n \n0.0.1\n\n\n}\n\n\n\n\n\n\n\nYou could also create a more sofisticated plugin, including your own\ntemplates, models, forms\n everything you need:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nyour_plugin_folder\n|-- info.json                Contains the Plugin\ns metadata\n|-- license.txt              The full license text of your plugin\n|-- __init__.py              The plugin\ns main class is located here\n|-- views.py\n|-- models.py\n|-- forms.py\n|-- static\n|   |-- style.css\n|-- templates\n    |-- myplugin.html\n\n\n\n\n\n\nFor more information and examples, please refer to the Flask-plugins\n\ndocumentation\n.", 
            "title": "Writing plugins"
        }, 
        {
            "location": "/plugins/#writing-plugins-for-a-pybossa-server", 
            "text": "PYBOSSA has a plugin system that allows you to write your own custom\nfeatures and add them to a running PYBOSSA server without the need of\ntouching the server code. For instance, you could create a new endpoint\nfor an admin dashboard (with new views, templates, etc.) or build a new\nscheduler like in  this example .  The PYBOSSA plugin system is powered by Flask-plugins  To create a plugin, you will have to make a folder with the name of your\nplugin and add it to the plugins folder in your PYBOSSA server. If you\nhave the PYBOSSA code in a directory called pybossa, then the plugins\nfolder will be pybossa/pybossa/plugins.  The least you need to include in that folder is the following:  1\n2\n3 your_plugin_folder\n|-- info.json\n|-- __init__.py   flask.ext.plugins.Plugin. On the other hand, info.json needs to follow\nthe schema:  1\n2\n3\n4\n5\n6\n7\n8 { \n     identifier :   identifier , \n     name :   PluginClass , \n     author :   you@yourdomain.com , \n     license :   AGPLv3 , \n     description :   whatever , \n     version :   0.0.1  }    You could also create a more sofisticated plugin, including your own\ntemplates, models, forms  everything you need:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 your_plugin_folder\n|-- info.json                Contains the Plugin s metadata\n|-- license.txt              The full license text of your plugin\n|-- __init__.py              The plugin s main class is located here\n|-- views.py\n|-- models.py\n|-- forms.py\n|-- static\n|   |-- style.css\n|-- templates\n    |-- myplugin.html   For more information and examples, please refer to the Flask-plugins documentation .", 
            "title": "Writing plugins for a PYBOSSA server"
        }, 
        {
            "location": "/gdpr/", 
            "text": "GDPR\n\n\nAs of the 25 of May 2018, every European project has to be GDPR compliant \nGDPR law\n.\n\n\nBelow we explain how PYBOSSA meets the requested requirements to be GDPR compliant.\n\n\nAnonymous contributor IPs\n\n\nPYBOSSA has two types of users:\n\n\n\n\nAuthenticated, and\n\n\nAnonymous\n\n\n\n\nFor Anonymous Users, PYBOSSA has used always their IP address to identify them, however as they don\nt have an\naccount, we can\u00b4t know who is the user behind that IP. In order to improve this security, PYBOSSA (v2.9.5) \nencodes the IP address using the technique \nCryptography-based  Prefix-preserving Anonymization\n to\nensure that all IPs are anonymous.\n\n\nTherefore when downloading results or a project task run, you won\u00b4t get the real user IP as all of them have \nbeen made anonymous.\n\n\nWe use the following \nPython module\n to perform this task.\n\n\nForget me (or delete your account)\n\n\nPYBOSSA now allows any user (without a project) to delete his/her own account. This action cannot be undone.\n\n\nWhen users deletes their account, PYBOSSA will:\n\n\n\n\nAnonymize their task runs. The user_id will be removed, and for each task run PYBOSSA will generates a fake IP address, so that it is not possible to know what users have sent to the server.\n\n\nIf the server is using Mailchimp integration, PYBOSSA will delete the user from the Mailchimp list sholuld the user subscribed to it.\n\n\nDelete all personal data from the server (DB).\n\n\nEmail to the user and the server administrator so that the user knows everything has been deleted.\n\n\n\n\n\n\nNote\n\n\nIf the server is using DISQUS SSO, PYBOSSA will note in the removal confirmation email that \n- as of the 10\nth\n of May 2018, DISQUS does not provide an API method to delete the user account. \nTherefore, PYBOSSA will inform the user that he/she will have to delete their DISQUS account.\n\n\n\n\nExport your own data\n\n\nFrom your personal PYBOSSA account you will be able to export the following data in list of zip files:\n\n\n\n\nAll your personal data\n\n\nAll your projects created by you\n\n\nAll your contributions (task runs)\n\n\n\n\nPYBOSSA will create a ZIP file and send an email with links to your email. Those links will only be valid\nfor 3 days - default configuration, after that they will be removed.\n\n\nThese ZIP files have your data in JSON format, so you can view it with any text editor - standard format.\n\n\nSee all my data\n\n\nYou can get all your data first, so you can see it with any text editor in any platform. \n\n\nRestrict processing\n\n\nIf you don\nt want to delete your account, but you want to restrict processing you can do that from your\nuser\ns profile page. Just go to your settings, hit the update link and there check the \nrestrict processing\n checkbox.\n\n\nThis will ensure that no one access your data, not even the admins. By checking that box, you will be completely removed\nfrom the user API (only you can access your account under your ID), your User is not going to be part of the api USER filtering,\nyou are not included in any leaderboard (including top 5 users for projects, and active users in the last 24 hours).\n\n\nMigrating from a PYBOSSA server version \n v2.9.5\n\n\nIf your server is running a version smaller than v2.9.5 you will need to upgrade the \nserver to the latest version in order to be GDPR compliant. You then have to anonymize\nyour stored IPs. PYBOSSA provides a script for doing this task:\n\n\n1\n  python cli.py anonymize_ips\n\n\n\n\n\n\nIf you have custom leaderboards, then, you will have to drop those materialized views by hand. Why?\nBecause we\nre adding a new column to them. If you only use the default leaderboard, everything should\nwork as expected. To delete your materialized views for your leaderboards, just run this command within\nthe DB:\n\n\n1\n  \ndrop\n \nmaterialized\n \nview\n \nusers_rank_\n{\nyour_name\n}\n;\n\n\n\n\n\n\n\nReplace the {} text with your names, and you will be fine. This will not delete any data, as the materialized\nviews will be recreated by the jobs in the next tick. If you need them recreated now, just open a terminal and\nrun the following command:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nfrom\n \nrun\n \nimport\n \ncreate_app\n\n\nfrom\n \npybossa.leadeboard.jobs\n \nimport\n \nleaderboard\n\n\n\napp\n \n=\n \ncreate_app\n(\nFalse\n)\n\n\n\nwith\n \napp\n.\napp_context\n():\n\n   \nleaderboard\n(\ninfo\n=\nyour_name\n)\n\n   \nleaderboard\n(\ninfo\n=\nyour_second\n)\n\n   \n...\n\n   \nleaderboard\n(\ninfo\n=\nyour_n\n)\n\n\n\n\n\n\n\nThat will recreate the views for you, and you will be ready to use them.\n\n\n\n\nNote\n\n\nWe strongly recommend you to do a backup before running the upgrade and the migration of the DB.\n\n\n\n\nLastly you will have to unsubscribe all your users from project updates. PYBOSSA has a DB migration\nfor achiving it. Just run the following command:\n\n\n1\n  alembic upgrade head\n\n\n\n\n\n\nThis will ensure that all your users are unsubscribed, and they can now subscribe if they want.", 
            "title": "GDPR"
        }, 
        {
            "location": "/gdpr/#gdpr", 
            "text": "As of the 25 of May 2018, every European project has to be GDPR compliant  GDPR law .  Below we explain how PYBOSSA meets the requested requirements to be GDPR compliant.", 
            "title": "GDPR"
        }, 
        {
            "location": "/gdpr/#anonymous-contributor-ips", 
            "text": "PYBOSSA has two types of users:   Authenticated, and  Anonymous   For Anonymous Users, PYBOSSA has used always their IP address to identify them, however as they don t have an\naccount, we can\u00b4t know who is the user behind that IP. In order to improve this security, PYBOSSA (v2.9.5) \nencodes the IP address using the technique  Cryptography-based  Prefix-preserving Anonymization  to\nensure that all IPs are anonymous.  Therefore when downloading results or a project task run, you won\u00b4t get the real user IP as all of them have \nbeen made anonymous.  We use the following  Python module  to perform this task.", 
            "title": "Anonymous contributor IPs"
        }, 
        {
            "location": "/gdpr/#forget-me-or-delete-your-account", 
            "text": "PYBOSSA now allows any user (without a project) to delete his/her own account. This action cannot be undone.  When users deletes their account, PYBOSSA will:   Anonymize their task runs. The user_id will be removed, and for each task run PYBOSSA will generates a fake IP address, so that it is not possible to know what users have sent to the server.  If the server is using Mailchimp integration, PYBOSSA will delete the user from the Mailchimp list sholuld the user subscribed to it.  Delete all personal data from the server (DB).  Email to the user and the server administrator so that the user knows everything has been deleted.    Note  If the server is using DISQUS SSO, PYBOSSA will note in the removal confirmation email that \n- as of the 10 th  of May 2018, DISQUS does not provide an API method to delete the user account. \nTherefore, PYBOSSA will inform the user that he/she will have to delete their DISQUS account.", 
            "title": "Forget me (or delete your account)"
        }, 
        {
            "location": "/gdpr/#export-your-own-data", 
            "text": "From your personal PYBOSSA account you will be able to export the following data in list of zip files:   All your personal data  All your projects created by you  All your contributions (task runs)   PYBOSSA will create a ZIP file and send an email with links to your email. Those links will only be valid\nfor 3 days - default configuration, after that they will be removed.  These ZIP files have your data in JSON format, so you can view it with any text editor - standard format.", 
            "title": "Export your own data"
        }, 
        {
            "location": "/gdpr/#see-all-my-data", 
            "text": "You can get all your data first, so you can see it with any text editor in any platform.", 
            "title": "See all my data"
        }, 
        {
            "location": "/gdpr/#restrict-processing", 
            "text": "If you don t want to delete your account, but you want to restrict processing you can do that from your\nuser s profile page. Just go to your settings, hit the update link and there check the  restrict processing  checkbox.  This will ensure that no one access your data, not even the admins. By checking that box, you will be completely removed\nfrom the user API (only you can access your account under your ID), your User is not going to be part of the api USER filtering,\nyou are not included in any leaderboard (including top 5 users for projects, and active users in the last 24 hours).", 
            "title": "Restrict processing"
        }, 
        {
            "location": "/gdpr/#migrating-from-a-pybossa-server-version-v295", 
            "text": "If your server is running a version smaller than v2.9.5 you will need to upgrade the \nserver to the latest version in order to be GDPR compliant. You then have to anonymize\nyour stored IPs. PYBOSSA provides a script for doing this task:  1   python cli.py anonymize_ips   If you have custom leaderboards, then, you will have to drop those materialized views by hand. Why?\nBecause we re adding a new column to them. If you only use the default leaderboard, everything should\nwork as expected. To delete your materialized views for your leaderboards, just run this command within\nthe DB:  1    drop   materialized   view   users_rank_ { your_name } ;    Replace the {} text with your names, and you will be fine. This will not delete any data, as the materialized\nviews will be recreated by the jobs in the next tick. If you need them recreated now, just open a terminal and\nrun the following command:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 from   run   import   create_app  from   pybossa.leadeboard.jobs   import   leaderboard  app   =   create_app ( False )  with   app . app_context (): \n    leaderboard ( info = your_name ) \n    leaderboard ( info = your_second ) \n    ... \n    leaderboard ( info = your_n )    That will recreate the views for you, and you will be ready to use them.   Note  We strongly recommend you to do a backup before running the upgrade and the migration of the DB.   Lastly you will have to unsubscribe all your users from project updates. PYBOSSA has a DB migration\nfor achiving it. Just run the following command:  1   alembic upgrade head   This will ensure that all your users are unsubscribed, and they can now subscribe if they want.", 
            "title": "Migrating from a PYBOSSA server version &lt; v2.9.5"
        }, 
        {
            "location": "/faq/", 
            "text": "Frequently Asked Questions\n\n\n\n\nInfo\n\n\nIf you do not find your question in this section, please send it to us\ndirectly to \ninfo AT scfabric DOT com\n. We will try to help you and\nadd your question to the FAQ.\n\n\n\n\nUsers\n\n\nDo I need to create an account to participate in the project?\n\n\nIt depends. The owners of the projects can disable anonymous\ncontributions (usually due to privacy issues with the data), forcing you\nto create an account if you want to contribute to that specific project.\n\n\nProjects\n\n\nHow can I create a project?\n\n\nYou can create a project using web forms, or if you prefer it using the\nAPI. We recommend you to read the user/overview and user/tutorial\nsections.\n\n\nCan I disable anonymous contributions?\n\n\nYes, you can. Check your project settings and toggle the drop down menu:\n\nAllow Anonymous Contributors\n from Yes to No. Check the project-details\nfor further information.\n\n\nCan I create \ngolden tasks\n?\n\n\nYes, you can. PYBOSSA has a field for every Task named: \ncalibration\n\nthat will identify the task as a \ngolden\n task or as we call them as a\n\ncalibration task\n. Calibration tasks can be used to weight the answers\nof the volunteers (authenticated and anonymous) as you know the answer\nfor those given tasks. For example, if a user has answered all the\ncalibration tasks correctly you can give a weight of 1 point to all\nhis/her answers, while if the user only answered 50% of them correctly,\nthe answers for the rest of the tasks could be given a weight of 0.5\npoints.\n\n\nCan I delete my project and all the task and task runs?\n\n\nYes, you can. If you are the owner of the project you can delete the\nproject, and automatically all the task and associated task runs will be\ndeleted (\nnote\n: this cannot be undone!). Check the project-delete\nsection for further details.\n\n\nIf I\nve installed the server, can I run a script to reset a project?\n\n\nYes, you can. You will have to access the server, and then run the command\n\n\n1\n   \npython\n \ncli\n.\npy\n \nclean_project\n \nProjectID\n \nSkipTasks\n\n\n\n\n\n\n\n.. note:\n   By default, if you run this command it will return all the tasks,\n   task_runs, results and reset all the statistics for that project. \n   BE CAREFUL.\n\n\nPass ProjectID to delete everything, or tell the command to skip deleting\nthe tasks, so you can keep them, and update the stats accordingly.\n\n\nDo you provide any statistics about the users for my project?\n\n\nYes, every project has its own statistics page that shows information\nabout the distribution of answers per type of user, an estimation about\nhow long it will take to complete all your tasks, the top 5\nauthenticated and anonymous users, etc. Check the \nStatistics\n link in\nthe left local sidebar of your project.\n\n\nMy project is not getting too much attention, how can it be a \nfeatured\n project?\n\n\nFeatured projects are managed by the administrators of the site. Contact\nthem about this issue, and they will decide about your project.\n\n\nI have all my data in a CSV file, can I import it?\n\n\nYes, you can. PYBOSSA supports the CSV format, so all you have to do is\nupload your file to a file server like DropBox, copy the public link and\npaste it in the importer section. PYBOSSA also supports Google Drive\nSpreadsheets, see csv-import section for further details.\n\n\nMy data is in a Google Doc Spreadsheet, can I import the data into my project?\n\n\nYes, you can. PYBOSSA supports the Google Drive Spreadsheets, so make it\npublic, copy the link and use that link to import it the Google Drive\nimporter section. See csv-import section for further details.\n\n\nAll my tasks have been completed, how do I download the results to analyze them?\n\n\nYou can export all the data of your project whenever you want. The data\ncan be exported directly from the \nTasks\n section (check the \nTasks\n\nlink in the left sidebar of your project and click in the export box).\nPYBOSSA can export your tasks and task runs (or answers) to a CSV file,\nJSON format or to a CKAN server. See the export-results section for\nfurther details.\n\n\nWhat is a Task Run?\n\n\nA Task Run is a submitted answer sent by one user (authenticated or\nanonymous) to one of the tasks of your project. In other words, it is\nthe work done by one volunteer for one task.\n\n\nWhat is the Task Presenter?\n\n\nThe task presenter is the web project that will load the tasks of your\nproject and present them to the user. It is an HTML + JavaScript\nproject. See the task-presenter section for further details.\n\n\nPYBOSSA\n\n\nDoes PYBOSSA have an API?\n\n\nYes, it does. PYBOSSA has a api that allows you to create projects,\ndownload results, import tasks, etc. Please see the api section for more\ndetails and the user/tutorial for a full example about how you can use\nit.\n\n\nIs PYBOSSA open-source?\n\n\nYes, it is. PYBOSSA is licensed under the \nGNU Affero general public\nlicense version 3.0\n.\n\n\nDo you provide project templates or examples projects?\n\n\nYes, we do. You can find several open source project examples that can\nbe re-used for image/sound pattern recognition problems, geo-coding, PDF\ntranscription, etc. Check the official \nGit\nrepository\n for all the available\nprojects.\n\n\nDid you get inspired by BOSSA?\n\n\nPYBOSSA derives from the original \nBOSSA\n\nimplementation. The following are some useful references to that\noriginal implementation:\n\n\n\n\nhttp://boinc.berkeley.edu/trac/wiki/BossaImplementation\n\n\nBOSSA Reference: \nhttp://boinc.berkeley.edu/trac/wiki/BossaReference\n\n\n\n\nSupport\n\n\nPYBOSSA is free and open source, that means that anyone can create a\nproject and benefit from the endless features that PYBOSSA has to offer,\nso that you can reach your ultimate goal. And the best part? That it is\nfree of charge!\n\n\nAs well as the FAQs and all the available documentation to help you\ncreate and develop your PYBOSSA project, we will be happy to answer your\nquestions related to the running of PYBOSSA in general.\n\n\nScifabric offers different options for support. Check them and use the\none that fits your needs: \nhttp://pybossa.com/support/", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#frequently-asked-questions", 
            "text": "Info  If you do not find your question in this section, please send it to us\ndirectly to  info AT scfabric DOT com . We will try to help you and\nadd your question to the FAQ.", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#users", 
            "text": "", 
            "title": "Users"
        }, 
        {
            "location": "/faq/#do-i-need-to-create-an-account-to-participate-in-the-project", 
            "text": "It depends. The owners of the projects can disable anonymous\ncontributions (usually due to privacy issues with the data), forcing you\nto create an account if you want to contribute to that specific project.", 
            "title": "Do I need to create an account to participate in the project?"
        }, 
        {
            "location": "/faq/#projects", 
            "text": "", 
            "title": "Projects"
        }, 
        {
            "location": "/faq/#how-can-i-create-a-project", 
            "text": "You can create a project using web forms, or if you prefer it using the\nAPI. We recommend you to read the user/overview and user/tutorial\nsections.", 
            "title": "How can I create a project?"
        }, 
        {
            "location": "/faq/#can-i-disable-anonymous-contributions", 
            "text": "Yes, you can. Check your project settings and toggle the drop down menu: Allow Anonymous Contributors  from Yes to No. Check the project-details\nfor further information.", 
            "title": "Can I disable anonymous contributions?"
        }, 
        {
            "location": "/faq/#can-i-create-golden-tasks", 
            "text": "Yes, you can. PYBOSSA has a field for every Task named:  calibration \nthat will identify the task as a  golden  task or as we call them as a calibration task . Calibration tasks can be used to weight the answers\nof the volunteers (authenticated and anonymous) as you know the answer\nfor those given tasks. For example, if a user has answered all the\ncalibration tasks correctly you can give a weight of 1 point to all\nhis/her answers, while if the user only answered 50% of them correctly,\nthe answers for the rest of the tasks could be given a weight of 0.5\npoints.", 
            "title": "Can I create golden tasks?"
        }, 
        {
            "location": "/faq/#can-i-delete-my-project-and-all-the-task-and-task-runs", 
            "text": "Yes, you can. If you are the owner of the project you can delete the\nproject, and automatically all the task and associated task runs will be\ndeleted ( note : this cannot be undone!). Check the project-delete\nsection for further details.", 
            "title": "Can I delete my project and all the task and task runs?"
        }, 
        {
            "location": "/faq/#if-ive-installed-the-server-can-i-run-a-script-to-reset-a-project", 
            "text": "Yes, you can. You will have to access the server, and then run the command  1     python   cli . py   clean_project   ProjectID   SkipTasks    .. note:\n   By default, if you run this command it will return all the tasks,\n   task_runs, results and reset all the statistics for that project. \n   BE CAREFUL.  Pass ProjectID to delete everything, or tell the command to skip deleting\nthe tasks, so you can keep them, and update the stats accordingly.", 
            "title": "If I've installed the server, can I run a script to reset a project?"
        }, 
        {
            "location": "/faq/#do-you-provide-any-statistics-about-the-users-for-my-project", 
            "text": "Yes, every project has its own statistics page that shows information\nabout the distribution of answers per type of user, an estimation about\nhow long it will take to complete all your tasks, the top 5\nauthenticated and anonymous users, etc. Check the  Statistics  link in\nthe left local sidebar of your project.", 
            "title": "Do you provide any statistics about the users for my project?"
        }, 
        {
            "location": "/faq/#my-project-is-not-getting-too-much-attention-how-can-it-be-a-featured-project", 
            "text": "Featured projects are managed by the administrators of the site. Contact\nthem about this issue, and they will decide about your project.", 
            "title": "My project is not getting too much attention, how can it be a featured project?"
        }, 
        {
            "location": "/faq/#i-have-all-my-data-in-a-csv-file-can-i-import-it", 
            "text": "Yes, you can. PYBOSSA supports the CSV format, so all you have to do is\nupload your file to a file server like DropBox, copy the public link and\npaste it in the importer section. PYBOSSA also supports Google Drive\nSpreadsheets, see csv-import section for further details.", 
            "title": "I have all my data in a CSV file, can I import it?"
        }, 
        {
            "location": "/faq/#my-data-is-in-a-google-doc-spreadsheet-can-i-import-the-data-into-my-project", 
            "text": "Yes, you can. PYBOSSA supports the Google Drive Spreadsheets, so make it\npublic, copy the link and use that link to import it the Google Drive\nimporter section. See csv-import section for further details.", 
            "title": "My data is in a Google Doc Spreadsheet, can I import the data into my project?"
        }, 
        {
            "location": "/faq/#all-my-tasks-have-been-completed-how-do-i-download-the-results-to-analyze-them", 
            "text": "You can export all the data of your project whenever you want. The data\ncan be exported directly from the  Tasks  section (check the  Tasks \nlink in the left sidebar of your project and click in the export box).\nPYBOSSA can export your tasks and task runs (or answers) to a CSV file,\nJSON format or to a CKAN server. See the export-results section for\nfurther details.", 
            "title": "All my tasks have been completed, how do I download the results to analyze them?"
        }, 
        {
            "location": "/faq/#what-is-a-task-run", 
            "text": "A Task Run is a submitted answer sent by one user (authenticated or\nanonymous) to one of the tasks of your project. In other words, it is\nthe work done by one volunteer for one task.", 
            "title": "What is a Task Run?"
        }, 
        {
            "location": "/faq/#what-is-the-task-presenter", 
            "text": "The task presenter is the web project that will load the tasks of your\nproject and present them to the user. It is an HTML + JavaScript\nproject. See the task-presenter section for further details.", 
            "title": "What is the Task Presenter?"
        }, 
        {
            "location": "/faq/#pybossa", 
            "text": "", 
            "title": "PYBOSSA"
        }, 
        {
            "location": "/faq/#does-pybossa-have-an-api", 
            "text": "Yes, it does. PYBOSSA has a api that allows you to create projects,\ndownload results, import tasks, etc. Please see the api section for more\ndetails and the user/tutorial for a full example about how you can use\nit.", 
            "title": "Does PYBOSSA have an API?"
        }, 
        {
            "location": "/faq/#is-pybossa-open-source", 
            "text": "Yes, it is. PYBOSSA is licensed under the  GNU Affero general public\nlicense version 3.0 .", 
            "title": "Is PYBOSSA open-source?"
        }, 
        {
            "location": "/faq/#do-you-provide-project-templates-or-examples-projects", 
            "text": "Yes, we do. You can find several open source project examples that can\nbe re-used for image/sound pattern recognition problems, geo-coding, PDF\ntranscription, etc. Check the official  Git\nrepository  for all the available\nprojects.", 
            "title": "Do you provide project templates or examples projects?"
        }, 
        {
            "location": "/faq/#did-you-get-inspired-by-bossa", 
            "text": "PYBOSSA derives from the original  BOSSA \nimplementation. The following are some useful references to that\noriginal implementation:   http://boinc.berkeley.edu/trac/wiki/BossaImplementation  BOSSA Reference:  http://boinc.berkeley.edu/trac/wiki/BossaReference", 
            "title": "Did you get inspired by BOSSA?"
        }, 
        {
            "location": "/faq/#support", 
            "text": "PYBOSSA is free and open source, that means that anyone can create a\nproject and benefit from the endless features that PYBOSSA has to offer,\nso that you can reach your ultimate goal. And the best part? That it is\nfree of charge!  As well as the FAQs and all the available documentation to help you\ncreate and develop your PYBOSSA project, we will be happy to answer your\nquestions related to the running of PYBOSSA in general.  Scifabric offers different options for support. Check them and use the\none that fits your needs:  http://pybossa.com/support/", 
            "title": "Support"
        }
    ]
}